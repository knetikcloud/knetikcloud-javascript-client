/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActivityOccurrenceCreationFailure from '../model/ActivityOccurrenceCreationFailure';
import ActivityOccurrenceResource from '../model/ActivityOccurrenceResource';
import ActivityOccurrenceResults from '../model/ActivityOccurrenceResults';
import ActivityOccurrenceResultsResource from '../model/ActivityOccurrenceResultsResource';
import ActivityResource from '../model/ActivityResource';
import PageResourceBareActivityResource from '../model/PageResourceBareActivityResource';
import PageResourceTemplateResource from '../model/PageResourceTemplateResource';
import Result from '../model/Result';
import TemplateResource from '../model/TemplateResource';

/**
* Activities service.
* @module api/ActivitiesApi
* @version 3.0.7
*/
export default class ActivitiesApi {

    /**
    * Constructs a new ActivitiesApi. 
    * @alias module:api/ActivitiesApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create an activity
     * @param {Object} opts Optional parameters
     * @param {module:model/ActivityResource} opts.activityResource The activity resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ActivityResource} and HTTP response
     */
    createActivityWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['activityResource'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ActivityResource;

      return this.apiClient.callApi(
        '/activities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create an activity
     * @param {Object} opts Optional parameters
     * @param {module:model/ActivityResource} opts.activityResource The activity resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ActivityResource}
     */
    createActivity(opts) {
      return this.createActivityWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new activity occurrence. Ex: start a game
     * Has to enforce extra rules if not used as an admin
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.test if true, indicates that the occurrence should NOT be created. This can be used to test for eligibility and valid settings (default to false)
     * @param {module:model/ActivityOccurrenceResource} opts.activityOccurrenceResource The activity occurrence object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ActivityOccurrenceResource} and HTTP response
     */
    createActivityOccurrenceWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['activityOccurrenceResource'];


      let pathParams = {
      };
      let queryParams = {
        'test': opts['test']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ActivityOccurrenceResource;

      return this.apiClient.callApi(
        '/activity-occurrences', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new activity occurrence. Ex: start a game
     * Has to enforce extra rules if not used as an admin
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.test if true, indicates that the occurrence should NOT be created. This can be used to test for eligibility and valid settings (default to false)
     * @param {module:model/ActivityOccurrenceResource} opts.activityOccurrenceResource The activity occurrence object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ActivityOccurrenceResource}
     */
    createActivityOccurrence(opts) {
      return this.createActivityOccurrenceWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a activity template
     * Activity Templates define a type of activity and the properties they have
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateResource} opts.activityTemplateResource The activity template resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateResource} and HTTP response
     */
    createActivityTemplateWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['activityTemplateResource'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TemplateResource;

      return this.apiClient.callApi(
        '/activities/templates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a activity template
     * Activity Templates define a type of activity and the properties they have
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateResource} opts.activityTemplateResource The activity template resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateResource}
     */
    createActivityTemplate(opts) {
      return this.createActivityTemplateWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an activity
     * @param {Number} id The id of the activity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteActivityWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteActivity");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/activities/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an activity
     * @param {Number} id The id of the activity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteActivity(id) {
      return this.deleteActivityWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a activity template
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {String} opts.cascade The value needed to delete used templates
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteActivityTemplateWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteActivityTemplate");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'cascade': opts['cascade']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/activities/templates/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a activity template
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {String} opts.cascade The value needed to delete used templates
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteActivityTemplate(id, opts) {
      return this.deleteActivityTemplateWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List activity definitions
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.filterTemplate Filter for activities that are templates, or specifically not if false
     * @param {String} opts.filterName Filter for activities that have a name starting with specified string
     * @param {String} opts.filterId Filter for activities with an id in the given comma separated list of ids
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceBareActivityResource} and HTTP response
     */
    getActivitiesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'filter_template': opts['filterTemplate'],
        'filter_name': opts['filterName'],
        'filter_id': opts['filterId'],
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageResourceBareActivityResource;

      return this.apiClient.callApi(
        '/activities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List activity definitions
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.filterTemplate Filter for activities that are templates, or specifically not if false
     * @param {String} opts.filterName Filter for activities that have a name starting with specified string
     * @param {String} opts.filterId Filter for activities with an id in the given comma separated list of ids
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceBareActivityResource}
     */
    getActivities(opts) {
      return this.getActivitiesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single activity
     * @param {Number} id The id of the activity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ActivityResource} and HTTP response
     */
    getActivityWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getActivity");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ActivityResource;

      return this.apiClient.callApi(
        '/activities/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single activity
     * @param {Number} id The id of the activity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ActivityResource}
     */
    getActivity(id) {
      return this.getActivityWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single activity template
     * @param {String} id The id of the template
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateResource} and HTTP response
     */
    getActivityTemplateWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getActivityTemplate");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TemplateResource;

      return this.apiClient.callApi(
        '/activities/templates/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single activity template
     * @param {String} id The id of the template
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateResource}
     */
    getActivityTemplate(id) {
      return this.getActivityTemplateWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List and search activity templates
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceTemplateResource} and HTTP response
     */
    getActivityTemplatesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageResourceTemplateResource;

      return this.apiClient.callApi(
        '/activities/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List and search activity templates
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceTemplateResource}
     */
    getActivityTemplates(opts) {
      return this.getActivityTemplatesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Sets the status of an activity occurrence to FINISHED and logs metrics
     * @param {Number} activityOccurrenceId The id of the activity occurrence
     * @param {Object} opts Optional parameters
     * @param {module:model/ActivityOccurrenceResultsResource} opts.activityOccurrenceResults The activity occurrence object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ActivityOccurrenceResults} and HTTP response
     */
    setActivityOccurrenceResultsWithHttpInfo(activityOccurrenceId, opts) {
      opts = opts || {};
      let postBody = opts['activityOccurrenceResults'];

      // verify the required parameter 'activityOccurrenceId' is set
      if (activityOccurrenceId === undefined || activityOccurrenceId === null) {
        throw new Error("Missing the required parameter 'activityOccurrenceId' when calling setActivityOccurrenceResults");
      }


      let pathParams = {
        'activity_occurrence_id': activityOccurrenceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ActivityOccurrenceResults;

      return this.apiClient.callApi(
        '/activity-occurrences/{activity_occurrence_id}/results', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Sets the status of an activity occurrence to FINISHED and logs metrics
     * @param {Number} activityOccurrenceId The id of the activity occurrence
     * @param {Object} opts Optional parameters
     * @param {module:model/ActivityOccurrenceResultsResource} opts.activityOccurrenceResults The activity occurrence object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ActivityOccurrenceResults}
     */
    setActivityOccurrenceResults(activityOccurrenceId, opts) {
      return this.setActivityOccurrenceResultsWithHttpInfo(activityOccurrenceId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an activity
     * @param {Number} id The id of the activity
     * @param {Object} opts Optional parameters
     * @param {module:model/ActivityResource} opts.activityResource The activity resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ActivityResource} and HTTP response
     */
    updateActivityWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['activityResource'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateActivity");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ActivityResource;

      return this.apiClient.callApi(
        '/activities/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an activity
     * @param {Number} id The id of the activity
     * @param {Object} opts Optional parameters
     * @param {module:model/ActivityResource} opts.activityResource The activity resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ActivityResource}
     */
    updateActivity(id, opts) {
      return this.updateActivityWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updated the status of an activity occurrence
     * If setting to &#39;FINISHED&#39; you must POST to /results instead to record the metrics and get synchronous reward results
     * @param {Number} activityOccurrenceId The id of the activity occurrence
     * @param {Object} opts Optional parameters
     * @param {String} opts.activityCccurrenceStatus The activity occurrence status object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateActivityOccurrenceWithHttpInfo(activityOccurrenceId, opts) {
      opts = opts || {};
      let postBody = opts['activityCccurrenceStatus'];

      // verify the required parameter 'activityOccurrenceId' is set
      if (activityOccurrenceId === undefined || activityOccurrenceId === null) {
        throw new Error("Missing the required parameter 'activityOccurrenceId' when calling updateActivityOccurrence");
      }


      let pathParams = {
        'activity_occurrence_id': activityOccurrenceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/activity-occurrences/{activity_occurrence_id}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updated the status of an activity occurrence
     * If setting to &#39;FINISHED&#39; you must POST to /results instead to record the metrics and get synchronous reward results
     * @param {Number} activityOccurrenceId The id of the activity occurrence
     * @param {Object} opts Optional parameters
     * @param {String} opts.activityCccurrenceStatus The activity occurrence status object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateActivityOccurrence(activityOccurrenceId, opts) {
      return this.updateActivityOccurrenceWithHttpInfo(activityOccurrenceId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an activity template
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateResource} opts.activityTemplateResource The activity template resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateResource} and HTTP response
     */
    updateActivityTemplateWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['activityTemplateResource'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateActivityTemplate");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TemplateResource;

      return this.apiClient.callApi(
        '/activities/templates/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an activity template
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateResource} opts.activityTemplateResource The activity template resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateResource}
     */
    updateActivityTemplate(id, opts) {
      return this.updateActivityTemplateWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
