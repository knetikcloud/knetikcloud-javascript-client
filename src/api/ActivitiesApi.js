/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ActivityOccurrenceCreationFailure', 'model/ActivityOccurrenceResource', 'model/ActivityOccurrenceResults', 'model/ActivityOccurrenceResultsResource', 'model/ActivityResource', 'model/PageResourceBareActivityResource', 'model/PageResourceTemplateResource', 'model/Result', 'model/TemplateResource'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ActivityOccurrenceCreationFailure'), require('../model/ActivityOccurrenceResource'), require('../model/ActivityOccurrenceResults'), require('../model/ActivityOccurrenceResultsResource'), require('../model/ActivityResource'), require('../model/PageResourceBareActivityResource'), require('../model/PageResourceTemplateResource'), require('../model/Result'), require('../model/TemplateResource'));
  } else {
    // Browser globals (root is window)
    if (!root.KnetikcloudSdk) {
      root.KnetikcloudSdk = {};
    }
    root.KnetikcloudSdk.ActivitiesApi = factory(root.KnetikcloudSdk.ApiClient, root.KnetikcloudSdk.ActivityOccurrenceCreationFailure, root.KnetikcloudSdk.ActivityOccurrenceResource, root.KnetikcloudSdk.ActivityOccurrenceResults, root.KnetikcloudSdk.ActivityOccurrenceResultsResource, root.KnetikcloudSdk.ActivityResource, root.KnetikcloudSdk.PageResourceBareActivityResource, root.KnetikcloudSdk.PageResourceTemplateResource, root.KnetikcloudSdk.Result, root.KnetikcloudSdk.TemplateResource);
  }
}(this, function(ApiClient, ActivityOccurrenceCreationFailure, ActivityOccurrenceResource, ActivityOccurrenceResults, ActivityOccurrenceResultsResource, ActivityResource, PageResourceBareActivityResource, PageResourceTemplateResource, Result, TemplateResource) {
  'use strict';

  /**
   * Activities service.
   * @module api/ActivitiesApi
   * @version 3.0.6
   */

  /**
   * Constructs a new ActivitiesApi. 
   * @alias module:api/ActivitiesApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create an activity
     * @param {Object} opts Optional parameters
     * @param {module:model/ActivityResource} opts.activityResource The activity resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ActivityResource} and HTTP response
     */
    this.createActivityWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['activityResource'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ActivityResource;

      return this.apiClient.callApi(
        '/activities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create an activity
     * @param {Object} opts Optional parameters
     * @param {module:model/ActivityResource} opts.activityResource The activity resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ActivityResource}
     */
    this.createActivity = function(opts) {
      return this.createActivityWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new activity occurrence. Ex: start a game
     * Has to enforce extra rules if not used as an admin
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.test if true, indicates that the occurrence should NOT be created. This can be used to test for eligibility and valid settings (default to false)
     * @param {module:model/ActivityOccurrenceResource} opts.activityOccurrenceResource The activity occurrence object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ActivityOccurrenceResource} and HTTP response
     */
    this.createActivityOccurrenceWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['activityOccurrenceResource'];


      var pathParams = {
      };
      var queryParams = {
        'test': opts['test']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ActivityOccurrenceResource;

      return this.apiClient.callApi(
        '/activity-occurrences', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new activity occurrence. Ex: start a game
     * Has to enforce extra rules if not used as an admin
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.test if true, indicates that the occurrence should NOT be created. This can be used to test for eligibility and valid settings (default to false)
     * @param {module:model/ActivityOccurrenceResource} opts.activityOccurrenceResource The activity occurrence object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ActivityOccurrenceResource}
     */
    this.createActivityOccurrence = function(opts) {
      return this.createActivityOccurrenceWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a activity template
     * Activity Templates define a type of activity and the properties they have
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateResource} opts.activityTemplateResource The activity template resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateResource} and HTTP response
     */
    this.createActivityTemplateWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['activityTemplateResource'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TemplateResource;

      return this.apiClient.callApi(
        '/activities/templates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a activity template
     * Activity Templates define a type of activity and the properties they have
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateResource} opts.activityTemplateResource The activity template resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateResource}
     */
    this.createActivityTemplate = function(opts) {
      return this.createActivityTemplateWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an activity
     * @param {Number} id The id of the activity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteActivityWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteActivity");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/activities/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an activity
     * @param {Number} id The id of the activity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteActivity = function(id) {
      return this.deleteActivityWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a activity template
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {String} opts.cascade The value needed to delete used templates
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteActivityTemplateWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteActivityTemplate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'cascade': opts['cascade']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/activities/templates/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a activity template
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {String} opts.cascade The value needed to delete used templates
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteActivityTemplate = function(id, opts) {
      return this.deleteActivityTemplateWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List activity definitions
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.filterTemplate Filter for activities that are templates, or specifically not if false
     * @param {String} opts.filterName Filter for activities that have a name starting with specified string
     * @param {String} opts.filterId Filter for activities with an id in the given comma separated list of ids
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceBareActivityResource} and HTTP response
     */
    this.getActivitiesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter_template': opts['filterTemplate'],
        'filter_name': opts['filterName'],
        'filter_id': opts['filterId'],
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PageResourceBareActivityResource;

      return this.apiClient.callApi(
        '/activities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List activity definitions
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.filterTemplate Filter for activities that are templates, or specifically not if false
     * @param {String} opts.filterName Filter for activities that have a name starting with specified string
     * @param {String} opts.filterId Filter for activities with an id in the given comma separated list of ids
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceBareActivityResource}
     */
    this.getActivities = function(opts) {
      return this.getActivitiesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single activity
     * @param {Number} id The id of the activity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ActivityResource} and HTTP response
     */
    this.getActivityWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getActivity");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ActivityResource;

      return this.apiClient.callApi(
        '/activities/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single activity
     * @param {Number} id The id of the activity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ActivityResource}
     */
    this.getActivity = function(id) {
      return this.getActivityWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single activity template
     * @param {String} id The id of the template
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateResource} and HTTP response
     */
    this.getActivityTemplateWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getActivityTemplate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TemplateResource;

      return this.apiClient.callApi(
        '/activities/templates/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single activity template
     * @param {String} id The id of the template
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateResource}
     */
    this.getActivityTemplate = function(id) {
      return this.getActivityTemplateWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List and search activity templates
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceTemplateResource} and HTTP response
     */
    this.getActivityTemplatesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PageResourceTemplateResource;

      return this.apiClient.callApi(
        '/activities/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List and search activity templates
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceTemplateResource}
     */
    this.getActivityTemplates = function(opts) {
      return this.getActivityTemplatesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Sets the status of an activity occurrence to FINISHED and logs metrics
     * @param {Number} activityOccurrenceId The id of the activity occurrence
     * @param {Object} opts Optional parameters
     * @param {module:model/ActivityOccurrenceResultsResource} opts.activityOccurrenceResults The activity occurrence object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ActivityOccurrenceResults} and HTTP response
     */
    this.setActivityOccurrenceResultsWithHttpInfo = function(activityOccurrenceId, opts) {
      opts = opts || {};
      var postBody = opts['activityOccurrenceResults'];

      // verify the required parameter 'activityOccurrenceId' is set
      if (activityOccurrenceId === undefined || activityOccurrenceId === null) {
        throw new Error("Missing the required parameter 'activityOccurrenceId' when calling setActivityOccurrenceResults");
      }


      var pathParams = {
        'activity_occurrence_id': activityOccurrenceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ActivityOccurrenceResults;

      return this.apiClient.callApi(
        '/activity-occurrences/{activity_occurrence_id}/results', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Sets the status of an activity occurrence to FINISHED and logs metrics
     * @param {Number} activityOccurrenceId The id of the activity occurrence
     * @param {Object} opts Optional parameters
     * @param {module:model/ActivityOccurrenceResultsResource} opts.activityOccurrenceResults The activity occurrence object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ActivityOccurrenceResults}
     */
    this.setActivityOccurrenceResults = function(activityOccurrenceId, opts) {
      return this.setActivityOccurrenceResultsWithHttpInfo(activityOccurrenceId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an activity
     * @param {Number} id The id of the activity
     * @param {Object} opts Optional parameters
     * @param {module:model/ActivityResource} opts.activityResource The activity resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ActivityResource} and HTTP response
     */
    this.updateActivityWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['activityResource'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateActivity");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ActivityResource;

      return this.apiClient.callApi(
        '/activities/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an activity
     * @param {Number} id The id of the activity
     * @param {Object} opts Optional parameters
     * @param {module:model/ActivityResource} opts.activityResource The activity resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ActivityResource}
     */
    this.updateActivity = function(id, opts) {
      return this.updateActivityWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updated the status of an activity occurrence
     * If setting to &#39;FINISHED&#39; you must POST to /results instead to record the metrics and get synchronous reward results
     * @param {Number} activityOccurrenceId The id of the activity occurrence
     * @param {Object} opts Optional parameters
     * @param {String} opts.activityCccurrenceStatus The activity occurrence status object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateActivityOccurrenceWithHttpInfo = function(activityOccurrenceId, opts) {
      opts = opts || {};
      var postBody = opts['activityCccurrenceStatus'];

      // verify the required parameter 'activityOccurrenceId' is set
      if (activityOccurrenceId === undefined || activityOccurrenceId === null) {
        throw new Error("Missing the required parameter 'activityOccurrenceId' when calling updateActivityOccurrence");
      }


      var pathParams = {
        'activity_occurrence_id': activityOccurrenceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/activity-occurrences/{activity_occurrence_id}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updated the status of an activity occurrence
     * If setting to &#39;FINISHED&#39; you must POST to /results instead to record the metrics and get synchronous reward results
     * @param {Number} activityOccurrenceId The id of the activity occurrence
     * @param {Object} opts Optional parameters
     * @param {String} opts.activityCccurrenceStatus The activity occurrence status object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateActivityOccurrence = function(activityOccurrenceId, opts) {
      return this.updateActivityOccurrenceWithHttpInfo(activityOccurrenceId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an activity template
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateResource} opts.activityTemplateResource The activity template resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateResource} and HTTP response
     */
    this.updateActivityTemplateWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['activityTemplateResource'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateActivityTemplate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TemplateResource;

      return this.apiClient.callApi(
        '/activities/templates/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an activity template
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateResource} opts.activityTemplateResource The activity template resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateResource}
     */
    this.updateActivityTemplate = function(id, opts) {
      return this.updateActivityTemplateWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
