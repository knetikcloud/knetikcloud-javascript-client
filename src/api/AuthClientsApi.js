/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ClientResource from '../model/ClientResource';
import GrantTypeResource from '../model/GrantTypeResource';
import PageResourceClientResource from '../model/PageResourceClientResource';
import Result from '../model/Result';

/**
* AuthClients service.
* @module api/AuthClientsApi
* @version 3.0.7
*/
export default class AuthClientsApi {

    /**
    * Constructs a new AuthClientsApi. 
    * @alias module:api/AuthClientsApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a new client
     * @param {Object} opts Optional parameters
     * @param {module:model/ClientResource} opts.clientResource The client resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClientResource} and HTTP response
     */
    createClientWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['clientResource'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClientResource;

      return this.apiClient.callApi(
        '/auth/clients', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new client
     * @param {Object} opts Optional parameters
     * @param {module:model/ClientResource} opts.clientResource The client resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClientResource}
     */
    createClient(opts) {
      return this.createClientWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a client
     * @param {String} clientKey The key of the client
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteClientWithHttpInfo(clientKey) {
      let postBody = null;

      // verify the required parameter 'clientKey' is set
      if (clientKey === undefined || clientKey === null) {
        throw new Error("Missing the required parameter 'clientKey' when calling deleteClient");
      }


      let pathParams = {
        'client_key': clientKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/auth/clients/{client_key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a client
     * @param {String} clientKey The key of the client
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteClient(clientKey) {
      return this.deleteClientWithHttpInfo(clientKey)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single client
     * @param {String} clientKey The key of the client
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClientResource} and HTTP response
     */
    getClientWithHttpInfo(clientKey) {
      let postBody = null;

      // verify the required parameter 'clientKey' is set
      if (clientKey === undefined || clientKey === null) {
        throw new Error("Missing the required parameter 'clientKey' when calling getClient");
      }


      let pathParams = {
        'client_key': clientKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClientResource;

      return this.apiClient.callApi(
        '/auth/clients/{client_key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single client
     * @param {String} clientKey The key of the client
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClientResource}
     */
    getClient(clientKey) {
      return this.getClientWithHttpInfo(clientKey)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List available client grant types
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/GrantTypeResource>} and HTTP response
     */
    getClientGrantTypesWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [GrantTypeResource];

      return this.apiClient.callApi(
        '/auth/clients/grant-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List available client grant types
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/GrantTypeResource>}
     */
    getClientGrantTypes() {
      return this.getClientGrantTypesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List and search clients
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceClientResource} and HTTP response
     */
    getClientsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageResourceClientResource;

      return this.apiClient.callApi(
        '/auth/clients', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List and search clients
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceClientResource}
     */
    getClients(opts) {
      return this.getClientsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set grant types for a client
     * @param {String} clientKey The key of the client
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.grantList A list of unique grant types
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setClientGrantTypesWithHttpInfo(clientKey, opts) {
      opts = opts || {};
      let postBody = opts['grantList'];

      // verify the required parameter 'clientKey' is set
      if (clientKey === undefined || clientKey === null) {
        throw new Error("Missing the required parameter 'clientKey' when calling setClientGrantTypes");
      }


      let pathParams = {
        'client_key': clientKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/auth/clients/{client_key}/grant-types', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Set grant types for a client
     * @param {String} clientKey The key of the client
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.grantList A list of unique grant types
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setClientGrantTypes(clientKey, opts) {
      return this.setClientGrantTypesWithHttpInfo(clientKey, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set redirect uris for a client
     * @param {String} clientKey The key of the client
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.redirectList A list of unique redirect uris
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setClientRedirectUrisWithHttpInfo(clientKey, opts) {
      opts = opts || {};
      let postBody = opts['redirectList'];

      // verify the required parameter 'clientKey' is set
      if (clientKey === undefined || clientKey === null) {
        throw new Error("Missing the required parameter 'clientKey' when calling setClientRedirectUris");
      }


      let pathParams = {
        'client_key': clientKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/auth/clients/{client_key}/redirect-uris', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Set redirect uris for a client
     * @param {String} clientKey The key of the client
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.redirectList A list of unique redirect uris
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setClientRedirectUris(clientKey, opts) {
      return this.setClientRedirectUrisWithHttpInfo(clientKey, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a client
     * @param {String} clientKey The key of the client
     * @param {Object} opts Optional parameters
     * @param {module:model/ClientResource} opts.clientResource The client resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClientResource} and HTTP response
     */
    updateClientWithHttpInfo(clientKey, opts) {
      opts = opts || {};
      let postBody = opts['clientResource'];

      // verify the required parameter 'clientKey' is set
      if (clientKey === undefined || clientKey === null) {
        throw new Error("Missing the required parameter 'clientKey' when calling updateClient");
      }


      let pathParams = {
        'client_key': clientKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClientResource;

      return this.apiClient.callApi(
        '/auth/clients/{client_key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a client
     * @param {String} clientKey The key of the client
     * @param {Object} opts Optional parameters
     * @param {module:model/ClientResource} opts.clientResource The client resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClientResource}
     */
    updateClient(clientKey, opts) {
      return this.updateClientWithHttpInfo(clientKey, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
