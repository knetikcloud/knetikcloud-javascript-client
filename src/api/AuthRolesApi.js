/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ClientResource from '../model/ClientResource';
import PageResourceRoleResource from '../model/PageResourceRoleResource';
import Result from '../model/Result';
import RoleResource from '../model/RoleResource';
import UserResource from '../model/UserResource';

/**
* AuthRoles service.
* @module api/AuthRolesApi
* @version 3.0.7
*/
export default class AuthRolesApi {

    /**
    * Constructs a new AuthRolesApi. 
    * @alias module:api/AuthRolesApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a new role
     * @param {Object} opts Optional parameters
     * @param {module:model/RoleResource} opts.roleResource The role resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RoleResource} and HTTP response
     */
    createRoleWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['roleResource'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RoleResource;

      return this.apiClient.callApi(
        '/auth/roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new role
     * @param {Object} opts Optional parameters
     * @param {module:model/RoleResource} opts.roleResource The role resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RoleResource}
     */
    createRole(opts) {
      return this.createRoleWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a role
     * @param {String} role The role value
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, removes role from users/clients
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteRoleWithHttpInfo(role, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'role' is set
      if (role === undefined || role === null) {
        throw new Error("Missing the required parameter 'role' when calling deleteRole");
      }


      let pathParams = {
        'role': role
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/auth/roles/{role}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a role
     * @param {String} role The role value
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, removes role from users/clients
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteRole(role, opts) {
      return this.deleteRoleWithHttpInfo(role, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get roles for a client
     * @param {String} clientKey The client key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/RoleResource>} and HTTP response
     */
    getClientRolesWithHttpInfo(clientKey) {
      let postBody = null;

      // verify the required parameter 'clientKey' is set
      if (clientKey === undefined || clientKey === null) {
        throw new Error("Missing the required parameter 'clientKey' when calling getClientRoles");
      }


      let pathParams = {
        'client_key': clientKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [RoleResource];

      return this.apiClient.callApi(
        '/auth/clients/{client_key}/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get roles for a client
     * @param {String} clientKey The client key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/RoleResource>}
     */
    getClientRoles(clientKey) {
      return this.getClientRolesWithHttpInfo(clientKey)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single role
     * @param {String} role The role value
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RoleResource} and HTTP response
     */
    getRoleWithHttpInfo(role) {
      let postBody = null;

      // verify the required parameter 'role' is set
      if (role === undefined || role === null) {
        throw new Error("Missing the required parameter 'role' when calling getRole");
      }


      let pathParams = {
        'role': role
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RoleResource;

      return this.apiClient.callApi(
        '/auth/roles/{role}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single role
     * @param {String} role The role value
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RoleResource}
     */
    getRole(role) {
      return this.getRoleWithHttpInfo(role)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List and search roles
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterName Filter for roles that have a name starting with specified string
     * @param {String} opts.filterRole Filter for roles that have a role starting with specified string
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceRoleResource} and HTTP response
     */
    getRolesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'filter_name': opts['filterName'],
        'filter_role': opts['filterRole'],
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageResourceRoleResource;

      return this.apiClient.callApi(
        '/auth/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List and search roles
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterName Filter for roles that have a name starting with specified string
     * @param {String} opts.filterRole Filter for roles that have a role starting with specified string
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceRoleResource}
     */
    getRoles(opts) {
      return this.getRolesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get roles for a user
     * @param {Number} userId The user&#39;s id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/RoleResource>} and HTTP response
     */
    getUserRolesWithHttpInfo(userId) {
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserRoles");
      }


      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [RoleResource];

      return this.apiClient.callApi(
        '/auth/users/{user_id}/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get roles for a user
     * @param {Number} userId The user&#39;s id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/RoleResource>}
     */
    getUserRoles(userId) {
      return this.getUserRolesWithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set roles for a client
     * @param {String} clientKey The client key
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.rolesList The list of unique roles
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClientResource} and HTTP response
     */
    setClientRolesWithHttpInfo(clientKey, opts) {
      opts = opts || {};
      let postBody = opts['rolesList'];

      // verify the required parameter 'clientKey' is set
      if (clientKey === undefined || clientKey === null) {
        throw new Error("Missing the required parameter 'clientKey' when calling setClientRoles");
      }


      let pathParams = {
        'client_key': clientKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClientResource;

      return this.apiClient.callApi(
        '/auth/clients/{client_key}/roles', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Set roles for a client
     * @param {String} clientKey The client key
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.rolesList The list of unique roles
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClientResource}
     */
    setClientRoles(clientKey, opts) {
      return this.setClientRolesWithHttpInfo(clientKey, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set permissions for a role
     * @param {String} role The role value
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.permissionsList The list of unique permissions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RoleResource} and HTTP response
     */
    setPermissionsForRoleWithHttpInfo(role, opts) {
      opts = opts || {};
      let postBody = opts['permissionsList'];

      // verify the required parameter 'role' is set
      if (role === undefined || role === null) {
        throw new Error("Missing the required parameter 'role' when calling setPermissionsForRole");
      }


      let pathParams = {
        'role': role
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RoleResource;

      return this.apiClient.callApi(
        '/auth/roles/{role}/permissions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Set permissions for a role
     * @param {String} role The role value
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.permissionsList The list of unique permissions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RoleResource}
     */
    setPermissionsForRole(role, opts) {
      return this.setPermissionsForRoleWithHttpInfo(role, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set roles for a user
     * @param {Number} userId The user&#39;s id
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.rolesList The list of unique roles
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserResource} and HTTP response
     */
    setUserRolesWithHttpInfo(userId, opts) {
      opts = opts || {};
      let postBody = opts['rolesList'];

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling setUserRoles");
      }


      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserResource;

      return this.apiClient.callApi(
        '/auth/users/{user_id}/roles', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Set roles for a user
     * @param {Number} userId The user&#39;s id
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.rolesList The list of unique roles
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserResource}
     */
    setUserRoles(userId, opts) {
      return this.setUserRolesWithHttpInfo(userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a role
     * @param {String} role The role value
     * @param {Object} opts Optional parameters
     * @param {module:model/RoleResource} opts.roleResource The role resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RoleResource} and HTTP response
     */
    updateRoleWithHttpInfo(role, opts) {
      opts = opts || {};
      let postBody = opts['roleResource'];

      // verify the required parameter 'role' is set
      if (role === undefined || role === null) {
        throw new Error("Missing the required parameter 'role' when calling updateRole");
      }


      let pathParams = {
        'role': role
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RoleResource;

      return this.apiClient.callApi(
        '/auth/roles/{role}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a role
     * @param {String} role The role value
     * @param {Object} opts Optional parameters
     * @param {module:model/RoleResource} opts.roleResource The role resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RoleResource}
     */
    updateRole(role, opts) {
      return this.updateRoleWithHttpInfo(role, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
