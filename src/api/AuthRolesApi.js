/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ClientResource', 'model/PageResourceRoleResource', 'model/RoleResource', 'model/UserResource'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ClientResource'), require('../model/PageResourceRoleResource'), require('../model/RoleResource'), require('../model/UserResource'));
  } else {
    // Browser globals (root is window)
    if (!root.KnetikPlatformApiDocumentationLatest) {
      root.KnetikPlatformApiDocumentationLatest = {};
    }
    root.KnetikPlatformApiDocumentationLatest.AuthRolesApi = factory(root.KnetikPlatformApiDocumentationLatest.ApiClient, root.KnetikPlatformApiDocumentationLatest.ClientResource, root.KnetikPlatformApiDocumentationLatest.PageResourceRoleResource, root.KnetikPlatformApiDocumentationLatest.RoleResource, root.KnetikPlatformApiDocumentationLatest.UserResource);
  }
}(this, function(ApiClient, ClientResource, PageResourceRoleResource, RoleResource, UserResource) {
  'use strict';

  /**
   * AuthRoles service.
   * @module api/AuthRolesApi
   * @version latest

   */

  /**
   * Constructs a new AuthRolesApi. 
   * @alias module:api/AuthRolesApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the assignClientRolesUsingPUT operation.
     * @callback module:api/AuthRolesApi~assignClientRolesUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set roles for a client
     * @param {String} clientKey The client key
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.rolesList The list of unique roles
     * @param {module:api/AuthRolesApi~assignClientRolesUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.assignClientRolesUsingPUT = function(clientKey, opts, callback) {
      opts = opts || {};
      var postBody = opts['rolesList'];

      // verify the required parameter 'clientKey' is set
      if (clientKey == undefined || clientKey == null) {
        throw new Error("Missing the required parameter 'clientKey' when calling assignClientRolesUsingPUT");
      }


      var pathParams = {
        'client_key': clientKey
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['knetik_oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/auth/clients/{client_key}/roles', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the assignPermissionsUsingPUT operation.
     * @callback module:api/AuthRolesApi~assignPermissionsUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set permissions for a role
     * @param {String} role The role value
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.permissionsList The list of unique permissions
     * @param {module:api/AuthRolesApi~assignPermissionsUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.assignPermissionsUsingPUT = function(role, opts, callback) {
      opts = opts || {};
      var postBody = opts['permissionsList'];

      // verify the required parameter 'role' is set
      if (role == undefined || role == null) {
        throw new Error("Missing the required parameter 'role' when calling assignPermissionsUsingPUT");
      }


      var pathParams = {
        'role': role
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['knetik_oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/auth/roles/{role}/permissions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the assignUserRolesExternalUsingPUT operation.
     * @callback module:api/AuthRolesApi~assignUserRolesExternalUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set roles for a user
     * @param {Number} userId The user&#39;s id
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.rolesList The list of unique roles
     * @param {module:api/AuthRolesApi~assignUserRolesExternalUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.assignUserRolesExternalUsingPUT = function(userId, opts, callback) {
      opts = opts || {};
      var postBody = opts['rolesList'];

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw new Error("Missing the required parameter 'userId' when calling assignUserRolesExternalUsingPUT");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['knetik_oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/auth/users/{user_id}/roles', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createRoleUsingPOST operation.
     * @callback module:api/AuthRolesApi~createRoleUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoleResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new role
     * @param {Object} opts Optional parameters
     * @param {module:model/RoleResource} opts.roleResource The role resource object
     * @param {module:api/AuthRolesApi~createRoleUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoleResource}
     */
    this.createRoleUsingPOST = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['roleResource'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['knetik_oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RoleResource;

      return this.apiClient.callApi(
        '/auth/roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRoleUsingDELETE operation.
     * @callback module:api/AuthRolesApi~deleteRoleUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a role
     * @param {String} role The role value
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, removes role from users/clients
     * @param {module:api/AuthRolesApi~deleteRoleUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteRoleUsingDELETE = function(role, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'role' is set
      if (role == undefined || role == null) {
        throw new Error("Missing the required parameter 'role' when calling deleteRoleUsingDELETE");
      }


      var pathParams = {
        'role': role
      };
      var queryParams = {
        'force': opts['force']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['knetik_oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/auth/roles/{role}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getClientRolesUsingGET operation.
     * @callback module:api/AuthRolesApi~getClientRolesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleResource>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get roles for a client
     * @param {String} clientKey The client key
     * @param {module:api/AuthRolesApi~getClientRolesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleResource>}
     */
    this.getClientRolesUsingGET = function(clientKey, callback) {
      var postBody = null;

      // verify the required parameter 'clientKey' is set
      if (clientKey == undefined || clientKey == null) {
        throw new Error("Missing the required parameter 'clientKey' when calling getClientRolesUsingGET");
      }


      var pathParams = {
        'client_key': clientKey
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['knetik_oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [RoleResource];

      return this.apiClient.callApi(
        '/auth/clients/{client_key}/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRoleUsingGET operation.
     * @callback module:api/AuthRolesApi~getRoleUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoleResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single role
     * @param {String} role The role value
     * @param {module:api/AuthRolesApi~getRoleUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoleResource}
     */
    this.getRoleUsingGET = function(role, callback) {
      var postBody = null;

      // verify the required parameter 'role' is set
      if (role == undefined || role == null) {
        throw new Error("Missing the required parameter 'role' when calling getRoleUsingGET");
      }


      var pathParams = {
        'role': role
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['knetik_oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RoleResource;

      return this.apiClient.callApi(
        '/auth/roles/{role}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRolesUsingGET operation.
     * @callback module:api/AuthRolesApi~getRolesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResourceRoleResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List and search roles
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to name:ASC)
     * @param {module:api/AuthRolesApi~getRolesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResourceRoleResource}
     */
    this.getRolesUsingGET = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['knetik_oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PageResourceRoleResource;

      return this.apiClient.callApi(
        '/auth/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserRolesUsingGET operation.
     * @callback module:api/AuthRolesApi~getUserRolesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleResource>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get roles for a user
     * @param {Number} userId The user&#39;s id
     * @param {module:api/AuthRolesApi~getUserRolesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleResource>}
     */
    this.getUserRolesUsingGET = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserRolesUsingGET");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['knetik_oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [RoleResource];

      return this.apiClient.callApi(
        '/auth/users/{user_id}/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRoleUsingPUT operation.
     * @callback module:api/AuthRolesApi~updateRoleUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a role
     * @param {String} role The role value
     * @param {Object} opts Optional parameters
     * @param {module:model/RoleResource} opts.roleResource The role resource object
     * @param {module:api/AuthRolesApi~updateRoleUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateRoleUsingPUT = function(role, opts, callback) {
      opts = opts || {};
      var postBody = opts['roleResource'];

      // verify the required parameter 'role' is set
      if (role == undefined || role == null) {
        throw new Error("Missing the required parameter 'role' when calling updateRoleUsingPUT");
      }


      var pathParams = {
        'role': role
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['knetik_oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/auth/roles/{role}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
