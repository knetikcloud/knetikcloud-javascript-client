/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import OauthAccessTokenResource from '../model/OauthAccessTokenResource';
import PageResourceOauthAccessTokenResource from '../model/PageResourceOauthAccessTokenResource';
import Result from '../model/Result';

/**
* AuthTokens service.
* @module api/AuthTokensApi
* @version 3.0.7
*/
export default class AuthTokensApi {

    /**
    * Constructs a new AuthTokensApi. 
    * @alias module:api/AuthTokensApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Delete tokens by username, client id, or both
     * @param {Object} opts Optional parameters
     * @param {String} opts.username The username of the user
     * @param {String} opts.clientId The id of the client
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteTokensWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'username': opts['username'],
        'client_id': opts['clientId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/auth/tokens', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete tokens by username, client id, or both
     * @param {Object} opts Optional parameters
     * @param {String} opts.username The username of the user
     * @param {String} opts.clientId The id of the client
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteTokens(opts) {
      return this.deleteTokensWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single token by username and client id
     * @param {String} username The username of the user
     * @param {String} clientId The id of the client
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OauthAccessTokenResource} and HTTP response
     */
    getTokenWithHttpInfo(username, clientId) {
      let postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getToken");
      }

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getToken");
      }


      let pathParams = {
        'username': username,
        'client_id': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OauthAccessTokenResource;

      return this.apiClient.callApi(
        '/auth/tokens/{username}/{client_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single token by username and client id
     * @param {String} username The username of the user
     * @param {String} clientId The id of the client
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OauthAccessTokenResource}
     */
    getToken(username, clientId) {
      return this.getTokenWithHttpInfo(username, clientId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List usernames and client ids
     * Token value not shown
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterClientId Filters for token whose client id matches provided string
     * @param {String} opts.filterUsername Filters for token whose username matches provided string
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceOauthAccessTokenResource} and HTTP response
     */
    getTokensWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'filter_client_id': opts['filterClientId'],
        'filter_username': opts['filterUsername'],
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageResourceOauthAccessTokenResource;

      return this.apiClient.callApi(
        '/auth/tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List usernames and client ids
     * Token value not shown
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterClientId Filters for token whose client id matches provided string
     * @param {String} opts.filterUsername Filters for token whose username matches provided string
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceOauthAccessTokenResource}
     */
    getTokens(opts) {
      return this.getTokensWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
