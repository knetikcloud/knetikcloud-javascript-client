/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BreGlobalResource from '../model/BreGlobalResource';
import PageResourceBreGlobalResource from '../model/PageResourceBreGlobalResource';
import Result from '../model/Result';

/**
* BRERuleEngineGlobals service.
* @module api/BRERuleEngineGlobalsApi
* @version 3.0.7
*/
export default class BRERuleEngineGlobalsApi {

    /**
    * Constructs a new BRERuleEngineGlobalsApi. 
    * @alias module:api/BRERuleEngineGlobalsApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a global definition
     * Once created you can then use in a custom rule. Note that global definitions cannot be modified or deleted if in use.
     * @param {Object} opts Optional parameters
     * @param {module:model/BreGlobalResource} opts.breGlobalResource The BRE global resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BreGlobalResource} and HTTP response
     */
    createBREGlobalWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['breGlobalResource'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BreGlobalResource;

      return this.apiClient.callApi(
        '/bre/globals/definitions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a global definition
     * Once created you can then use in a custom rule. Note that global definitions cannot be modified or deleted if in use.
     * @param {Object} opts Optional parameters
     * @param {module:model/BreGlobalResource} opts.breGlobalResource The BRE global resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BreGlobalResource}
     */
    createBREGlobal(opts) {
      return this.createBREGlobalWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a global
     * May fail if there are existing rules against it. Cannot delete core globals
     * @param {String} id The id of the global definition
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteBREGlobalWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteBREGlobal");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/bre/globals/definitions/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a global
     * May fail if there are existing rules against it. Cannot delete core globals
     * @param {String} id The id of the global definition
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteBREGlobal(id) {
      return this.deleteBREGlobalWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single global definition
     * @param {String} id The id of the global definition
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BreGlobalResource} and HTTP response
     */
    getBREGlobalWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBREGlobal");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BreGlobalResource;

      return this.apiClient.callApi(
        '/bre/globals/definitions/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single global definition
     * @param {String} id The id of the global definition
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BreGlobalResource}
     */
    getBREGlobal(id) {
      return this.getBREGlobalWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List global definitions
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.filterSystem Filter for globals that are system globals when true, or not when false. Leave off for both mixed
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceBreGlobalResource} and HTTP response
     */
    getBREGlobalsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'filter_system': opts['filterSystem'],
        'size': opts['size'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageResourceBreGlobalResource;

      return this.apiClient.callApi(
        '/bre/globals/definitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List global definitions
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.filterSystem Filter for globals that are system globals when true, or not when false. Leave off for both mixed
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceBreGlobalResource}
     */
    getBREGlobals(opts) {
      return this.getBREGlobalsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a global definition
     * May fail if new parameters mismatch requirements of existing rules. Cannot update core globals
     * @param {String} id The id of the global definition
     * @param {Object} opts Optional parameters
     * @param {module:model/BreGlobalResource} opts.breGlobalResource The BRE global resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BreGlobalResource} and HTTP response
     */
    updateBREGlobalWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['breGlobalResource'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateBREGlobal");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BreGlobalResource;

      return this.apiClient.callApi(
        '/bre/globals/definitions/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a global definition
     * May fail if new parameters mismatch requirements of existing rules. Cannot update core globals
     * @param {String} id The id of the global definition
     * @param {Object} opts Optional parameters
     * @param {module:model/BreGlobalResource} opts.breGlobalResource The BRE global resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BreGlobalResource}
     */
    updateBREGlobal(id, opts) {
      return this.updateBREGlobalWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
