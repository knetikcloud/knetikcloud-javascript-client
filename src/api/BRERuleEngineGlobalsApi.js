/**
 * Knetik Platform API Documentation Latest
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BreGlobalResource', 'model/PageBreGlobalResource'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BreGlobalResource'), require('../model/PageBreGlobalResource'));
  } else {
    // Browser globals (root is window)
    if (!root.KnetikPlatformApiDocumentationLatest) {
      root.KnetikPlatformApiDocumentationLatest = {};
    }
    root.KnetikPlatformApiDocumentationLatest.BRERuleEngineGlobalsApi = factory(root.KnetikPlatformApiDocumentationLatest.ApiClient, root.KnetikPlatformApiDocumentationLatest.BreGlobalResource, root.KnetikPlatformApiDocumentationLatest.PageBreGlobalResource);
  }
}(this, function(ApiClient, BreGlobalResource, PageBreGlobalResource) {
  'use strict';

  /**
   * BRERuleEngineGlobals service.
   * @module api/BRERuleEngineGlobalsApi
   * @version Latest
   */

  /**
   * Constructs a new BRERuleEngineGlobalsApi. 
   * @alias module:api/BRERuleEngineGlobalsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createGlobalUsingPOST operation.
     * @callback module:api/BRERuleEngineGlobalsApi~createGlobalUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BreGlobalResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a global definition
     * Once created you can then use in a custom rule. Note that global definitions cannot be modified or deleted if in use.
     * @param {Object} opts Optional parameters
     * @param {module:model/BreGlobalResource} opts.breGlobalResource The BRE global resource object
     * @param {module:api/BRERuleEngineGlobalsApi~createGlobalUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BreGlobalResource}
     */
    this.createGlobalUsingPOST = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['breGlobalResource'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BreGlobalResource;

      return this.apiClient.callApi(
        '/bre/globals/definitions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGlobalUsingDELETE operation.
     * @callback module:api/BRERuleEngineGlobalsApi~deleteGlobalUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a global
     * May fail if there are existing rules against it. Cannot delete core globals
     * @param {String} id The id of the global definition
     * @param {module:api/BRERuleEngineGlobalsApi~deleteGlobalUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteGlobalUsingDELETE = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling deleteGlobalUsingDELETE");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bre/globals/definitions/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGlobalUsingGET operation.
     * @callback module:api/BRERuleEngineGlobalsApi~getGlobalUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BreGlobalResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single global definition
     * @param {String} id The id of the global definition
     * @param {module:api/BRERuleEngineGlobalsApi~getGlobalUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BreGlobalResource}
     */
    this.getGlobalUsingGET = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling getGlobalUsingGET");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BreGlobalResource;

      return this.apiClient.callApi(
        '/bre/globals/definitions/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGlobalsUsingGET operation.
     * @callback module:api/BRERuleEngineGlobalsApi~getGlobalsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBreGlobalResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List global definitions
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.filterSystem Filter for globals that are system globals when true, or not when false. Leave off for both mixed
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {module:api/BRERuleEngineGlobalsApi~getGlobalsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBreGlobalResource}
     */
    this.getGlobalsUsingGET = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter_system': opts['filterSystem'],
        'size': opts['size'],
        'page': opts['page']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PageBreGlobalResource;

      return this.apiClient.callApi(
        '/bre/globals/definitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGlobalUsingPUT operation.
     * @callback module:api/BRERuleEngineGlobalsApi~updateGlobalUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a global definition
     * May fail if new parameters mismatch requirements of existing rules. Cannot update core globals
     * @param {String} id The id of the global definition
     * @param {Object} opts Optional parameters
     * @param {module:model/BreGlobalResource} opts.breGlobalResource The BRE global resource object
     * @param {module:api/BRERuleEngineGlobalsApi~updateGlobalUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateGlobalUsingPUT = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['breGlobalResource'];

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling updateGlobalUsingPUT");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bre/globals/definitions/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
