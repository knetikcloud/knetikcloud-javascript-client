/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PageResourceSimpleReferenceResourceobject from '../model/PageResourceSimpleReferenceResourceobject';
import Result from '../model/Result';
import VariableTypeResource from '../model/VariableTypeResource';

/**
* BRERuleEngineVariables service.
* @module api/BRERuleEngineVariablesApi
* @version 3.0.7
*/
export default class BRERuleEngineVariablesApi {

    /**
    * Constructs a new BRERuleEngineVariablesApi. 
    * @alias module:api/BRERuleEngineVariablesApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get a list of variable types available
     * Types include integer, string, user and invoice. These are used to qualify trigger parameters and action variables with strong typing.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/VariableTypeResource>} and HTTP response
     */
    getBREVariableTypesWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [VariableTypeResource];

      return this.apiClient.callApi(
        '/bre/variable-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a list of variable types available
     * Types include integer, string, user and invoice. These are used to qualify trigger parameters and action variables with strong typing.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/VariableTypeResource>}
     */
    getBREVariableTypes() {
      return this.getBREVariableTypesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List valid values for a type
     * Used to lookup users to fill in a user constant for example. Only types marked as enumerable are suppoorted here.
     * @param {String} name The name of the type
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterName Filter results by those with names starting with this string
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceSimpleReferenceResourceobject} and HTTP response
     */
    getBREVariableValuesWithHttpInfo(name, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getBREVariableValues");
      }


      let pathParams = {
        'name': name
      };
      let queryParams = {
        'filter_name': opts['filterName'],
        'size': opts['size'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageResourceSimpleReferenceResourceobject;

      return this.apiClient.callApi(
        '/bre/variable-types/{name}/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List valid values for a type
     * Used to lookup users to fill in a user constant for example. Only types marked as enumerable are suppoorted here.
     * @param {String} name The name of the type
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterName Filter results by those with names starting with this string
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceSimpleReferenceResourceobject}
     */
    getBREVariableValues(name, opts) {
      return this.getBREVariableValuesWithHttpInfo(name, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
