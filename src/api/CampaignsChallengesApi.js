/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChallengeActivityResource from '../model/ChallengeActivityResource';
import ChallengeEventResource from '../model/ChallengeEventResource';
import ChallengeResource from '../model/ChallengeResource';
import PageResourceBareChallengeActivityResource from '../model/PageResourceBareChallengeActivityResource';
import PageResourceChallengeEventResource from '../model/PageResourceChallengeEventResource';
import PageResourceChallengeResource from '../model/PageResourceChallengeResource';
import PageResourceTemplateResource from '../model/PageResourceTemplateResource';
import Result from '../model/Result';
import TemplateResource from '../model/TemplateResource';

/**
* CampaignsChallenges service.
* @module api/CampaignsChallengesApi
* @version 3.0.7
*/
export default class CampaignsChallengesApi {

    /**
    * Constructs a new CampaignsChallengesApi. 
    * @alias module:api/CampaignsChallengesApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a challenge
     * Challenges do not run on their own.  They must be added to a campaign before events will spawn.
     * @param {Object} opts Optional parameters
     * @param {module:model/ChallengeResource} opts.challengeResource The challenge resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChallengeResource} and HTTP response
     */
    createChallengeWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['challengeResource'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChallengeResource;

      return this.apiClient.callApi(
        '/challenges', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a challenge
     * Challenges do not run on their own.  They must be added to a campaign before events will spawn.
     * @param {Object} opts Optional parameters
     * @param {module:model/ChallengeResource} opts.challengeResource The challenge resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChallengeResource}
     */
    createChallenge(opts) {
      return this.createChallengeWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a challenge activity
     * @param {Number} challengeId The challenge id
     * @param {Object} opts Optional parameters
     * @param {module:model/ChallengeActivityResource} opts.challengeActivityResource The challenge activity resource object
     * @param {Boolean} opts.validateSettings Whether to validate the settings being sent against the available settings on the base activity. (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChallengeActivityResource} and HTTP response
     */
    createChallengeActivityWithHttpInfo(challengeId, opts) {
      opts = opts || {};
      let postBody = opts['challengeActivityResource'];

      // verify the required parameter 'challengeId' is set
      if (challengeId === undefined || challengeId === null) {
        throw new Error("Missing the required parameter 'challengeId' when calling createChallengeActivity");
      }


      let pathParams = {
        'challenge_id': challengeId
      };
      let queryParams = {
        'validateSettings': opts['validateSettings']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChallengeActivityResource;

      return this.apiClient.callApi(
        '/challenges/{challenge_id}/activities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a challenge activity
     * @param {Number} challengeId The challenge id
     * @param {Object} opts Optional parameters
     * @param {module:model/ChallengeActivityResource} opts.challengeActivityResource The challenge activity resource object
     * @param {Boolean} opts.validateSettings Whether to validate the settings being sent against the available settings on the base activity. (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChallengeActivityResource}
     */
    createChallengeActivity(challengeId, opts) {
      return this.createChallengeActivityWithHttpInfo(challengeId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a challenge activity template
     * Challenge Activity Templates define a type of challenge activity and the properties they have
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateResource} opts.challengeActivityTemplateResource The challengeActivity template resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateResource} and HTTP response
     */
    createChallengeActivityTemplateWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['challengeActivityTemplateResource'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TemplateResource;

      return this.apiClient.callApi(
        '/challenge-activities/templates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a challenge activity template
     * Challenge Activity Templates define a type of challenge activity and the properties they have
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateResource} opts.challengeActivityTemplateResource The challengeActivity template resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateResource}
     */
    createChallengeActivityTemplate(opts) {
      return this.createChallengeActivityTemplateWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a challenge template
     * Challenge Templates define a type of challenge and the properties they have
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateResource} opts.challengeTemplateResource The challenge template resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateResource} and HTTP response
     */
    createChallengeTemplateWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['challengeTemplateResource'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TemplateResource;

      return this.apiClient.callApi(
        '/challenges/templates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a challenge template
     * Challenge Templates define a type of challenge and the properties they have
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateResource} opts.challengeTemplateResource The challenge template resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateResource}
     */
    createChallengeTemplate(opts) {
      return this.createChallengeTemplateWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a challenge
     * @param {Number} id The challenge id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteChallengeWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteChallenge");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/challenges/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a challenge
     * @param {Number} id The challenge id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteChallenge(id) {
      return this.deleteChallengeWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a challenge activity
     * A challenge can have multiple instances of the same activity and thus the id used is of the specific entry within the challenge
     * @param {Number} id The challenge_activity id
     * @param {Number} challengeId The challenge id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteChallengeActivityWithHttpInfo(id, challengeId) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteChallengeActivity");
      }

      // verify the required parameter 'challengeId' is set
      if (challengeId === undefined || challengeId === null) {
        throw new Error("Missing the required parameter 'challengeId' when calling deleteChallengeActivity");
      }


      let pathParams = {
        'id': id,
        'challenge_id': challengeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/challenges/{challenge_id}/activities/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a challenge activity
     * A challenge can have multiple instances of the same activity and thus the id used is of the specific entry within the challenge
     * @param {Number} id The challenge_activity id
     * @param {Number} challengeId The challenge id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteChallengeActivity(id, challengeId) {
      return this.deleteChallengeActivityWithHttpInfo(id, challengeId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a challenge activity template
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {String} opts.cascade The value needed to delete used templates
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteChallengeActivityTemplateWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteChallengeActivityTemplate");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'cascade': opts['cascade']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/challenge-activities/templates/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a challenge activity template
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {String} opts.cascade The value needed to delete used templates
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteChallengeActivityTemplate(id, opts) {
      return this.deleteChallengeActivityTemplateWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a challenge event
     * @param {Number} id The challenge event id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteChallengeEventWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteChallengeEvent");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/challenges/events/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a challenge event
     * @param {Number} id The challenge event id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteChallengeEvent(id) {
      return this.deleteChallengeEventWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a challenge template
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {String} opts.cascade The value needed to delete used templates
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteChallengeTemplateWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteChallengeTemplate");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'cascade': opts['cascade']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/challenges/templates/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a challenge template
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {String} opts.cascade The value needed to delete used templates
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteChallengeTemplate(id, opts) {
      return this.deleteChallengeTemplateWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a challenge
     * @param {Number} id The challenge id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChallengeResource} and HTTP response
     */
    getChallengeWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChallenge");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChallengeResource;

      return this.apiClient.callApi(
        '/challenges/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve a challenge
     * @param {Number} id The challenge id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChallengeResource}
     */
    getChallenge(id) {
      return this.getChallengeWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List and search challenge activities
     * @param {Number} challengeId The challenge id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceBareChallengeActivityResource} and HTTP response
     */
    getChallengeActivitiesWithHttpInfo(challengeId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'challengeId' is set
      if (challengeId === undefined || challengeId === null) {
        throw new Error("Missing the required parameter 'challengeId' when calling getChallengeActivities");
      }


      let pathParams = {
        'challenge_id': challengeId
      };
      let queryParams = {
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageResourceBareChallengeActivityResource;

      return this.apiClient.callApi(
        '/challenges/{challenge_id}/activities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List and search challenge activities
     * @param {Number} challengeId The challenge id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceBareChallengeActivityResource}
     */
    getChallengeActivities(challengeId, opts) {
      return this.getChallengeActivitiesWithHttpInfo(challengeId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single challenge activity
     * A challenge can have multiple instances of the same activity and thus the id used is of the specific entry within the challenge
     * @param {Number} id The challenge_activity id
     * @param {Number} challengeId The challenge id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChallengeActivityResource} and HTTP response
     */
    getChallengeActivityWithHttpInfo(id, challengeId) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChallengeActivity");
      }

      // verify the required parameter 'challengeId' is set
      if (challengeId === undefined || challengeId === null) {
        throw new Error("Missing the required parameter 'challengeId' when calling getChallengeActivity");
      }


      let pathParams = {
        'id': id,
        'challenge_id': challengeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChallengeActivityResource;

      return this.apiClient.callApi(
        '/challenges/{challenge_id}/activities/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single challenge activity
     * A challenge can have multiple instances of the same activity and thus the id used is of the specific entry within the challenge
     * @param {Number} id The challenge_activity id
     * @param {Number} challengeId The challenge id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChallengeActivityResource}
     */
    getChallengeActivity(id, challengeId) {
      return this.getChallengeActivityWithHttpInfo(id, challengeId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single challenge activity template
     * @param {String} id The id of the template
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateResource} and HTTP response
     */
    getChallengeActivityTemplateWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChallengeActivityTemplate");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TemplateResource;

      return this.apiClient.callApi(
        '/challenge-activities/templates/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single challenge activity template
     * @param {String} id The id of the template
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateResource}
     */
    getChallengeActivityTemplate(id) {
      return this.getChallengeActivityTemplateWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List and search challenge activity templates
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceTemplateResource} and HTTP response
     */
    getChallengeActivityTemplatesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageResourceTemplateResource;

      return this.apiClient.callApi(
        '/challenge-activities/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List and search challenge activity templates
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceTemplateResource}
     */
    getChallengeActivityTemplates(opts) {
      return this.getChallengeActivityTemplatesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a single challenge event details
     * @param {Number} id The challenge event id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChallengeEventResource} and HTTP response
     */
    getChallengeEventWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChallengeEvent");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChallengeEventResource;

      return this.apiClient.callApi(
        '/challenges/events/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve a single challenge event details
     * @param {Number} id The challenge event id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChallengeEventResource}
     */
    getChallengeEvent(id) {
      return this.getChallengeEventWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a list of challenge events
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterStartDate A comma separated string without spaces.  First value is the operator to search on, second value is the event start date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE).
     * @param {String} opts.filterEndDate A comma separated string without spaces.  First value is the operator to search on, second value is the event end date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE).
     * @param {Boolean} opts.filterCampaigns check only for events from currently running campaigns
     * @param {Number} opts.filterChallenge check only for events from the challenge specified by id
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceChallengeEventResource} and HTTP response
     */
    getChallengeEventsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'filter_start_date': opts['filterStartDate'],
        'filter_end_date': opts['filterEndDate'],
        'filter_campaigns': opts['filterCampaigns'],
        'filter_challenge': opts['filterChallenge'],
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageResourceChallengeEventResource;

      return this.apiClient.callApi(
        '/challenges/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve a list of challenge events
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterStartDate A comma separated string without spaces.  First value is the operator to search on, second value is the event start date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE).
     * @param {String} opts.filterEndDate A comma separated string without spaces.  First value is the operator to search on, second value is the event end date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE).
     * @param {Boolean} opts.filterCampaigns check only for events from currently running campaigns
     * @param {Number} opts.filterChallenge check only for events from the challenge specified by id
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceChallengeEventResource}
     */
    getChallengeEvents(opts) {
      return this.getChallengeEventsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single challenge template
     * @param {String} id The id of the template
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateResource} and HTTP response
     */
    getChallengeTemplateWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChallengeTemplate");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TemplateResource;

      return this.apiClient.callApi(
        '/challenges/templates/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single challenge template
     * @param {String} id The id of the template
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateResource}
     */
    getChallengeTemplate(id) {
      return this.getChallengeTemplateWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List and search challenge templates
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceTemplateResource} and HTTP response
     */
    getChallengeTemplatesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageResourceTemplateResource;

      return this.apiClient.callApi(
        '/challenges/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List and search challenge templates
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceTemplateResource}
     */
    getChallengeTemplates(opts) {
      return this.getChallengeTemplatesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a list of challenges
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.filterTemplate Filter for challenges that are not tied to campaigns (templates)
     * @param {Boolean} opts.filterActiveCampaign Filter for challenges that are tied to active campaigns
     * @param {String} opts.filterStartDate A comma separated string without spaces.  First value is the operator to search on, second value is the challenge start date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE).
     * @param {String} opts.filterEndDate A comma separated string without spaces.  First value is the operator to search on, second value is the challenge end date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE).
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceChallengeResource} and HTTP response
     */
    getChallengesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'filter_template': opts['filterTemplate'],
        'filter_active_campaign': opts['filterActiveCampaign'],
        'filter_start_date': opts['filterStartDate'],
        'filter_end_date': opts['filterEndDate'],
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageResourceChallengeResource;

      return this.apiClient.callApi(
        '/challenges', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve a list of challenges
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.filterTemplate Filter for challenges that are not tied to campaigns (templates)
     * @param {Boolean} opts.filterActiveCampaign Filter for challenges that are tied to active campaigns
     * @param {String} opts.filterStartDate A comma separated string without spaces.  First value is the operator to search on, second value is the challenge start date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE).
     * @param {String} opts.filterEndDate A comma separated string without spaces.  First value is the operator to search on, second value is the challenge end date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE).
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceChallengeResource}
     */
    getChallenges(opts) {
      return this.getChallengesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a challenge
     * If the challenge is a copy, changes will propagate to all the related challenges
     * @param {Number} id The challenge id
     * @param {Object} opts Optional parameters
     * @param {module:model/ChallengeResource} opts.challengeResource The challenge resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChallengeResource} and HTTP response
     */
    updateChallengeWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['challengeResource'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateChallenge");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChallengeResource;

      return this.apiClient.callApi(
        '/challenges/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a challenge
     * If the challenge is a copy, changes will propagate to all the related challenges
     * @param {Number} id The challenge id
     * @param {Object} opts Optional parameters
     * @param {module:model/ChallengeResource} opts.challengeResource The challenge resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChallengeResource}
     */
    updateChallenge(id, opts) {
      return this.updateChallengeWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a challenge activity
     * A challenge can have multiple instances of the same activity and thus the id used is of the specific entry within the challenge
     * @param {Number} id The challenge_activity id
     * @param {Number} challengeId The challenge id
     * @param {Object} opts Optional parameters
     * @param {module:model/ChallengeActivityResource} opts.challengeActivityResource The challenge activity resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChallengeActivityResource} and HTTP response
     */
    updateChallengeActivityWithHttpInfo(id, challengeId, opts) {
      opts = opts || {};
      let postBody = opts['challengeActivityResource'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateChallengeActivity");
      }

      // verify the required parameter 'challengeId' is set
      if (challengeId === undefined || challengeId === null) {
        throw new Error("Missing the required parameter 'challengeId' when calling updateChallengeActivity");
      }


      let pathParams = {
        'id': id,
        'challenge_id': challengeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChallengeActivityResource;

      return this.apiClient.callApi(
        '/challenges/{challenge_id}/activities/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a challenge activity
     * A challenge can have multiple instances of the same activity and thus the id used is of the specific entry within the challenge
     * @param {Number} id The challenge_activity id
     * @param {Number} challengeId The challenge id
     * @param {Object} opts Optional parameters
     * @param {module:model/ChallengeActivityResource} opts.challengeActivityResource The challenge activity resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChallengeActivityResource}
     */
    updateChallengeActivity(id, challengeId, opts) {
      return this.updateChallengeActivityWithHttpInfo(id, challengeId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an challenge activity template
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateResource} opts.challengeActivityTemplateResource The challengeActivity template resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateResource} and HTTP response
     */
    updateChallengeActivityTemplateWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['challengeActivityTemplateResource'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateChallengeActivityTemplate");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TemplateResource;

      return this.apiClient.callApi(
        '/challenge-activities/templates/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an challenge activity template
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateResource} opts.challengeActivityTemplateResource The challengeActivity template resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateResource}
     */
    updateChallengeActivityTemplate(id, opts) {
      return this.updateChallengeActivityTemplateWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a challenge template
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateResource} opts.challengeTemplateResource The challenge template resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateResource} and HTTP response
     */
    updateChallengeTemplateWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['challengeTemplateResource'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateChallengeTemplate");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TemplateResource;

      return this.apiClient.callApi(
        '/challenges/templates/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a challenge template
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateResource} opts.challengeTemplateResource The challenge template resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateResource}
     */
    updateChallengeTemplate(id, opts) {
      return this.updateChallengeTemplateWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
