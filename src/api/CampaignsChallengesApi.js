/**
 * Knetik Platform API Documentation Latest
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ChallengeActivityResource', 'model/ChallengeEventResource', 'model/ChallengeResource', 'model/PageResourceBareChallengeActivityResource', 'model/PageResourceChallengeEventResource', 'model/PageResourceChallengeResource', 'model/PageResourceTemplateResource', 'model/TemplateResource'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ChallengeActivityResource'), require('../model/ChallengeEventResource'), require('../model/ChallengeResource'), require('../model/PageResourceBareChallengeActivityResource'), require('../model/PageResourceChallengeEventResource'), require('../model/PageResourceChallengeResource'), require('../model/PageResourceTemplateResource'), require('../model/TemplateResource'));
  } else {
    // Browser globals (root is window)
    if (!root.KnetikPlatformApiDocumentationLatest) {
      root.KnetikPlatformApiDocumentationLatest = {};
    }
    root.KnetikPlatformApiDocumentationLatest.CampaignsChallengesApi = factory(root.KnetikPlatformApiDocumentationLatest.ApiClient, root.KnetikPlatformApiDocumentationLatest.ChallengeActivityResource, root.KnetikPlatformApiDocumentationLatest.ChallengeEventResource, root.KnetikPlatformApiDocumentationLatest.ChallengeResource, root.KnetikPlatformApiDocumentationLatest.PageResourceBareChallengeActivityResource, root.KnetikPlatformApiDocumentationLatest.PageResourceChallengeEventResource, root.KnetikPlatformApiDocumentationLatest.PageResourceChallengeResource, root.KnetikPlatformApiDocumentationLatest.PageResourceTemplateResource, root.KnetikPlatformApiDocumentationLatest.TemplateResource);
  }
}(this, function(ApiClient, ChallengeActivityResource, ChallengeEventResource, ChallengeResource, PageResourceBareChallengeActivityResource, PageResourceChallengeEventResource, PageResourceChallengeResource, PageResourceTemplateResource, TemplateResource) {
  'use strict';

  /**
   * CampaignsChallenges service.
   * @module api/CampaignsChallengesApi
   * @version Latest
   */

  /**
   * Constructs a new CampaignsChallengesApi. 
   * @alias module:api/CampaignsChallengesApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createChallengeActivityUsingPOST operation.
     * @callback module:api/CampaignsChallengesApi~createChallengeActivityUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChallengeActivityResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a challenge activity
     * @param {Number} challengeId The challenge id
     * @param {Object} opts Optional parameters
     * @param {module:model/ChallengeActivityResource} opts.challengeActivityResource The challenge activity resource object
     * @param {Boolean} opts.validateSettings Whether to validate the settings being sent against the available settings on the base activity. (default to false)
     * @param {module:api/CampaignsChallengesApi~createChallengeActivityUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChallengeActivityResource}
     */
    this.createChallengeActivityUsingPOST = function(challengeId, opts, callback) {
      opts = opts || {};
      var postBody = opts['challengeActivityResource'];

      // verify the required parameter 'challengeId' is set
      if (challengeId == undefined || challengeId == null) {
        throw new Error("Missing the required parameter 'challengeId' when calling createChallengeActivityUsingPOST");
      }


      var pathParams = {
        'challenge_id': challengeId
      };
      var queryParams = {
        'validateSettings': opts['validateSettings']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ChallengeActivityResource;

      return this.apiClient.callApi(
        '/challenges/{challenge_id}/activities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createChallengeTemplateUsingPOST operation.
     * @callback module:api/CampaignsChallengesApi~createChallengeTemplateUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TemplateResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a challenge template
     * Challenge Templates define a type of challenge and the properties they have
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateResource} opts.challengeTemplateResource The challenge template resource object
     * @param {module:api/CampaignsChallengesApi~createChallengeTemplateUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TemplateResource}
     */
    this.createChallengeTemplateUsingPOST = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['challengeTemplateResource'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TemplateResource;

      return this.apiClient.callApi(
        '/challenges/templates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createChallengeUsingPOST operation.
     * @callback module:api/CampaignsChallengesApi~createChallengeUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChallengeResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a challenge
     * Challenges do not run on their own.  They must be added to a campaign before events will spawn.
     * @param {Object} opts Optional parameters
     * @param {module:model/ChallengeResource} opts.challengeResource The challenge resource object
     * @param {module:api/CampaignsChallengesApi~createChallengeUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChallengeResource}
     */
    this.createChallengeUsingPOST = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['challengeResource'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ChallengeResource;

      return this.apiClient.callApi(
        '/challenges', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChallengeActivityUsingDELETE operation.
     * @callback module:api/CampaignsChallengesApi~deleteChallengeActivityUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a challenge activity
     * @param {Number} activityId The activity id
     * @param {Number} challengeId The challenge id
     * @param {module:api/CampaignsChallengesApi~deleteChallengeActivityUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteChallengeActivityUsingDELETE = function(activityId, challengeId, callback) {
      var postBody = null;

      // verify the required parameter 'activityId' is set
      if (activityId == undefined || activityId == null) {
        throw new Error("Missing the required parameter 'activityId' when calling deleteChallengeActivityUsingDELETE");
      }

      // verify the required parameter 'challengeId' is set
      if (challengeId == undefined || challengeId == null) {
        throw new Error("Missing the required parameter 'challengeId' when calling deleteChallengeActivityUsingDELETE");
      }


      var pathParams = {
        'activity_id': activityId,
        'challenge_id': challengeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/challenges/{challenge_id}/activities/{activity_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChallengeEventUsingDELETE operation.
     * @callback module:api/CampaignsChallengesApi~deleteChallengeEventUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a challenge event
     * @param {Number} id The challenge event id
     * @param {module:api/CampaignsChallengesApi~deleteChallengeEventUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteChallengeEventUsingDELETE = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling deleteChallengeEventUsingDELETE");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/challenges/events/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChallengeTemplateUsingDELETE operation.
     * @callback module:api/CampaignsChallengesApi~deleteChallengeTemplateUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a challenge template
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {String} opts.cascade The value needed to delete used templates
     * @param {module:api/CampaignsChallengesApi~deleteChallengeTemplateUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteChallengeTemplateUsingDELETE = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling deleteChallengeTemplateUsingDELETE");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'cascade': opts['cascade']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/challenges/templates/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChallengeUsingDELETE operation.
     * @callback module:api/CampaignsChallengesApi~deleteChallengeUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a challenge
     * @param {Number} id The challenge id
     * @param {module:api/CampaignsChallengesApi~deleteChallengeUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteChallengeUsingDELETE = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling deleteChallengeUsingDELETE");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/challenges/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getActivitiesUsingGET1 operation.
     * @callback module:api/CampaignsChallengesApi~getActivitiesUsingGET1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResourceBareChallengeActivityResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List and search challenge activities
     * @param {Number} challengeId The challenge id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @param {module:api/CampaignsChallengesApi~getActivitiesUsingGET1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResourceBareChallengeActivityResource}
     */
    this.getActivitiesUsingGET1 = function(challengeId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'challengeId' is set
      if (challengeId == undefined || challengeId == null) {
        throw new Error("Missing the required parameter 'challengeId' when calling getActivitiesUsingGET1");
      }


      var pathParams = {
        'challenge_id': challengeId
      };
      var queryParams = {
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PageResourceBareChallengeActivityResource;

      return this.apiClient.callApi(
        '/challenges/{challenge_id}/activities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChallengeActivityUsingGET operation.
     * @callback module:api/CampaignsChallengesApi~getChallengeActivityUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChallengeActivityResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single challenge activity
     * @param {Number} activityId The activity id
     * @param {module:api/CampaignsChallengesApi~getChallengeActivityUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChallengeActivityResource}
     */
    this.getChallengeActivityUsingGET = function(activityId, callback) {
      var postBody = null;

      // verify the required parameter 'activityId' is set
      if (activityId == undefined || activityId == null) {
        throw new Error("Missing the required parameter 'activityId' when calling getChallengeActivityUsingGET");
      }


      var pathParams = {
        'activity_id': activityId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ChallengeActivityResource;

      return this.apiClient.callApi(
        '/challenges/{challenge_id}/activities/{activity_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChallengeEventUsingGET operation.
     * @callback module:api/CampaignsChallengesApi~getChallengeEventUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChallengeEventResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a single challenge event details
     * @param {Number} id The challenge event id
     * @param {module:api/CampaignsChallengesApi~getChallengeEventUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChallengeEventResource}
     */
    this.getChallengeEventUsingGET = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling getChallengeEventUsingGET");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ChallengeEventResource;

      return this.apiClient.callApi(
        '/challenges/events/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChallengeEventssUsingGET operation.
     * @callback module:api/CampaignsChallengesApi~getChallengeEventssUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResourceChallengeEventResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of challenge events
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterStartDate A comma separated string without spaces.  First value is the operator to search on, second value is the event start date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE).
     * @param {String} opts.filterEndDate A comma separated string without spaces.  First value is the operator to search on, second value is the event end date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE).
     * @param {Boolean} opts.filterCampaigns check only for events from currently running campaigns
     * @param {Number} opts.filterChallenge check only for events from the challenge specified by id
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @param {module:api/CampaignsChallengesApi~getChallengeEventssUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResourceChallengeEventResource}
     */
    this.getChallengeEventssUsingGET = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter_start_date': opts['filterStartDate'],
        'filter_end_date': opts['filterEndDate'],
        'filter_campaigns': opts['filterCampaigns'],
        'filter_challenge': opts['filterChallenge'],
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PageResourceChallengeEventResource;

      return this.apiClient.callApi(
        '/challenges/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChallengeTemplateUsingGET operation.
     * @callback module:api/CampaignsChallengesApi~getChallengeTemplateUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TemplateResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single challenge template
     * @param {String} id The id of the template
     * @param {module:api/CampaignsChallengesApi~getChallengeTemplateUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TemplateResource}
     */
    this.getChallengeTemplateUsingGET = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling getChallengeTemplateUsingGET");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TemplateResource;

      return this.apiClient.callApi(
        '/challenges/templates/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChallengeTemplatesUsingGET operation.
     * @callback module:api/CampaignsChallengesApi~getChallengeTemplatesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResourceTemplateResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List and search challenge templates
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @param {module:api/CampaignsChallengesApi~getChallengeTemplatesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResourceTemplateResource}
     */
    this.getChallengeTemplatesUsingGET = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PageResourceTemplateResource;

      return this.apiClient.callApi(
        '/challenges/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChallengeUsingGET operation.
     * @callback module:api/CampaignsChallengesApi~getChallengeUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChallengeResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a single challenge details
     * @param {Number} id The challenge id
     * @param {module:api/CampaignsChallengesApi~getChallengeUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChallengeResource}
     */
    this.getChallengeUsingGET = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling getChallengeUsingGET");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ChallengeResource;

      return this.apiClient.callApi(
        '/challenges/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChallengesUsingGET1 operation.
     * @callback module:api/CampaignsChallengesApi~getChallengesUsingGET1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResourceChallengeResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of challenges
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.filterTemplate Filter for challenges that are not tied to campaigns (templates)
     * @param {Boolean} opts.filterActiveCampaign Filter for challenges that are tied to active campaigns
     * @param {module:api/CampaignsChallengesApi~getChallengesUsingGET1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResourceChallengeResource}
     */
    this.getChallengesUsingGET1 = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter_template': opts['filterTemplate'],
        'filter_active_campaign': opts['filterActiveCampaign']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PageResourceChallengeResource;

      return this.apiClient.callApi(
        '/challenges', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChallengeActivityUsingPUT operation.
     * @callback module:api/CampaignsChallengesApi~updateChallengeActivityUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a challenge activity
     * @param {Number} activityId The activity id
     * @param {Number} challengeId The challenge id
     * @param {Object} opts Optional parameters
     * @param {module:model/ChallengeActivityResource} opts.challengeActivityResource The challenge activity resource object
     * @param {module:api/CampaignsChallengesApi~updateChallengeActivityUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateChallengeActivityUsingPUT = function(activityId, challengeId, opts, callback) {
      opts = opts || {};
      var postBody = opts['challengeActivityResource'];

      // verify the required parameter 'activityId' is set
      if (activityId == undefined || activityId == null) {
        throw new Error("Missing the required parameter 'activityId' when calling updateChallengeActivityUsingPUT");
      }

      // verify the required parameter 'challengeId' is set
      if (challengeId == undefined || challengeId == null) {
        throw new Error("Missing the required parameter 'challengeId' when calling updateChallengeActivityUsingPUT");
      }


      var pathParams = {
        'activity_id': activityId,
        'challenge_id': challengeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/challenges/{challenge_id}/activities/{activity_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChallengeTemplateUsingPUT operation.
     * @callback module:api/CampaignsChallengesApi~updateChallengeTemplateUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a challenge template
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateResource} opts.challengeTemplateResource The challenge template resource object
     * @param {module:api/CampaignsChallengesApi~updateChallengeTemplateUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateChallengeTemplateUsingPUT = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['challengeTemplateResource'];

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling updateChallengeTemplateUsingPUT");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/challenges/templates/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChallengeUsingPUT operation.
     * @callback module:api/CampaignsChallengesApi~updateChallengeUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChallengeResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a challenge&#39;s information
     * If the challenge is a copy, changes will propagate to all the related challenges
     * @param {Number} id The challenge id
     * @param {Object} opts Optional parameters
     * @param {module:model/ChallengeResource} opts.challengeResource The challenge resource object
     * @param {module:api/CampaignsChallengesApi~updateChallengeUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChallengeResource}
     */
    this.updateChallengeUsingPUT = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['challengeResource'];

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling updateChallengeUsingPUT");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ChallengeResource;

      return this.apiClient.callApi(
        '/challenges/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
