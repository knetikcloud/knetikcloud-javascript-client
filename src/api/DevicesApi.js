/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeviceResource from '../model/DeviceResource';
import PageResourceDeviceResource from '../model/PageResourceDeviceResource';
import Result from '../model/Result';
import SimpleUserResource from '../model/SimpleUserResource';

/**
* Devices service.
* @module api/DevicesApi
* @version 3.0.7
*/
export default class DevicesApi {

    /**
    * Constructs a new DevicesApi. 
    * @alias module:api/DevicesApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add device users
     * @param {Array.<module:model/SimpleUserResource>} userResources userResources
     * @param {Number} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeviceResource} and HTTP response
     */
    addDeviceUsersWithHttpInfo(userResources, id) {
      let postBody = userResources;

      // verify the required parameter 'userResources' is set
      if (userResources === undefined || userResources === null) {
        throw new Error("Missing the required parameter 'userResources' when calling addDeviceUsers");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addDeviceUsers");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceResource;

      return this.apiClient.callApi(
        '/devices/{id}/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add device users
     * @param {Array.<module:model/SimpleUserResource>} userResources userResources
     * @param {Number} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeviceResource}
     */
    addDeviceUsers(userResources, id) {
      return this.addDeviceUsersWithHttpInfo(userResources, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a device
     * @param {module:model/DeviceResource} device device
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeviceResource} and HTTP response
     */
    createDeviceWithHttpInfo(device) {
      let postBody = device;

      // verify the required parameter 'device' is set
      if (device === undefined || device === null) {
        throw new Error("Missing the required parameter 'device' when calling createDevice");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceResource;

      return this.apiClient.callApi(
        '/devices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a device
     * @param {module:model/DeviceResource} device device
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeviceResource}
     */
    createDevice(device) {
      return this.createDeviceWithHttpInfo(device)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a device
     * @param {Number} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteDeviceWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteDevice");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/devices/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a device
     * @param {Number} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteDevice(id) {
      return this.deleteDeviceWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a device user
     * @param {Number} id The id of the device
     * @param {Number} userId The user id of the device user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteDeviceUserWithHttpInfo(id, userId) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteDeviceUser");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteDeviceUser");
      }


      let pathParams = {
        'id': id,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/devices/{id}/users/{user_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a device user
     * @param {Number} id The id of the device
     * @param {Number} userId The user id of the device user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteDeviceUser(id, userId) {
      return this.deleteDeviceUserWithHttpInfo(id, userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete all device users
     * @param {Number} id The id of the device
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterId Filter for device users to delete with a user id in a given comma separated list of ids
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteDeviceUsersWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteDeviceUsers");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter_id': opts['filterId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/devices/{id}/users', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete all device users
     * @param {Number} id The id of the device
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterId Filter for device users to delete with a user id in a given comma separated list of ids
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteDeviceUsers(id, opts) {
      return this.deleteDeviceUsersWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single device
     * @param {Number} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeviceResource} and HTTP response
     */
    getDeviceWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDevice");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceResource;

      return this.apiClient.callApi(
        '/devices/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single device
     * @param {Number} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeviceResource}
     */
    getDevice(id) {
      return this.getDeviceWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List and search devices
     * Get a list of devices with optional filtering
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterMake Filter for devices with specified make
     * @param {String} opts.filterModel Filter for devices with specified model
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceDeviceResource} and HTTP response
     */
    getDevicesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'filter_make': opts['filterMake'],
        'filter_model': opts['filterModel'],
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageResourceDeviceResource;

      return this.apiClient.callApi(
        '/devices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List and search devices
     * Get a list of devices with optional filtering
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterMake Filter for devices with specified make
     * @param {String} opts.filterModel Filter for devices with specified model
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceDeviceResource}
     */
    getDevices(opts) {
      return this.getDevicesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a device
     * @param {module:model/DeviceResource} device device
     * @param {Number} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeviceResource} and HTTP response
     */
    updateDeviceWithHttpInfo(device, id) {
      let postBody = device;

      // verify the required parameter 'device' is set
      if (device === undefined || device === null) {
        throw new Error("Missing the required parameter 'device' when calling updateDevice");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateDevice");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceResource;

      return this.apiClient.callApi(
        '/devices/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a device
     * @param {module:model/DeviceResource} device device
     * @param {Number} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeviceResource}
     */
    updateDevice(device, id) {
      return this.updateDeviceWithHttpInfo(device, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
