/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AchievementDefinitionResource from '../model/AchievementDefinitionResource';
import BreTriggerResource from '../model/BreTriggerResource';
import IntWrapper from '../model/IntWrapper';
import PageResourceAchievementDefinitionResource from '../model/PageResourceAchievementDefinitionResource';
import PageResourceTemplateResource from '../model/PageResourceTemplateResource';
import PageResourceUserAchievementGroupResource from '../model/PageResourceUserAchievementGroupResource';
import Result from '../model/Result';
import TemplateResource from '../model/TemplateResource';
import UserAchievementGroupResource from '../model/UserAchievementGroupResource';

/**
* GamificationAchievements service.
* @module api/GamificationAchievementsApi
* @version 3.0.7
*/
export default class GamificationAchievementsApi {

    /**
    * Constructs a new GamificationAchievementsApi. 
    * @alias module:api/GamificationAchievementsApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a new achievement definition
     * If the definition contains a trigger event name, a BRE rule is created, so that tracking logic is executed when the triggering event occurs. If no trigger event name is specified, the user&#39;s achievement status must manually be updated via the API.
     * @param {Object} opts Optional parameters
     * @param {module:model/AchievementDefinitionResource} opts.achievement The achievement definition
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AchievementDefinitionResource} and HTTP response
     */
    createAchievementWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['achievement'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AchievementDefinitionResource;

      return this.apiClient.callApi(
        '/achievements', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new achievement definition
     * If the definition contains a trigger event name, a BRE rule is created, so that tracking logic is executed when the triggering event occurs. If no trigger event name is specified, the user&#39;s achievement status must manually be updated via the API.
     * @param {Object} opts Optional parameters
     * @param {module:model/AchievementDefinitionResource} opts.achievement The achievement definition
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AchievementDefinitionResource}
     */
    createAchievement(opts) {
      return this.createAchievementWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create an achievement template
     * Achievement templates define a type of achievement and the properties they have
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateResource} opts.template The achievement template to be created
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateResource} and HTTP response
     */
    createAchievementTemplateWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['template'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TemplateResource;

      return this.apiClient.callApi(
        '/achievements/templates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create an achievement template
     * Achievement templates define a type of achievement and the properties they have
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateResource} opts.template The achievement template to be created
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateResource}
     */
    createAchievementTemplate(opts) {
      return this.createAchievementTemplateWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an achievement definition
     * Will also disable the associated generated rule, if any.
     * @param {String} name The name of the achievement
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteAchievementWithHttpInfo(name) {
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteAchievement");
      }


      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/achievements/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an achievement definition
     * Will also disable the associated generated rule, if any.
     * @param {String} name The name of the achievement
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteAchievement(name) {
      return this.deleteAchievementWithHttpInfo(name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an achievement template
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {String} opts.cascade The value needed to delete used templates
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteAchievementTemplateWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteAchievementTemplate");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'cascade': opts['cascade']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/achievements/templates/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an achievement template
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {String} opts.cascade The value needed to delete used templates
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteAchievementTemplate(id, opts) {
      return this.deleteAchievementTemplateWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single achievement definition
     * @param {String} name The name of the achievement
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AchievementDefinitionResource} and HTTP response
     */
    getAchievementWithHttpInfo(name) {
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getAchievement");
      }


      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AchievementDefinitionResource;

      return this.apiClient.callApi(
        '/achievements/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single achievement definition
     * @param {String} name The name of the achievement
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AchievementDefinitionResource}
     */
    getAchievement(name) {
      return this.getAchievementWithHttpInfo(name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single achievement template
     * @param {String} id The id of the template
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateResource} and HTTP response
     */
    getAchievementTemplateWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAchievementTemplate");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TemplateResource;

      return this.apiClient.callApi(
        '/achievements/templates/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single achievement template
     * @param {String} id The id of the template
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateResource}
     */
    getAchievementTemplate(id) {
      return this.getAchievementTemplateWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List and search achievement templates
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceTemplateResource} and HTTP response
     */
    getAchievementTemplatesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageResourceTemplateResource;

      return this.apiClient.callApi(
        '/achievements/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List and search achievement templates
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceTemplateResource}
     */
    getAchievementTemplates(opts) {
      return this.getAchievementTemplatesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the list of triggers that can be used to trigger an achievement progress update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/BreTriggerResource>} and HTTP response
     */
    getAchievementTriggersWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [BreTriggerResource];

      return this.apiClient.callApi(
        '/achievements/triggers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the list of triggers that can be used to trigger an achievement progress update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/BreTriggerResource>}
     */
    getAchievementTriggers() {
      return this.getAchievementTriggersWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all achievement definitions in the system
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterTagset Filter for achievements with specified tags (separated by comma)
     * @param {String} opts.filterName Filter for achievements whose name contains a string
     * @param {Boolean} opts.filterHidden Filter for achievements that are hidden or not
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to name:ASC)
     * @param {Boolean} opts.filterDerived Filter for achievements that are derived from other services (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceAchievementDefinitionResource} and HTTP response
     */
    getAchievementsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'filter_tagset': opts['filterTagset'],
        'filter_name': opts['filterName'],
        'filter_hidden': opts['filterHidden'],
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order'],
        'filter_derived': opts['filterDerived']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageResourceAchievementDefinitionResource;

      return this.apiClient.callApi(
        '/achievements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all achievement definitions in the system
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterTagset Filter for achievements with specified tags (separated by comma)
     * @param {String} opts.filterName Filter for achievements whose name contains a string
     * @param {Boolean} opts.filterHidden Filter for achievements that are hidden or not
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to name:ASC)
     * @param {Boolean} opts.filterDerived Filter for achievements that are derived from other services (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceAchievementDefinitionResource}
     */
    getAchievements(opts) {
      return this.getAchievementsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a list of derived achievements
     * Used by other services that depend on achievements
     * @param {String} name The name of the derived achievement
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/AchievementDefinitionResource>} and HTTP response
     */
    getDerivedAchievementsWithHttpInfo(name) {
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getDerivedAchievements");
      }


      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [AchievementDefinitionResource];

      return this.apiClient.callApi(
        '/achievements/derived/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a list of derived achievements
     * Used by other services that depend on achievements
     * @param {String} name The name of the derived achievement
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/AchievementDefinitionResource>}
     */
    getDerivedAchievements(name) {
      return this.getDerivedAchievementsWithHttpInfo(name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve progress on a given achievement for a given user
     * Assets will not be filled in on the resources returned. Use &#39;Get a single poll&#39; to retrieve the full resource with assets for a given item as needed.
     * @param {Number} userId The user&#39;s id
     * @param {String} achievementName The achievement&#39;s name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserAchievementGroupResource} and HTTP response
     */
    getUserAchievementProgressWithHttpInfo(userId, achievementName) {
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserAchievementProgress");
      }

      // verify the required parameter 'achievementName' is set
      if (achievementName === undefined || achievementName === null) {
        throw new Error("Missing the required parameter 'achievementName' when calling getUserAchievementProgress");
      }


      let pathParams = {
        'user_id': userId,
        'achievement_name': achievementName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserAchievementGroupResource;

      return this.apiClient.callApi(
        '/users/{user_id}/achievements/{achievement_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve progress on a given achievement for a given user
     * Assets will not be filled in on the resources returned. Use &#39;Get a single poll&#39; to retrieve the full resource with assets for a given item as needed.
     * @param {Number} userId The user&#39;s id
     * @param {String} achievementName The achievement&#39;s name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserAchievementGroupResource}
     */
    getUserAchievementProgress(userId, achievementName) {
      return this.getUserAchievementProgressWithHttpInfo(userId, achievementName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve progress on achievements for a given user
     * Assets will not be filled in on the resources returned. Use &#39;Get a single poll&#39; to retrieve the full resource with assets for a given item as needed.
     * @param {Number} userId The user&#39;s id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.filterAchievementDerived Filter for achievements that are derived from other services
     * @param {String} opts.filterAchievementTagset Filter for achievements with specified tags (separated by comma)
     * @param {String} opts.filterAchievementName Filter for achievements whose name contains a string
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceUserAchievementGroupResource} and HTTP response
     */
    getUserAchievementsProgressWithHttpInfo(userId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserAchievementsProgress");
      }


      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        'filter_achievement_derived': opts['filterAchievementDerived'],
        'filter_achievement_tagset': opts['filterAchievementTagset'],
        'filter_achievement_name': opts['filterAchievementName'],
        'size': opts['size'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageResourceUserAchievementGroupResource;

      return this.apiClient.callApi(
        '/users/{user_id}/achievements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve progress on achievements for a given user
     * Assets will not be filled in on the resources returned. Use &#39;Get a single poll&#39; to retrieve the full resource with assets for a given item as needed.
     * @param {Number} userId The user&#39;s id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.filterAchievementDerived Filter for achievements that are derived from other services
     * @param {String} opts.filterAchievementTagset Filter for achievements with specified tags (separated by comma)
     * @param {String} opts.filterAchievementName Filter for achievements whose name contains a string
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceUserAchievementGroupResource}
     */
    getUserAchievementsProgress(userId, opts) {
      return this.getUserAchievementsProgressWithHttpInfo(userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve progress on a given achievement for all users
     * Assets will not be filled in on the resources returned. Use &#39;Get single achievement progress for user&#39; to retrieve the full resource with assets for a given user as needed.
     * @param {String} achievementName The achievement&#39;s name
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.filterAchievementDerived Filter for achievements that are derived from other services
     * @param {String} opts.filterAchievementTagset Filter for achievements with specified tags (separated by comma)
     * @param {String} opts.filterAchievementName Filter for achievements whose name contains a string
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceUserAchievementGroupResource} and HTTP response
     */
    getUsersAchievementProgressWithHttpInfo(achievementName, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'achievementName' is set
      if (achievementName === undefined || achievementName === null) {
        throw new Error("Missing the required parameter 'achievementName' when calling getUsersAchievementProgress");
      }


      let pathParams = {
        'achievement_name': achievementName
      };
      let queryParams = {
        'filter_achievement_derived': opts['filterAchievementDerived'],
        'filter_achievement_tagset': opts['filterAchievementTagset'],
        'filter_achievement_name': opts['filterAchievementName'],
        'size': opts['size'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageResourceUserAchievementGroupResource;

      return this.apiClient.callApi(
        '/users/achievements/{achievement_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve progress on a given achievement for all users
     * Assets will not be filled in on the resources returned. Use &#39;Get single achievement progress for user&#39; to retrieve the full resource with assets for a given user as needed.
     * @param {String} achievementName The achievement&#39;s name
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.filterAchievementDerived Filter for achievements that are derived from other services
     * @param {String} opts.filterAchievementTagset Filter for achievements with specified tags (separated by comma)
     * @param {String} opts.filterAchievementName Filter for achievements whose name contains a string
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceUserAchievementGroupResource}
     */
    getUsersAchievementProgress(achievementName, opts) {
      return this.getUsersAchievementProgressWithHttpInfo(achievementName, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve progress on achievements for all users
     * Assets will not be filled in on the resources returned. Use &#39;Get single achievement progress for user&#39; to retrieve the full resource with assets for a given user as needed.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.filterAchievementDerived Filter for achievements that are derived from other services
     * @param {String} opts.filterAchievementTagset Filter for achievements with specified tags (separated by comma)
     * @param {String} opts.filterAchievementName Filter for achievements whose name contains a string
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceUserAchievementGroupResource} and HTTP response
     */
    getUsersAchievementsProgressWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'filter_achievement_derived': opts['filterAchievementDerived'],
        'filter_achievement_tagset': opts['filterAchievementTagset'],
        'filter_achievement_name': opts['filterAchievementName'],
        'size': opts['size'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageResourceUserAchievementGroupResource;

      return this.apiClient.callApi(
        '/users/achievements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve progress on achievements for all users
     * Assets will not be filled in on the resources returned. Use &#39;Get single achievement progress for user&#39; to retrieve the full resource with assets for a given user as needed.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.filterAchievementDerived Filter for achievements that are derived from other services
     * @param {String} opts.filterAchievementTagset Filter for achievements with specified tags (separated by comma)
     * @param {String} opts.filterAchievementName Filter for achievements whose name contains a string
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceUserAchievementGroupResource}
     */
    getUsersAchievementsProgress(opts) {
      return this.getUsersAchievementsProgressWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Increment an achievement progress record for a user
     * If no progress record yet exists for the user, it will be created. Otherwise it will be updated and the provided value added to the existing progress. May be negative. If progress meets or exceeds the achievement&#39;s max_value it will be marked as earned and a BRE event will be triggered for the &lt;code&gt;BreAchievementEarnedTrigger&lt;/code&gt;.
     * @param {Number} userId The user&#39;s id
     * @param {String} achievementName The achievement&#39;s name
     * @param {Object} opts Optional parameters
     * @param {module:model/IntWrapper} opts.progress The amount to add to the progress value
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserAchievementGroupResource} and HTTP response
     */
    incrementAchievementProgressWithHttpInfo(userId, achievementName, opts) {
      opts = opts || {};
      let postBody = opts['progress'];

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling incrementAchievementProgress");
      }

      // verify the required parameter 'achievementName' is set
      if (achievementName === undefined || achievementName === null) {
        throw new Error("Missing the required parameter 'achievementName' when calling incrementAchievementProgress");
      }


      let pathParams = {
        'user_id': userId,
        'achievement_name': achievementName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserAchievementGroupResource;

      return this.apiClient.callApi(
        '/users/{user_id}/achievements/{achievement_name}/progress', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Increment an achievement progress record for a user
     * If no progress record yet exists for the user, it will be created. Otherwise it will be updated and the provided value added to the existing progress. May be negative. If progress meets or exceeds the achievement&#39;s max_value it will be marked as earned and a BRE event will be triggered for the &lt;code&gt;BreAchievementEarnedTrigger&lt;/code&gt;.
     * @param {Number} userId The user&#39;s id
     * @param {String} achievementName The achievement&#39;s name
     * @param {Object} opts Optional parameters
     * @param {module:model/IntWrapper} opts.progress The amount to add to the progress value
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserAchievementGroupResource}
     */
    incrementAchievementProgress(userId, achievementName, opts) {
      return this.incrementAchievementProgressWithHttpInfo(userId, achievementName, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set an achievement progress record for a user
     * If no progress record yet exists for the user, it will be created. Otherwise it will be updated and progress set to the provided value. If progress meets or exceeds the achievement&#39;s max_value it will be marked as earned and a BRE event will be triggered for the &lt;code&gt;BreAchievementEarnedTrigger&lt;/code&gt;.
     * @param {Number} userId The user&#39;s id
     * @param {String} achievementName The achievement&#39;s name
     * @param {Object} opts Optional parameters
     * @param {module:model/IntWrapper} opts.progress The new progress value
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserAchievementGroupResource} and HTTP response
     */
    setAchievementProgressWithHttpInfo(userId, achievementName, opts) {
      opts = opts || {};
      let postBody = opts['progress'];

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling setAchievementProgress");
      }

      // verify the required parameter 'achievementName' is set
      if (achievementName === undefined || achievementName === null) {
        throw new Error("Missing the required parameter 'achievementName' when calling setAchievementProgress");
      }


      let pathParams = {
        'user_id': userId,
        'achievement_name': achievementName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserAchievementGroupResource;

      return this.apiClient.callApi(
        '/users/{user_id}/achievements/{achievement_name}/progress', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Set an achievement progress record for a user
     * If no progress record yet exists for the user, it will be created. Otherwise it will be updated and progress set to the provided value. If progress meets or exceeds the achievement&#39;s max_value it will be marked as earned and a BRE event will be triggered for the &lt;code&gt;BreAchievementEarnedTrigger&lt;/code&gt;.
     * @param {Number} userId The user&#39;s id
     * @param {String} achievementName The achievement&#39;s name
     * @param {Object} opts Optional parameters
     * @param {module:model/IntWrapper} opts.progress The new progress value
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserAchievementGroupResource}
     */
    setAchievementProgress(userId, achievementName, opts) {
      return this.setAchievementProgressWithHttpInfo(userId, achievementName, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an achievement definition
     * The existing generated rule, if any, will be deleted. A new rule will be created if a trigger event name is specified in the new version.
     * @param {String} name The name of the achievement
     * @param {Object} opts Optional parameters
     * @param {module:model/AchievementDefinitionResource} opts.achievement The achievement definition
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AchievementDefinitionResource} and HTTP response
     */
    updateAchievementWithHttpInfo(name, opts) {
      opts = opts || {};
      let postBody = opts['achievement'];

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling updateAchievement");
      }


      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AchievementDefinitionResource;

      return this.apiClient.callApi(
        '/achievements/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an achievement definition
     * The existing generated rule, if any, will be deleted. A new rule will be created if a trigger event name is specified in the new version.
     * @param {String} name The name of the achievement
     * @param {Object} opts Optional parameters
     * @param {module:model/AchievementDefinitionResource} opts.achievement The achievement definition
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AchievementDefinitionResource}
     */
    updateAchievement(name, opts) {
      return this.updateAchievementWithHttpInfo(name, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an achievement template
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateResource} opts.template The updated template
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateResource} and HTTP response
     */
    updateAchievementTemplateWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['template'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateAchievementTemplate");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TemplateResource;

      return this.apiClient.callApi(
        '/achievements/templates/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an achievement template
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateResource} opts.template The updated template
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateResource}
     */
    updateAchievementTemplate(id, opts) {
      return this.updateAchievementTemplateWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
