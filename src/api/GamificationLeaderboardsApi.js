/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LeaderboardEntryResource from '../model/LeaderboardEntryResource';
import LeaderboardResource from '../model/LeaderboardResource';
import Result from '../model/Result';

/**
* GamificationLeaderboards service.
* @module api/GamificationLeaderboardsApi
* @version 3.0.7
*/
export default class GamificationLeaderboardsApi {

    /**
    * Constructs a new GamificationLeaderboardsApi. 
    * @alias module:api/GamificationLeaderboardsApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Retrieves leaderboard details and paginated entries
     * The context type identifies the type of entity (i.e., &#39;activity&#39;) being tracked on the leaderboard. The context ID is the unique ID of the actual entity tracked by the leaderboard. Sorting is based on the fields of LeaderboardEntryResource rather than the returned LeaderboardResource.
     * @param {String} contextType The context type for the leaderboard
     * @param {String} contextId The context id for the leaderboard
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to score:DESC,updated:ASC,user_id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LeaderboardResource} and HTTP response
     */
    getLeaderboardWithHttpInfo(contextType, contextId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'contextType' is set
      if (contextType === undefined || contextType === null) {
        throw new Error("Missing the required parameter 'contextType' when calling getLeaderboard");
      }

      // verify the required parameter 'contextId' is set
      if (contextId === undefined || contextId === null) {
        throw new Error("Missing the required parameter 'contextId' when calling getLeaderboard");
      }


      let pathParams = {
        'context_type': contextType,
        'context_id': contextId
      };
      let queryParams = {
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LeaderboardResource;

      return this.apiClient.callApi(
        '/leaderboards/{context_type}/{context_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieves leaderboard details and paginated entries
     * The context type identifies the type of entity (i.e., &#39;activity&#39;) being tracked on the leaderboard. The context ID is the unique ID of the actual entity tracked by the leaderboard. Sorting is based on the fields of LeaderboardEntryResource rather than the returned LeaderboardResource.
     * @param {String} contextType The context type for the leaderboard
     * @param {String} contextId The context id for the leaderboard
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to score:DESC,updated:ASC,user_id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LeaderboardResource}
     */
    getLeaderboard(contextType, contextId, opts) {
      return this.getLeaderboardWithHttpInfo(contextType, contextId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves a specific user entry with rank
     * The context type identifies the type of entity (i.e., &#39;activity&#39;) being tracked on the leaderboard. The context ID is the unique ID of the actual entity tracked by the leaderboard
     * @param {String} contextType The context type for the leaderboard
     * @param {String} contextId The context id for the leaderboard
     * @param {String} id The id of a user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LeaderboardEntryResource} and HTTP response
     */
    getLeaderboardRankWithHttpInfo(contextType, contextId, id) {
      let postBody = null;

      // verify the required parameter 'contextType' is set
      if (contextType === undefined || contextType === null) {
        throw new Error("Missing the required parameter 'contextType' when calling getLeaderboardRank");
      }

      // verify the required parameter 'contextId' is set
      if (contextId === undefined || contextId === null) {
        throw new Error("Missing the required parameter 'contextId' when calling getLeaderboardRank");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLeaderboardRank");
      }


      let pathParams = {
        'context_type': contextType,
        'context_id': contextId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LeaderboardEntryResource;

      return this.apiClient.callApi(
        '/leaderboards/{context_type}/{context_id}/users/{id}/rank', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieves a specific user entry with rank
     * The context type identifies the type of entity (i.e., &#39;activity&#39;) being tracked on the leaderboard. The context ID is the unique ID of the actual entity tracked by the leaderboard
     * @param {String} contextType The context type for the leaderboard
     * @param {String} contextId The context id for the leaderboard
     * @param {String} id The id of a user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LeaderboardEntryResource}
     */
    getLeaderboardRank(contextType, contextId, id) {
      return this.getLeaderboardRankWithHttpInfo(contextType, contextId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a list of available leaderboard strategy names
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<'String'>} and HTTP response
     */
    getLeaderboardStrategiesWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ['String'];

      return this.apiClient.callApi(
        '/leaderboards/strategies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a list of available leaderboard strategy names
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<'String'>}
     */
    getLeaderboardStrategies() {
      return this.getLeaderboardStrategiesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
