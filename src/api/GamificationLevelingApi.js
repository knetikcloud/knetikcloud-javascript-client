/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BreTriggerResource', 'model/LevelingResource', 'model/PageResourceLevelingResource', 'model/PageResourceUserLevelingResource', 'model/UserLevelingResource'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BreTriggerResource'), require('../model/LevelingResource'), require('../model/PageResourceLevelingResource'), require('../model/PageResourceUserLevelingResource'), require('../model/UserLevelingResource'));
  } else {
    // Browser globals (root is window)
    if (!root.KnetikPlatformApiDocumentationLatest) {
      root.KnetikPlatformApiDocumentationLatest = {};
    }
    root.KnetikPlatformApiDocumentationLatest.GamificationLevelingApi = factory(root.KnetikPlatformApiDocumentationLatest.ApiClient, root.KnetikPlatformApiDocumentationLatest.BreTriggerResource, root.KnetikPlatformApiDocumentationLatest.LevelingResource, root.KnetikPlatformApiDocumentationLatest.PageResourceLevelingResource, root.KnetikPlatformApiDocumentationLatest.PageResourceUserLevelingResource, root.KnetikPlatformApiDocumentationLatest.UserLevelingResource);
  }
}(this, function(ApiClient, BreTriggerResource, LevelingResource, PageResourceLevelingResource, PageResourceUserLevelingResource, UserLevelingResource) {
  'use strict';

  /**
   * GamificationLeveling service.
   * @module api/GamificationLevelingApi
   * @version latest

   */

  /**
   * Constructs a new GamificationLevelingApi. 
   * @alias module:api/GamificationLevelingApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the changeUserLevelExperienceUsingPUT operation.
     * @callback module:api/GamificationLevelingApi~changeUserLevelExperienceUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update or create a leveling progress record for a user
     * If no progress record yet exists for the user, it will be created. Otherwise it will be updated. If progress meets or exceeds the level&#39;s max_value it will be marked as earned and a BRE event will be triggered for the &lt;code&gt;BreAchievementEarnedTrigger&lt;/code&gt;.
     * @param {Number} userId The id of the user
     * @param {String} name The level schema name
     * @param {Object} opts Optional parameters
     * @param {Number} opts.progress The current progress amount
     * @param {module:api/GamificationLevelingApi~changeUserLevelExperienceUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.changeUserLevelExperienceUsingPUT = function(userId, name, opts, callback) {
      opts = opts || {};
      var postBody = opts['progress'];

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw new Error("Missing the required parameter 'userId' when calling changeUserLevelExperienceUsingPUT");
      }

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw new Error("Missing the required parameter 'name' when calling changeUserLevelExperienceUsingPUT");
      }


      var pathParams = {
        'user_id': userId,
        'name': name
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['knetik_oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/leveling/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createLevelUsingPOST operation.
     * @callback module:api/GamificationLevelingApi~createLevelUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LevelingResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a level schema
     * @param {Object} opts Optional parameters
     * @param {module:model/LevelingResource} opts.level The level schema definition
     * @param {module:api/GamificationLevelingApi~createLevelUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LevelingResource}
     */
    this.createLevelUsingPOST = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['level'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['knetik_oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LevelingResource;

      return this.apiClient.callApi(
        '/leveling', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLevelUsingDELETE operation.
     * @callback module:api/GamificationLevelingApi~deleteLevelUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a level
     * @param {String} name The level schema name
     * @param {module:api/GamificationLevelingApi~deleteLevelUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteLevelUsingDELETE = function(name, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw new Error("Missing the required parameter 'name' when calling deleteLevelUsingDELETE");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['knetik_oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/leveling/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAvailableTriggersUsingGET1 operation.
     * @callback module:api/GamificationLevelingApi~getAvailableTriggersUsingGET1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BreTriggerResource>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of triggers that can be used to trigger a leveling progress update
     * @param {module:api/GamificationLevelingApi~getAvailableTriggersUsingGET1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BreTriggerResource>}
     */
    this.getAvailableTriggersUsingGET1 = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['knetik_oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [BreTriggerResource];

      return this.apiClient.callApi(
        '/leveling/triggers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLevelUsingGET operation.
     * @callback module:api/GamificationLevelingApi~getLevelUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LevelingResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a particular level
     * @param {String} name The level schema name
     * @param {module:api/GamificationLevelingApi~getLevelUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LevelingResource}
     */
    this.getLevelUsingGET = function(name, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw new Error("Missing the required parameter 'name' when calling getLevelUsingGET");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['knetik_oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LevelingResource;

      return this.apiClient.callApi(
        '/leveling/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLevelsUsingGET operation.
     * @callback module:api/GamificationLevelingApi~getLevelsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResourceLevelingResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List and search levels
     * Get a list of levels schemas with optional filtering
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterName Filter for level schemas whose name contains a given string
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to name:ASC)
     * @param {module:api/GamificationLevelingApi~getLevelsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResourceLevelingResource}
     */
    this.getLevelsUsingGET = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter_name': opts['filterName'],
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['knetik_oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PageResourceLevelingResource;

      return this.apiClient.callApi(
        '/leveling', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserLevelUsingGET operation.
     * @callback module:api/GamificationLevelingApi~getUserLevelUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserLevelingResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user&#39;s progress for a given level schema
     * @param {Number} userId The id of the user
     * @param {String} name The level schema name
     * @param {module:api/GamificationLevelingApi~getUserLevelUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserLevelingResource}
     */
    this.getUserLevelUsingGET = function(userId, name, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserLevelUsingGET");
      }

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw new Error("Missing the required parameter 'name' when calling getUserLevelUsingGET");
      }


      var pathParams = {
        'user_id': userId,
        'name': name
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['knetik_oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserLevelingResource;

      return this.apiClient.callApi(
        '/users/{user_id}/leveling/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserLevelsUsingGET operation.
     * @callback module:api/GamificationLevelingApi~getUserLevelsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResourceUserLevelingResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user&#39;s progress for all level schemas
     * @param {Number} userId The id of the user
     * @param {module:api/GamificationLevelingApi~getUserLevelsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResourceUserLevelingResource}
     */
    this.getUserLevelsUsingGET = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserLevelsUsingGET");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['knetik_oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PageResourceUserLevelingResource;

      return this.apiClient.callApi(
        '/users/{user_id}/leveling', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLevelUsingPUT operation.
     * @callback module:api/GamificationLevelingApi~updateLevelUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a level
     * @param {String} name The level schema name
     * @param {Object} opts Optional parameters
     * @param {module:model/LevelingResource} opts.newLevel The level schema definition
     * @param {module:api/GamificationLevelingApi~updateLevelUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateLevelUsingPUT = function(name, opts, callback) {
      opts = opts || {};
      var postBody = opts['newLevel'];

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw new Error("Missing the required parameter 'name' when calling updateLevelUsingPUT");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['knetik_oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/leveling/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
