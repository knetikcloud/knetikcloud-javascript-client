/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AnswerResource from '../model/AnswerResource';
import Collectionstring from '../model/Collectionstring';
import DeltaResource from '../model/DeltaResource';
import ImportJobResource from '../model/ImportJobResource';
import PageResourceImportJobResource from '../model/PageResourceImportJobResource';
import PageResourceQuestionResource from '../model/PageResourceQuestionResource';
import PageResourceQuestionTemplateResource from '../model/PageResourceQuestionTemplateResource';
import QuestionResource from '../model/QuestionResource';
import QuestionTemplateResource from '../model/QuestionTemplateResource';
import Result from '../model/Result';
import StringWrapper from '../model/StringWrapper';

/**
* GamificationTrivia service.
* @module api/GamificationTriviaApi
* @version 3.0.7
*/
export default class GamificationTriviaApi {

    /**
    * Constructs a new GamificationTriviaApi. 
    * @alias module:api/GamificationTriviaApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add an answer to a question
     * @param {String} questionId The id of the question
     * @param {Object} opts Optional parameters
     * @param {module:model/AnswerResource} opts.answer The new answer
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AnswerResource} and HTTP response
     */
    addQuestionAnswersWithHttpInfo(questionId, opts) {
      opts = opts || {};
      let postBody = opts['answer'];

      // verify the required parameter 'questionId' is set
      if (questionId === undefined || questionId === null) {
        throw new Error("Missing the required parameter 'questionId' when calling addQuestionAnswers");
      }


      let pathParams = {
        'question_id': questionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AnswerResource;

      return this.apiClient.callApi(
        '/trivia/questions/{question_id}/answers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add an answer to a question
     * @param {String} questionId The id of the question
     * @param {Object} opts Optional parameters
     * @param {module:model/AnswerResource} opts.answer The new answer
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AnswerResource}
     */
    addQuestionAnswers(questionId, opts) {
      return this.addQuestionAnswersWithHttpInfo(questionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add a tag to a question
     * @param {String} id The id of the question
     * @param {Object} opts Optional parameters
     * @param {module:model/StringWrapper} opts.tag The new tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addQuestionTagWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['tag'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addQuestionTag");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/trivia/questions/{id}/tags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add a tag to a question
     * @param {String} id The id of the question
     * @param {Object} opts Optional parameters
     * @param {module:model/StringWrapper} opts.tag The new tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addQuestionTag(id, opts) {
      return this.addQuestionTagWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add a tag to a batch of questions
     * All questions that dont&#39;t have the tag and match filters will have it added. The returned number is the number of questions updated.
     * @param {Object} opts Optional parameters
     * @param {module:model/StringWrapper} opts.tag The tag to add
     * @param {String} opts.filterSearch Filter for documents whose question, answers or tags contains provided string
     * @param {String} opts.filterIdset Filter for documents whose id is in the comma separated list provided
     * @param {String} opts.filterCategory Filter for questions with specified category, by id
     * @param {String} opts.filterTag Filter for questions with specified tag
     * @param {String} opts.filterTagset Filter for questions with specified tags (separated by comma)
     * @param {module:model/String} opts.filterType Filter for questions with specified type
     * @param {Boolean} opts.filterPublished Filter for questions currenctly published or not
     * @param {Number} opts.filterImportId Filter for questions from a specific import job
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'Number'} and HTTP response
     */
    addTagToQuestionsBatchWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['tag'];


      let pathParams = {
      };
      let queryParams = {
        'filter_search': opts['filterSearch'],
        'filter_idset': opts['filterIdset'],
        'filter_category': opts['filterCategory'],
        'filter_tag': opts['filterTag'],
        'filter_tagset': opts['filterTagset'],
        'filter_type': opts['filterType'],
        'filter_published': opts['filterPublished'],
        'filter_import_id': opts['filterImportId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Number';

      return this.apiClient.callApi(
        '/trivia/questions/tags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add a tag to a batch of questions
     * All questions that dont&#39;t have the tag and match filters will have it added. The returned number is the number of questions updated.
     * @param {Object} opts Optional parameters
     * @param {module:model/StringWrapper} opts.tag The tag to add
     * @param {String} opts.filterSearch Filter for documents whose question, answers or tags contains provided string
     * @param {String} opts.filterIdset Filter for documents whose id is in the comma separated list provided
     * @param {String} opts.filterCategory Filter for questions with specified category, by id
     * @param {String} opts.filterTag Filter for questions with specified tag
     * @param {String} opts.filterTagset Filter for questions with specified tags (separated by comma)
     * @param {module:model/String} opts.filterType Filter for questions with specified type
     * @param {Boolean} opts.filterPublished Filter for questions currenctly published or not
     * @param {Number} opts.filterImportId Filter for questions from a specific import job
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'Number'}
     */
    addTagToQuestionsBatch(opts) {
      return this.addTagToQuestionsBatchWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create an import job
     * Set up a job to import a set of trivia questions from a cvs file at a remote url. the file will be validated asynchronously but will not be processed until started manually with the process endpoint.
     * @param {Object} opts Optional parameters
     * @param {module:model/ImportJobResource} opts.request The new import job
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ImportJobResource} and HTTP response
     */
    createImportJobWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['request'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImportJobResource;

      return this.apiClient.callApi(
        '/trivia/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create an import job
     * Set up a job to import a set of trivia questions from a cvs file at a remote url. the file will be validated asynchronously but will not be processed until started manually with the process endpoint.
     * @param {Object} opts Optional parameters
     * @param {module:model/ImportJobResource} opts.request The new import job
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ImportJobResource}
     */
    createImportJob(opts) {
      return this.createImportJobWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a question
     * @param {Object} opts Optional parameters
     * @param {module:model/QuestionResource} opts.question The new question
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/QuestionResource} and HTTP response
     */
    createQuestionWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['question'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = QuestionResource;

      return this.apiClient.callApi(
        '/trivia/questions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a question
     * @param {Object} opts Optional parameters
     * @param {module:model/QuestionResource} opts.question The new question
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/QuestionResource}
     */
    createQuestion(opts) {
      return this.createQuestionWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a question template
     * Question templates define a type of question and the properties they have
     * @param {Object} opts Optional parameters
     * @param {module:model/QuestionTemplateResource} opts.questionTemplateResource The question template resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/QuestionTemplateResource} and HTTP response
     */
    createQuestionTemplateWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['questionTemplateResource'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = QuestionTemplateResource;

      return this.apiClient.callApi(
        '/trivia/questions/templates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a question template
     * Question templates define a type of question and the properties they have
     * @param {Object} opts Optional parameters
     * @param {module:model/QuestionTemplateResource} opts.questionTemplateResource The question template resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/QuestionTemplateResource}
     */
    createQuestionTemplate(opts) {
      return this.createQuestionTemplateWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an import job
     * Also deletes all questions that were imported by it
     * @param {Number} id The id of the job
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteImportJobWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteImportJob");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/trivia/import/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an import job
     * Also deletes all questions that were imported by it
     * @param {Number} id The id of the job
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteImportJob(id) {
      return this.deleteImportJobWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a question
     * @param {String} id The id of the question
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteQuestionWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteQuestion");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/trivia/questions/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a question
     * @param {String} id The id of the question
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteQuestion(id) {
      return this.deleteQuestionWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove an answer from a question
     * @param {String} questionId The id of the question
     * @param {String} id The id of the answer
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteQuestionAnswersWithHttpInfo(questionId, id) {
      let postBody = null;

      // verify the required parameter 'questionId' is set
      if (questionId === undefined || questionId === null) {
        throw new Error("Missing the required parameter 'questionId' when calling deleteQuestionAnswers");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteQuestionAnswers");
      }


      let pathParams = {
        'question_id': questionId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/trivia/questions/{question_id}/answers/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove an answer from a question
     * @param {String} questionId The id of the question
     * @param {String} id The id of the answer
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteQuestionAnswers(questionId, id) {
      return this.deleteQuestionAnswersWithHttpInfo(questionId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a question template
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {String} opts.cascade The value needed to delete used templates
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteQuestionTemplateWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteQuestionTemplate");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'cascade': opts['cascade']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/trivia/questions/templates/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a question template
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {String} opts.cascade The value needed to delete used templates
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteQuestionTemplate(id, opts) {
      return this.deleteQuestionTemplateWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get an import job
     * @param {Number} id The id of the job
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ImportJobResource} and HTTP response
     */
    getImportJobWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getImportJob");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImportJobResource;

      return this.apiClient.callApi(
        '/trivia/import/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get an import job
     * @param {Number} id The id of the job
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ImportJobResource}
     */
    getImportJob(id) {
      return this.getImportJobWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a list of import job
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterVendor Filter for jobs by vendor id
     * @param {String} opts.filterCategory Filter for jobs by category id
     * @param {String} opts.filterName Filter for jobs which name *STARTS* with the given string
     * @param {String} opts.filterStatus Filter for jobs that are in a specific set of statuses (comma separated)
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceImportJobResource} and HTTP response
     */
    getImportJobsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'filter_vendor': opts['filterVendor'],
        'filter_category': opts['filterCategory'],
        'filter_name': opts['filterName'],
        'filter_status': opts['filterStatus'],
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageResourceImportJobResource;

      return this.apiClient.callApi(
        '/trivia/import', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a list of import job
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterVendor Filter for jobs by vendor id
     * @param {String} opts.filterCategory Filter for jobs by category id
     * @param {String} opts.filterName Filter for jobs which name *STARTS* with the given string
     * @param {String} opts.filterStatus Filter for jobs that are in a specific set of statuses (comma separated)
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceImportJobResource}
     */
    getImportJobs(opts) {
      return this.getImportJobsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single question
     * @param {String} id The id of the question
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/QuestionResource} and HTTP response
     */
    getQuestionWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getQuestion");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = QuestionResource;

      return this.apiClient.callApi(
        '/trivia/questions/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single question
     * @param {String} id The id of the question
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/QuestionResource}
     */
    getQuestion(id) {
      return this.getQuestionWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get an answer for a question
     * @param {String} questionId The id of the question
     * @param {String} id The id of the answer
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AnswerResource} and HTTP response
     */
    getQuestionAnswerWithHttpInfo(questionId, id) {
      let postBody = null;

      // verify the required parameter 'questionId' is set
      if (questionId === undefined || questionId === null) {
        throw new Error("Missing the required parameter 'questionId' when calling getQuestionAnswer");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getQuestionAnswer");
      }


      let pathParams = {
        'question_id': questionId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AnswerResource;

      return this.apiClient.callApi(
        '/trivia/questions/{question_id}/answers/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get an answer for a question
     * @param {String} questionId The id of the question
     * @param {String} id The id of the answer
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AnswerResource}
     */
    getQuestionAnswer(questionId, id) {
      return this.getQuestionAnswerWithHttpInfo(questionId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List the answers available for a question
     * @param {String} questionId The id of the question
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/AnswerResource>} and HTTP response
     */
    getQuestionAnswersWithHttpInfo(questionId) {
      let postBody = null;

      // verify the required parameter 'questionId' is set
      if (questionId === undefined || questionId === null) {
        throw new Error("Missing the required parameter 'questionId' when calling getQuestionAnswers");
      }


      let pathParams = {
        'question_id': questionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [AnswerResource];

      return this.apiClient.callApi(
        '/trivia/questions/{question_id}/answers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List the answers available for a question
     * @param {String} questionId The id of the question
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/AnswerResource>}
     */
    getQuestionAnswers(questionId) {
      return this.getQuestionAnswersWithHttpInfo(questionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List question deltas in ascending order of updated date
     * The &#39;since&#39; parameter is important to avoid getting a full list of all questions. Implementors should make sure they pass the updated date of the last resource loaded, not the date of the last request, in order to avoid gaps
     * @param {Object} opts Optional parameters
     * @param {Number} opts.since Timestamp in seconds
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/DeltaResource>} and HTTP response
     */
    getQuestionDeltasWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'since': opts['since']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [DeltaResource];

      return this.apiClient.callApi(
        '/trivia/questions/delta', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List question deltas in ascending order of updated date
     * The &#39;since&#39; parameter is important to avoid getting a full list of all questions. Implementors should make sure they pass the updated date of the last resource loaded, not the date of the last request, in order to avoid gaps
     * @param {Object} opts Optional parameters
     * @param {Number} opts.since Timestamp in seconds
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/DeltaResource>}
     */
    getQuestionDeltas(opts) {
      return this.getQuestionDeltasWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List the tags for a question
     * @param {String} id The id of the question
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<'String'>} and HTTP response
     */
    getQuestionTagsWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getQuestionTags");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ['String'];

      return this.apiClient.callApi(
        '/trivia/questions/{id}/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List the tags for a question
     * @param {String} id The id of the question
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<'String'>}
     */
    getQuestionTags(id) {
      return this.getQuestionTagsWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single question template
     * @param {String} id The id of the template
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/QuestionTemplateResource} and HTTP response
     */
    getQuestionTemplateWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getQuestionTemplate");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = QuestionTemplateResource;

      return this.apiClient.callApi(
        '/trivia/questions/templates/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single question template
     * @param {String} id The id of the template
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/QuestionTemplateResource}
     */
    getQuestionTemplate(id) {
      return this.getQuestionTemplateWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List and search question templates
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceQuestionTemplateResource} and HTTP response
     */
    getQuestionTemplatesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageResourceQuestionTemplateResource;

      return this.apiClient.callApi(
        '/trivia/questions/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List and search question templates
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceQuestionTemplateResource}
     */
    getQuestionTemplates(opts) {
      return this.getQuestionTemplatesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List and search questions
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @param {String} opts.filterSearch Filter for documents whose question, answers or tags contains provided string
     * @param {String} opts.filterIdset Filter for documents whose id is in the comma separated list provided
     * @param {String} opts.filterCategory Filter for questions with specified category, by id
     * @param {String} opts.filterTagset Filter for questions with specified tags (separated by comma)
     * @param {String} opts.filterTag Filter for questions with specified tag
     * @param {String} opts.filterType Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;)
     * @param {Boolean} opts.filterPublished Filter for questions currenctly published or not
     * @param {Number} opts.filterImportId Filter for questions from a specific import job
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceQuestionResource} and HTTP response
     */
    getQuestionsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order'],
        'filter_search': opts['filterSearch'],
        'filter_idset': opts['filterIdset'],
        'filter_category': opts['filterCategory'],
        'filter_tagset': opts['filterTagset'],
        'filter_tag': opts['filterTag'],
        'filter_type': opts['filterType'],
        'filter_published': opts['filterPublished'],
        'filter_import_id': opts['filterImportId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageResourceQuestionResource;

      return this.apiClient.callApi(
        '/trivia/questions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List and search questions
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @param {String} opts.filterSearch Filter for documents whose question, answers or tags contains provided string
     * @param {String} opts.filterIdset Filter for documents whose id is in the comma separated list provided
     * @param {String} opts.filterCategory Filter for questions with specified category, by id
     * @param {String} opts.filterTagset Filter for questions with specified tags (separated by comma)
     * @param {String} opts.filterTag Filter for questions with specified tag
     * @param {String} opts.filterType Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;)
     * @param {Boolean} opts.filterPublished Filter for questions currenctly published or not
     * @param {Number} opts.filterImportId Filter for questions from a specific import job
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceQuestionResource}
     */
    getQuestions(opts) {
      return this.getQuestionsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Count questions based on filters
     * This is also provided by the list endpoint so you don&#39;t need to call this for pagination purposes
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterSearch Filter for documents whose question, answers or tags contains provided string
     * @param {String} opts.filterIdset Filter for documents whose id is in the comma separated list provided
     * @param {String} opts.filterCategory Filter for questions with specified category, by id
     * @param {String} opts.filterTag Filter for questions with specified tag
     * @param {String} opts.filterTagset Filter for questions with specified tags (separated by comma)
     * @param {String} opts.filterType Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;)
     * @param {Boolean} opts.filterPublished Filter for questions currenctly published or not
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'Number'} and HTTP response
     */
    getQuestionsCountWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'filter_search': opts['filterSearch'],
        'filter_idset': opts['filterIdset'],
        'filter_category': opts['filterCategory'],
        'filter_tag': opts['filterTag'],
        'filter_tagset': opts['filterTagset'],
        'filter_type': opts['filterType'],
        'filter_published': opts['filterPublished']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Number';

      return this.apiClient.callApi(
        '/trivia/questions/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Count questions based on filters
     * This is also provided by the list endpoint so you don&#39;t need to call this for pagination purposes
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterSearch Filter for documents whose question, answers or tags contains provided string
     * @param {String} opts.filterIdset Filter for documents whose id is in the comma separated list provided
     * @param {String} opts.filterCategory Filter for questions with specified category, by id
     * @param {String} opts.filterTag Filter for questions with specified tag
     * @param {String} opts.filterTagset Filter for questions with specified tags (separated by comma)
     * @param {String} opts.filterType Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;)
     * @param {Boolean} opts.filterPublished Filter for questions currenctly published or not
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'Number'}
     */
    getQuestionsCount(opts) {
      return this.getQuestionsCountWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Start processing an import job
     * Will process the CSV file and add new questions asynchronously. The status of the job must be &#39;VALID&#39;.
     * @param {Number} id The id of the job
     * @param {Boolean} publishNow Whether the new questions should be published live immediately
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ImportJobResource} and HTTP response
     */
    processImportJobWithHttpInfo(id, publishNow) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling processImportJob");
      }

      // verify the required parameter 'publishNow' is set
      if (publishNow === undefined || publishNow === null) {
        throw new Error("Missing the required parameter 'publishNow' when calling processImportJob");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'publish_now': publishNow
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImportJobResource;

      return this.apiClient.callApi(
        '/trivia/import/{id}/process', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Start processing an import job
     * Will process the CSV file and add new questions asynchronously. The status of the job must be &#39;VALID&#39;.
     * @param {Number} id The id of the job
     * @param {Boolean} publishNow Whether the new questions should be published live immediately
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ImportJobResource}
     */
    processImportJob(id, publishNow) {
      return this.processImportJobWithHttpInfo(id, publishNow)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a tag from a question
     * @param {String} id The id of the question
     * @param {String} tag The tag to remove
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeQuestionTagWithHttpInfo(id, tag) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeQuestionTag");
      }

      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling removeQuestionTag");
      }


      let pathParams = {
        'id': id,
        'tag': tag
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/trivia/questions/{id}/tags/{tag}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove a tag from a question
     * @param {String} id The id of the question
     * @param {String} tag The tag to remove
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeQuestionTag(id, tag) {
      return this.removeQuestionTagWithHttpInfo(id, tag)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a tag from a batch of questions
     * ll questions that have the tag and match filters will have it removed. The returned number is the number of questions updated.
     * @param {String} tag The tag to remove
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterSearch Filter for documents whose question, answers or tags contains provided string
     * @param {String} opts.filterIdset Filter for documents whose id is in the comma separated list provided
     * @param {String} opts.filterCategory Filter for questions with specified category, by id
     * @param {String} opts.filterTag Filter for questions with specified tag
     * @param {String} opts.filterTagset Filter for questions with specified tags (separated by comma)
     * @param {String} opts.filterType Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;)
     * @param {Boolean} opts.filterPublished Filter for questions currenctly published or not
     * @param {Number} opts.filterImportId Filter for questions from a specific import job
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'Number'} and HTTP response
     */
    removeTagToQuestionsBatchWithHttpInfo(tag, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling removeTagToQuestionsBatch");
      }


      let pathParams = {
        'tag': tag
      };
      let queryParams = {
        'filter_search': opts['filterSearch'],
        'filter_idset': opts['filterIdset'],
        'filter_category': opts['filterCategory'],
        'filter_tag': opts['filterTag'],
        'filter_tagset': opts['filterTagset'],
        'filter_type': opts['filterType'],
        'filter_published': opts['filterPublished'],
        'filter_import_id': opts['filterImportId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Number';

      return this.apiClient.callApi(
        '/trivia/questions/tags/{tag}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove a tag from a batch of questions
     * ll questions that have the tag and match filters will have it removed. The returned number is the number of questions updated.
     * @param {String} tag The tag to remove
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterSearch Filter for documents whose question, answers or tags contains provided string
     * @param {String} opts.filterIdset Filter for documents whose id is in the comma separated list provided
     * @param {String} opts.filterCategory Filter for questions with specified category, by id
     * @param {String} opts.filterTag Filter for questions with specified tag
     * @param {String} opts.filterTagset Filter for questions with specified tags (separated by comma)
     * @param {String} opts.filterType Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;)
     * @param {Boolean} opts.filterPublished Filter for questions currenctly published or not
     * @param {Number} opts.filterImportId Filter for questions from a specific import job
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'Number'}
     */
    removeTagToQuestionsBatch(tag, opts) {
      return this.removeTagToQuestionsBatchWithHttpInfo(tag, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List and search tags by the beginning of the string
     * For performance reasons, search &amp; category filters are mutually exclusive. If category is specified, search filter will be ignored in order to do fast matches for typeahead.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterSearch Filter for tags starting with the given text
     * @param {String} opts.filterCategory Filter for tags on questions from a specific category
     * @param {Number} opts.filterImportId Filter for tags on questions from a specific import job
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Collectionstring} and HTTP response
     */
    searchQuestionTagsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'filter_search': opts['filterSearch'],
        'filter_category': opts['filterCategory'],
        'filter_import_id': opts['filterImportId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Collectionstring;

      return this.apiClient.callApi(
        '/trivia/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List and search tags by the beginning of the string
     * For performance reasons, search &amp; category filters are mutually exclusive. If category is specified, search filter will be ignored in order to do fast matches for typeahead.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterSearch Filter for tags starting with the given text
     * @param {String} opts.filterCategory Filter for tags on questions from a specific category
     * @param {Number} opts.filterImportId Filter for tags on questions from a specific import job
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Collectionstring}
     */
    searchQuestionTags(opts) {
      return this.searchQuestionTagsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an import job
     * Changes should be made before process is started for there to be any effect.
     * @param {Number} id The id of the job
     * @param {Object} opts Optional parameters
     * @param {module:model/ImportJobResource} opts.request The updated job
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ImportJobResource} and HTTP response
     */
    updateImportJobWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['request'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateImportJob");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImportJobResource;

      return this.apiClient.callApi(
        '/trivia/import/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an import job
     * Changes should be made before process is started for there to be any effect.
     * @param {Number} id The id of the job
     * @param {Object} opts Optional parameters
     * @param {module:model/ImportJobResource} opts.request The updated job
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ImportJobResource}
     */
    updateImportJob(id, opts) {
      return this.updateImportJobWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a question
     * @param {String} id The id of the question
     * @param {Object} opts Optional parameters
     * @param {module:model/QuestionResource} opts.question The updated question
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/QuestionResource} and HTTP response
     */
    updateQuestionWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['question'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateQuestion");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = QuestionResource;

      return this.apiClient.callApi(
        '/trivia/questions/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a question
     * @param {String} id The id of the question
     * @param {Object} opts Optional parameters
     * @param {module:model/QuestionResource} opts.question The updated question
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/QuestionResource}
     */
    updateQuestion(id, opts) {
      return this.updateQuestionWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an answer for a question
     * @param {String} questionId The id of the question
     * @param {String} id The id of the answer
     * @param {Object} opts Optional parameters
     * @param {module:model/AnswerResource} opts.answer The updated answer
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateQuestionAnswerWithHttpInfo(questionId, id, opts) {
      opts = opts || {};
      let postBody = opts['answer'];

      // verify the required parameter 'questionId' is set
      if (questionId === undefined || questionId === null) {
        throw new Error("Missing the required parameter 'questionId' when calling updateQuestionAnswer");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateQuestionAnswer");
      }


      let pathParams = {
        'question_id': questionId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/trivia/questions/{question_id}/answers/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an answer for a question
     * @param {String} questionId The id of the question
     * @param {String} id The id of the answer
     * @param {Object} opts Optional parameters
     * @param {module:model/AnswerResource} opts.answer The updated answer
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateQuestionAnswer(questionId, id, opts) {
      return this.updateQuestionAnswerWithHttpInfo(questionId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a question template
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {module:model/QuestionTemplateResource} opts.questionTemplateResource The question template resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/QuestionTemplateResource} and HTTP response
     */
    updateQuestionTemplateWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['questionTemplateResource'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateQuestionTemplate");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = QuestionTemplateResource;

      return this.apiClient.callApi(
        '/trivia/questions/templates/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a question template
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {module:model/QuestionTemplateResource} opts.questionTemplateResource The question template resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/QuestionTemplateResource}
     */
    updateQuestionTemplate(id, opts) {
      return this.updateQuestionTemplateWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Bulk update questions
     * Will update all questions that match filters used (or all questions in system if no filters used). Body should match a question resource with only those properties you wish to set. Null values will be ignored. Returned number is how many were updated.
     * @param {Object} opts Optional parameters
     * @param {module:model/QuestionResource} opts.question New values for a set of question fields
     * @param {String} opts.filterSearch Filter for documents whose question, answers or tags contains provided string
     * @param {String} opts.filterIdset Filter for documents whose id is in the comma separated list provided
     * @param {String} opts.filterCategory Filter for questions with specified category, by id
     * @param {String} opts.filterTagset Filter for questions with specified tags (separated by comma)
     * @param {String} opts.filterType Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;)
     * @param {Boolean} opts.filterPublished Filter for questions currenctly published or not
     * @param {Number} opts.filterImportId Filter for questions from a specific import job
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'Number'} and HTTP response
     */
    updateQuestionsInBulkWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['question'];


      let pathParams = {
      };
      let queryParams = {
        'filter_search': opts['filterSearch'],
        'filter_idset': opts['filterIdset'],
        'filter_category': opts['filterCategory'],
        'filter_tagset': opts['filterTagset'],
        'filter_type': opts['filterType'],
        'filter_published': opts['filterPublished'],
        'filter_import_id': opts['filterImportId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Number';

      return this.apiClient.callApi(
        '/trivia/questions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Bulk update questions
     * Will update all questions that match filters used (or all questions in system if no filters used). Body should match a question resource with only those properties you wish to set. Null values will be ignored. Returned number is how many were updated.
     * @param {Object} opts Optional parameters
     * @param {module:model/QuestionResource} opts.question New values for a set of question fields
     * @param {String} opts.filterSearch Filter for documents whose question, answers or tags contains provided string
     * @param {String} opts.filterIdset Filter for documents whose id is in the comma separated list provided
     * @param {String} opts.filterCategory Filter for questions with specified category, by id
     * @param {String} opts.filterTagset Filter for questions with specified tags (separated by comma)
     * @param {String} opts.filterType Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;)
     * @param {Boolean} opts.filterPublished Filter for questions currenctly published or not
     * @param {Number} opts.filterImportId Filter for questions from a specific import job
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'Number'}
     */
    updateQuestionsInBulk(opts) {
      return this.updateQuestionsInBulkWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
