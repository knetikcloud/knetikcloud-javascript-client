/**
 * Knetik Platform API Documentation Latest
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AnswerResource', 'model/Collectionstring', 'model/DeltaResource', 'model/ImportJobResource', 'model/PageImportJobResource', 'model/PageQuestionResource', 'model/PageQuestionTemplateResource', 'model/QuestionResource', 'model/QuestionTemplateResource'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AnswerResource'), require('../model/Collectionstring'), require('../model/DeltaResource'), require('../model/ImportJobResource'), require('../model/PageImportJobResource'), require('../model/PageQuestionResource'), require('../model/PageQuestionTemplateResource'), require('../model/QuestionResource'), require('../model/QuestionTemplateResource'));
  } else {
    // Browser globals (root is window)
    if (!root.KnetikPlatformApiDocumentationLatest) {
      root.KnetikPlatformApiDocumentationLatest = {};
    }
    root.KnetikPlatformApiDocumentationLatest.GamificationTriviaApi = factory(root.KnetikPlatformApiDocumentationLatest.ApiClient, root.KnetikPlatformApiDocumentationLatest.AnswerResource, root.KnetikPlatformApiDocumentationLatest.Collectionstring, root.KnetikPlatformApiDocumentationLatest.DeltaResource, root.KnetikPlatformApiDocumentationLatest.ImportJobResource, root.KnetikPlatformApiDocumentationLatest.PageImportJobResource, root.KnetikPlatformApiDocumentationLatest.PageQuestionResource, root.KnetikPlatformApiDocumentationLatest.PageQuestionTemplateResource, root.KnetikPlatformApiDocumentationLatest.QuestionResource, root.KnetikPlatformApiDocumentationLatest.QuestionTemplateResource);
  }
}(this, function(ApiClient, AnswerResource, Collectionstring, DeltaResource, ImportJobResource, PageImportJobResource, PageQuestionResource, PageQuestionTemplateResource, QuestionResource, QuestionTemplateResource) {
  'use strict';

  /**
   * GamificationTrivia service.
   * @module api/GamificationTriviaApi
   * @version Latest
   */

  /**
   * Constructs a new GamificationTriviaApi. 
   * @alias module:api/GamificationTriviaApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addAnswersUsingPOST operation.
     * @callback module:api/GamificationTriviaApi~addAnswersUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnswerResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an answer to a question
     * @param {String} questionId The id of the question
     * @param {Object} opts Optional parameters
     * @param {module:model/AnswerResource} opts.answer The new answer
     * @param {module:api/GamificationTriviaApi~addAnswersUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnswerResource}
     */
    this.addAnswersUsingPOST = function(questionId, opts, callback) {
      opts = opts || {};
      var postBody = opts['answer'];

      // verify the required parameter 'questionId' is set
      if (questionId == undefined || questionId == null) {
        throw new Error("Missing the required parameter 'questionId' when calling addAnswersUsingPOST");
      }


      var pathParams = {
        'question_id': questionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = AnswerResource;

      return this.apiClient.callApi(
        '/trivia/questions/{question_id}/answers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addTagUsingPOST operation.
     * @callback module:api/GamificationTriviaApi~addTagUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a tag to a question
     * @param {String} id The id of the question
     * @param {Object} opts Optional parameters
     * @param {String} opts.tag The new tag
     * @param {module:api/GamificationTriviaApi~addTagUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addTagUsingPOST = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['tag'];

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling addTagUsingPOST");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/trivia/questions/{id}/tags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the batchAddTagUsingPOST operation.
     * @callback module:api/GamificationTriviaApi~batchAddTagUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {'Number'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a tag to a batch of questions
     * All questions that dont&#39;t have the tag and match filters will have it added. The returned number is the number of questions updated.
     * @param {Object} opts Optional parameters
     * @param {String} opts.tag The tag to add
     * @param {String} opts.filterSearch Filter for documents whose question, answers or tags contains provided string
     * @param {String} opts.filterIdset Filter for documents whose id is in the comma separated list provided
     * @param {String} opts.filterCategory Filter for questions with specified category, by id
     * @param {String} opts.filterTag Filter for questions with specified tag
     * @param {String} opts.filterTagset Filter for questions with specified tags (separated by comma)
     * @param {module:model/String} opts.filterType Filter for questions with specified type
     * @param {Boolean} opts.filterPublished Filter for questions currenctly published or not
     * @param {Number} opts.filterImportId Filter for questions from a specific import job
     * @param {module:api/GamificationTriviaApi~batchAddTagUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Number'}
     */
    this.batchAddTagUsingPOST = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['tag'];


      var pathParams = {
      };
      var queryParams = {
        'filter_search': opts['filterSearch'],
        'filter_idset': opts['filterIdset'],
        'filter_category': opts['filterCategory'],
        'filter_tag': opts['filterTag'],
        'filter_tagset': opts['filterTagset'],
        'filter_type': opts['filterType'],
        'filter_published': opts['filterPublished'],
        'filter_import_id': opts['filterImportId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = 'Number';

      return this.apiClient.callApi(
        '/trivia/questions/tags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the batchRemoveTagUsingDELETE operation.
     * @callback module:api/GamificationTriviaApi~batchRemoveTagUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param {'Number'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a tag from a batch of questions
     * ll questions that have the tag and match filters will have it removed. The returned number is the number of questions updated.
     * @param {String} tag The tag to remove
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterSearch Filter for documents whose question, answers or tags contains provided string
     * @param {String} opts.filterIdset Filter for documents whose id is in the comma separated list provided
     * @param {String} opts.filterCategory Filter for questions with specified category, by id
     * @param {String} opts.filterTag Filter for questions with specified tag
     * @param {String} opts.filterTagset Filter for questions with specified tags (separated by comma)
     * @param {String} opts.filterType Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;)
     * @param {Boolean} opts.filterPublished Filter for questions currenctly published or not
     * @param {Number} opts.filterImportId Filter for questions from a specific import job
     * @param {module:api/GamificationTriviaApi~batchRemoveTagUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Number'}
     */
    this.batchRemoveTagUsingDELETE = function(tag, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'tag' is set
      if (tag == undefined || tag == null) {
        throw new Error("Missing the required parameter 'tag' when calling batchRemoveTagUsingDELETE");
      }


      var pathParams = {
        'tag': tag
      };
      var queryParams = {
        'filter_search': opts['filterSearch'],
        'filter_idset': opts['filterIdset'],
        'filter_category': opts['filterCategory'],
        'filter_tag': opts['filterTag'],
        'filter_tagset': opts['filterTagset'],
        'filter_type': opts['filterType'],
        'filter_published': opts['filterPublished'],
        'filter_import_id': opts['filterImportId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = 'Number';

      return this.apiClient.callApi(
        '/trivia/questions/tags/{tag}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bulkUpdateUsingPUT operation.
     * @callback module:api/GamificationTriviaApi~bulkUpdateUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {'Number'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk update questions
     * Will update all questions that match filters used (or all questions in system if no filters used). Body should match a question resource with only those properties you wish to set. Null values will be ignored. Returned number is how many were updated.
     * @param {Object} opts Optional parameters
     * @param {module:model/QuestionResource} opts.question New values for a set of question fields
     * @param {String} opts.filterSearch Filter for documents whose question, answers or tags contains provided string
     * @param {String} opts.filterIdset Filter for documents whose id is in the comma separated list provided
     * @param {String} opts.filterCategory Filter for questions with specified category, by id
     * @param {String} opts.filterTagset Filter for questions with specified tags (separated by comma)
     * @param {String} opts.filterType Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;)
     * @param {Boolean} opts.filterPublished Filter for questions currenctly published or not
     * @param {Number} opts.filterImportId Filter for questions from a specific import job
     * @param {module:api/GamificationTriviaApi~bulkUpdateUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Number'}
     */
    this.bulkUpdateUsingPUT = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['question'];


      var pathParams = {
      };
      var queryParams = {
        'filter_search': opts['filterSearch'],
        'filter_idset': opts['filterIdset'],
        'filter_category': opts['filterCategory'],
        'filter_tagset': opts['filterTagset'],
        'filter_type': opts['filterType'],
        'filter_published': opts['filterPublished'],
        'filter_import_id': opts['filterImportId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = 'Number';

      return this.apiClient.callApi(
        '/trivia/questions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the countQuestionsUsingGET operation.
     * @callback module:api/GamificationTriviaApi~countQuestionsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {'Number'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count questions based on filters.
     * This is also provided by the list endpoint so you don&#39;t need to call this for pagination purposes
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterSearch Filter for documents whose question, answers or tags contains provided string
     * @param {String} opts.filterIdset Filter for documents whose id is in the comma separated list provided
     * @param {String} opts.filterCategory Filter for questions with specified category, by id
     * @param {String} opts.filterTag Filter for questions with specified tag
     * @param {String} opts.filterTagset Filter for questions with specified tags (separated by comma)
     * @param {String} opts.filterType Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;)
     * @param {Boolean} opts.filterPublished Filter for questions currenctly published or not
     * @param {module:api/GamificationTriviaApi~countQuestionsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Number'}
     */
    this.countQuestionsUsingGET = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter_search': opts['filterSearch'],
        'filter_idset': opts['filterIdset'],
        'filter_category': opts['filterCategory'],
        'filter_tag': opts['filterTag'],
        'filter_tagset': opts['filterTagset'],
        'filter_type': opts['filterType'],
        'filter_published': opts['filterPublished']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = 'Number';

      return this.apiClient.callApi(
        '/trivia/questions/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createQuestionTemplateUsingPOST operation.
     * @callback module:api/GamificationTriviaApi~createQuestionTemplateUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuestionTemplateResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a question template
     * Question templates define a type of question and the properties they have
     * @param {Object} opts Optional parameters
     * @param {module:model/QuestionTemplateResource} opts.questionTemplateResource The question template resource object
     * @param {module:api/GamificationTriviaApi~createQuestionTemplateUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuestionTemplateResource}
     */
    this.createQuestionTemplateUsingPOST = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['questionTemplateResource'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = QuestionTemplateResource;

      return this.apiClient.callApi(
        '/trivia/questions/templates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createQuestionUsingPOST operation.
     * @callback module:api/GamificationTriviaApi~createQuestionUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuestionResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a question
     * @param {Object} opts Optional parameters
     * @param {module:model/QuestionResource} opts.question The new question
     * @param {module:api/GamificationTriviaApi~createQuestionUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuestionResource}
     */
    this.createQuestionUsingPOST = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['question'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = QuestionResource;

      return this.apiClient.callApi(
        '/trivia/questions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createUsingPOST operation.
     * @callback module:api/GamificationTriviaApi~createUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportJobResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an import job
     * Set up a job to import a set of trivia questions from a cvs file at a remote url. the file will be validated asynchronously but will not be processed until started manually with the process endpoint.
     * @param {Object} opts Optional parameters
     * @param {module:model/ImportJobResource} opts.request The new import job
     * @param {module:api/GamificationTriviaApi~createUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportJobResource}
     */
    this.createUsingPOST = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['request'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ImportJobResource;

      return this.apiClient.callApi(
        '/trivia/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteQuestionTemplateUsingDELETE operation.
     * @callback module:api/GamificationTriviaApi~deleteQuestionTemplateUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a question template
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {String} opts.cascade The value needed to delete used templates
     * @param {module:api/GamificationTriviaApi~deleteQuestionTemplateUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteQuestionTemplateUsingDELETE = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling deleteQuestionTemplateUsingDELETE");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'cascade': opts['cascade']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/trivia/questions/templates/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteQuestionUsingDELETE operation.
     * @callback module:api/GamificationTriviaApi~deleteQuestionUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a question
     * @param {String} id The id of the question
     * @param {module:api/GamificationTriviaApi~deleteQuestionUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteQuestionUsingDELETE = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling deleteQuestionUsingDELETE");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/trivia/questions/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUsingDELETE operation.
     * @callback module:api/GamificationTriviaApi~deleteUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an import job
     * Also deletes all questions that were imported by it
     * @param {Number} id The id of the job
     * @param {module:api/GamificationTriviaApi~deleteUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteUsingDELETE = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUsingDELETE");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/trivia/import/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnswerUsingGET operation.
     * @callback module:api/GamificationTriviaApi~getAnswerUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnswerResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an answer for a question
     * @param {String} questionId The id of the question
     * @param {String} id The id of the answer
     * @param {module:api/GamificationTriviaApi~getAnswerUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnswerResource}
     */
    this.getAnswerUsingGET = function(questionId, id, callback) {
      var postBody = null;

      // verify the required parameter 'questionId' is set
      if (questionId == undefined || questionId == null) {
        throw new Error("Missing the required parameter 'questionId' when calling getAnswerUsingGET");
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling getAnswerUsingGET");
      }


      var pathParams = {
        'question_id': questionId,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = AnswerResource;

      return this.apiClient.callApi(
        '/trivia/questions/{question_id}/answers/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnswersUsingGET operation.
     * @callback module:api/GamificationTriviaApi~getAnswersUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AnswerResource>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the answers available for a question
     * @param {String} questionId The id of the question
     * @param {module:api/GamificationTriviaApi~getAnswersUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AnswerResource>}
     */
    this.getAnswersUsingGET = function(questionId, callback) {
      var postBody = null;

      // verify the required parameter 'questionId' is set
      if (questionId == undefined || questionId == null) {
        throw new Error("Missing the required parameter 'questionId' when calling getAnswersUsingGET");
      }


      var pathParams = {
        'question_id': questionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = [AnswerResource];

      return this.apiClient.callApi(
        '/trivia/questions/{question_id}/answers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getListUsingGET1 operation.
     * @callback module:api/GamificationTriviaApi~getListUsingGET1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PageImportJobResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of import job
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterVendor Filter for jobs by vendor id
     * @param {String} opts.filterCategory Filter for jobs by category id
     * @param {String} opts.filterName Filter for jobs which name *STARTS* with the given string
     * @param {String} opts.filterStatus Filter for jobs that are in a specific set of statuses (comma separated)
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @param {module:api/GamificationTriviaApi~getListUsingGET1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageImportJobResource}
     */
    this.getListUsingGET1 = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter_vendor': opts['filterVendor'],
        'filter_category': opts['filterCategory'],
        'filter_name': opts['filterName'],
        'filter_status': opts['filterStatus'],
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = PageImportJobResource;

      return this.apiClient.callApi(
        '/trivia/import', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getQuestionTemplateUsingGET operation.
     * @callback module:api/GamificationTriviaApi~getQuestionTemplateUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuestionTemplateResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single question template
     * @param {String} id The id of the template
     * @param {module:api/GamificationTriviaApi~getQuestionTemplateUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuestionTemplateResource}
     */
    this.getQuestionTemplateUsingGET = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling getQuestionTemplateUsingGET");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = QuestionTemplateResource;

      return this.apiClient.callApi(
        '/trivia/questions/templates/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getQuestionTemplatesUsingGET operation.
     * @callback module:api/GamificationTriviaApi~getQuestionTemplatesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageQuestionTemplateResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List and search question templates
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @param {module:api/GamificationTriviaApi~getQuestionTemplatesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageQuestionTemplateResource}
     */
    this.getQuestionTemplatesUsingGET = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = PageQuestionTemplateResource;

      return this.apiClient.callApi(
        '/trivia/questions/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getQuestionUsingGET operation.
     * @callback module:api/GamificationTriviaApi~getQuestionUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuestionResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single question
     * @param {String} id The id of the question
     * @param {module:api/GamificationTriviaApi~getQuestionUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuestionResource}
     */
    this.getQuestionUsingGET = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling getQuestionUsingGET");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = QuestionResource;

      return this.apiClient.callApi(
        '/trivia/questions/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getQuestionsDeltaUsingGET operation.
     * @callback module:api/GamificationTriviaApi~getQuestionsDeltaUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DeltaResource>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List question deltas in ascending order of updated date
     * The &#39;since&#39; parameter is important to avoid getting a full list of all questions. Implementors should make sure they pass the updated date of the last resource loaded, not the date of the last request, in order to avoid gaps
     * @param {Object} opts Optional parameters
     * @param {Number} opts.since Timestamp in seconds
     * @param {module:api/GamificationTriviaApi~getQuestionsDeltaUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DeltaResource>}
     */
    this.getQuestionsDeltaUsingGET = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'since': opts['since']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = [DeltaResource];

      return this.apiClient.callApi(
        '/trivia/questions/delta', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getQuestionsUsingGET operation.
     * @callback module:api/GamificationTriviaApi~getQuestionsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageQuestionResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List and search questions
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @param {String} opts.filterSearch Filter for documents whose question, answers or tags contains provided string
     * @param {String} opts.filterIdset Filter for documents whose id is in the comma separated list provided
     * @param {String} opts.filterCategory Filter for questions with specified category, by id
     * @param {String} opts.filterTagset Filter for questions with specified tags (separated by comma)
     * @param {String} opts.filterType Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;)
     * @param {Boolean} opts.filterPublished Filter for questions currenctly published or not
     * @param {Number} opts.filterImportId Filter for questions from a specific import job
     * @param {module:api/GamificationTriviaApi~getQuestionsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageQuestionResource}
     */
    this.getQuestionsUsingGET = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order'],
        'filter_search': opts['filterSearch'],
        'filter_idset': opts['filterIdset'],
        'filter_category': opts['filterCategory'],
        'filter_tagset': opts['filterTagset'],
        'filter_type': opts['filterType'],
        'filter_published': opts['filterPublished'],
        'filter_import_id': opts['filterImportId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = PageQuestionResource;

      return this.apiClient.callApi(
        '/trivia/questions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTagsUsingGET1 operation.
     * @callback module:api/GamificationTriviaApi~getTagsUsingGET1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the tags for a question
     * @param {String} id The id of the question
     * @param {module:api/GamificationTriviaApi~getTagsUsingGET1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.getTagsUsingGET1 = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling getTagsUsingGET1");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/trivia/questions/{id}/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTagsUsingGET2 operation.
     * @callback module:api/GamificationTriviaApi~getTagsUsingGET2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Collectionstring} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List and search tags by the beginning of the string
     * For performance reasons, search &amp; category filters are mutually exclusive. If category is specified, search filter will be ignored in order to do fast matches for typeahead.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterSearch Filter for tags starting with the given text
     * @param {String} opts.filterCategory Filter for tags on questions from a specific category
     * @param {Number} opts.filterImportId Filter for tags on questions from a specific import job
     * @param {module:api/GamificationTriviaApi~getTagsUsingGET2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Collectionstring}
     */
    this.getTagsUsingGET2 = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter_search': opts['filterSearch'],
        'filter_category': opts['filterCategory'],
        'filter_import_id': opts['filterImportId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Collectionstring;

      return this.apiClient.callApi(
        '/trivia/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsingGET operation.
     * @callback module:api/GamificationTriviaApi~getUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportJobResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an import job
     * @param {Number} id The id of the job
     * @param {module:api/GamificationTriviaApi~getUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportJobResource}
     */
    this.getUsingGET = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling getUsingGET");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ImportJobResource;

      return this.apiClient.callApi(
        '/trivia/import/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeAnswersUsingDELETE operation.
     * @callback module:api/GamificationTriviaApi~removeAnswersUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an answer from a question
     * @param {String} questionId The id of the question
     * @param {String} id The id of the answer
     * @param {module:api/GamificationTriviaApi~removeAnswersUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.removeAnswersUsingDELETE = function(questionId, id, callback) {
      var postBody = null;

      // verify the required parameter 'questionId' is set
      if (questionId == undefined || questionId == null) {
        throw new Error("Missing the required parameter 'questionId' when calling removeAnswersUsingDELETE");
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling removeAnswersUsingDELETE");
      }


      var pathParams = {
        'question_id': questionId,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/trivia/questions/{question_id}/answers/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeTagUsingDELETE operation.
     * @callback module:api/GamificationTriviaApi~removeTagUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a tag from a question
     * @param {String} id The id of the question
     * @param {String} tag The tag to remove
     * @param {module:api/GamificationTriviaApi~removeTagUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.removeTagUsingDELETE = function(id, tag, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling removeTagUsingDELETE");
      }

      // verify the required parameter 'tag' is set
      if (tag == undefined || tag == null) {
        throw new Error("Missing the required parameter 'tag' when calling removeTagUsingDELETE");
      }


      var pathParams = {
        'id': id,
        'tag': tag
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/trivia/questions/{id}/tags/{tag}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the startProcessUsingPOST operation.
     * @callback module:api/GamificationTriviaApi~startProcessUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportJobResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start processing an import job
     * Will process the CSV file and add new questions asynchronously. The status of the job must be &#39;VALID&#39;.
     * @param {Number} id The id of the job
     * @param {Boolean} publishNow Whether the new questions should be published live immediately
     * @param {module:api/GamificationTriviaApi~startProcessUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportJobResource}
     */
    this.startProcessUsingPOST = function(id, publishNow, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling startProcessUsingPOST");
      }

      // verify the required parameter 'publishNow' is set
      if (publishNow == undefined || publishNow == null) {
        throw new Error("Missing the required parameter 'publishNow' when calling startProcessUsingPOST");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'publish_now': publishNow
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ImportJobResource;

      return this.apiClient.callApi(
        '/trivia/import/{id}/process', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAnswerUsingPUT operation.
     * @callback module:api/GamificationTriviaApi~updateAnswerUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an answer for a question
     * @param {String} questionId The id of the question
     * @param {String} id The id of the answer
     * @param {Object} opts Optional parameters
     * @param {module:model/AnswerResource} opts.answer The updated answer
     * @param {module:api/GamificationTriviaApi~updateAnswerUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateAnswerUsingPUT = function(questionId, id, opts, callback) {
      opts = opts || {};
      var postBody = opts['answer'];

      // verify the required parameter 'questionId' is set
      if (questionId == undefined || questionId == null) {
        throw new Error("Missing the required parameter 'questionId' when calling updateAnswerUsingPUT");
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling updateAnswerUsingPUT");
      }


      var pathParams = {
        'question_id': questionId,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/trivia/questions/{question_id}/answers/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateQuestionTemplateUsingPUT operation.
     * @callback module:api/GamificationTriviaApi~updateQuestionTemplateUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a question template
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {module:model/QuestionTemplateResource} opts.questionTemplateResource The question template resource object
     * @param {module:api/GamificationTriviaApi~updateQuestionTemplateUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateQuestionTemplateUsingPUT = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['questionTemplateResource'];

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling updateQuestionTemplateUsingPUT");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/trivia/questions/templates/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateQuestionUsingPUT operation.
     * @callback module:api/GamificationTriviaApi~updateQuestionUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuestionResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a question
     * @param {String} id The id of the question
     * @param {Object} opts Optional parameters
     * @param {module:model/QuestionResource} opts.question The updated question
     * @param {module:api/GamificationTriviaApi~updateQuestionUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuestionResource}
     */
    this.updateQuestionUsingPUT = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['question'];

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling updateQuestionUsingPUT");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = QuestionResource;

      return this.apiClient.callApi(
        '/trivia/questions/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUsingPUT operation.
     * @callback module:api/GamificationTriviaApi~updateUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportJobResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an import job
     * Changes should be made before process is started for there to be any effect.
     * @param {Number} id The id of the job
     * @param {Object} opts Optional parameters
     * @param {module:model/ImportJobResource} opts.request The updated job
     * @param {module:api/GamificationTriviaApi~updateUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportJobResource}
     */
    this.updateUsingPUT = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['request'];

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling updateUsingPUT");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ImportJobResource;

      return this.apiClient.callApi(
        '/trivia/import/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
