/**
 * Knetik Platform API Documentation Latest
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CommentResource', 'model/ContributionResource', 'model/DispositionResource', 'model/FlagResource', 'model/PageResourceCommentResource', 'model/PageResourceDispositionResource', 'model/PageResourceVideoRelationshipResource', 'model/PageResourceVideoResource', 'model/VideoRelationshipResource', 'model/VideoResource'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CommentResource'), require('../model/ContributionResource'), require('../model/DispositionResource'), require('../model/FlagResource'), require('../model/PageResourceCommentResource'), require('../model/PageResourceDispositionResource'), require('../model/PageResourceVideoRelationshipResource'), require('../model/PageResourceVideoResource'), require('../model/VideoRelationshipResource'), require('../model/VideoResource'));
  } else {
    // Browser globals (root is window)
    if (!root.KnetikPlatformApiDocumentationLatest) {
      root.KnetikPlatformApiDocumentationLatest = {};
    }
    root.KnetikPlatformApiDocumentationLatest.MediaVideosApi = factory(root.KnetikPlatformApiDocumentationLatest.ApiClient, root.KnetikPlatformApiDocumentationLatest.CommentResource, root.KnetikPlatformApiDocumentationLatest.ContributionResource, root.KnetikPlatformApiDocumentationLatest.DispositionResource, root.KnetikPlatformApiDocumentationLatest.FlagResource, root.KnetikPlatformApiDocumentationLatest.PageResourceCommentResource, root.KnetikPlatformApiDocumentationLatest.PageResourceDispositionResource, root.KnetikPlatformApiDocumentationLatest.PageResourceVideoRelationshipResource, root.KnetikPlatformApiDocumentationLatest.PageResourceVideoResource, root.KnetikPlatformApiDocumentationLatest.VideoRelationshipResource, root.KnetikPlatformApiDocumentationLatest.VideoResource);
  }
}(this, function(ApiClient, CommentResource, ContributionResource, DispositionResource, FlagResource, PageResourceCommentResource, PageResourceDispositionResource, PageResourceVideoRelationshipResource, PageResourceVideoResource, VideoRelationshipResource, VideoResource) {
  'use strict';

  /**
   * MediaVideos service.
   * @module api/MediaVideosApi
   * @version Latest
   */

  /**
   * Constructs a new MediaVideosApi. 
   * @alias module:api/MediaVideosApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addCommentUsingPOST1 operation.
     * @callback module:api/MediaVideosApi~addCommentUsingPOST1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new video comment
     * @param {Number} videoId The video id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentResource} opts.commentResource The comment object
     * @param {module:api/MediaVideosApi~addCommentUsingPOST1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentResource}
     */
    this.addCommentUsingPOST1 = function(videoId, opts, callback) {
      opts = opts || {};
      var postBody = opts['commentResource'];

      // verify the required parameter 'videoId' is set
      if (videoId == undefined || videoId == null) {
        throw new Error("Missing the required parameter 'videoId' when calling addCommentUsingPOST1");
      }


      var pathParams = {
        'video_id': videoId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['knetik_oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CommentResource;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addContributorUsingPOST operation.
     * @callback module:api/MediaVideosApi~addContributorUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a contributor to a video
     * @param {Number} videoId The video id
     * @param {Object} opts Optional parameters
     * @param {module:model/ContributionResource} opts.contributionResource The contribution object
     * @param {module:api/MediaVideosApi~addContributorUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addContributorUsingPOST = function(videoId, opts, callback) {
      opts = opts || {};
      var postBody = opts['contributionResource'];

      // verify the required parameter 'videoId' is set
      if (videoId == undefined || videoId == null) {
        throw new Error("Missing the required parameter 'videoId' when calling addContributorUsingPOST");
      }


      var pathParams = {
        'video_id': videoId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['knetik_oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/contributors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addDispositionUsingPOST1 operation.
     * @callback module:api/MediaVideosApi~addDispositionUsingPOST1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DispositionResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new Video disposition
     * @param {Number} videoId The video id
     * @param {Object} opts Optional parameters
     * @param {module:model/DispositionResource} opts.dispositionResource The disposition object
     * @param {module:api/MediaVideosApi~addDispositionUsingPOST1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DispositionResource}
     */
    this.addDispositionUsingPOST1 = function(videoId, opts, callback) {
      opts = opts || {};
      var postBody = opts['dispositionResource'];

      // verify the required parameter 'videoId' is set
      if (videoId == undefined || videoId == null) {
        throw new Error("Missing the required parameter 'videoId' when calling addDispositionUsingPOST1");
      }


      var pathParams = {
        'video_id': videoId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['knetik_oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DispositionResource;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/dispositions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addFlagUsingPOST operation.
     * @callback module:api/MediaVideosApi~addFlagUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new flag
     * @param {Number} videoId The video id
     * @param {Object} opts Optional parameters
     * @param {String} opts.reason The flag reason
     * @param {module:api/MediaVideosApi~addFlagUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addFlagUsingPOST = function(videoId, opts, callback) {
      opts = opts || {};
      var postBody = opts['reason'];

      // verify the required parameter 'videoId' is set
      if (videoId == undefined || videoId == null) {
        throw new Error("Missing the required parameter 'videoId' when calling addFlagUsingPOST");
      }


      var pathParams = {
        'video_id': videoId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['knetik_oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/moderation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addRelatedUsingPOST operation.
     * @callback module:api/MediaVideosApi~addRelatedUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoRelationshipResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds one or more existing videos as related to this one
     * @param {Number} videoId The video id
     * @param {Object} opts Optional parameters
     * @param {module:model/VideoRelationshipResource} opts.videoRelationshipResource The video relationship object 
     * @param {module:api/MediaVideosApi~addRelatedUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoRelationshipResource}
     */
    this.addRelatedUsingPOST = function(videoId, opts, callback) {
      opts = opts || {};
      var postBody = opts['videoRelationshipResource'];

      // verify the required parameter 'videoId' is set
      if (videoId == undefined || videoId == null) {
        throw new Error("Missing the required parameter 'videoId' when calling addRelatedUsingPOST");
      }


      var pathParams = {
        'video_id': videoId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['knetik_oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = VideoRelationshipResource;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/related', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addVideoUsingPOST operation.
     * @callback module:api/MediaVideosApi~addVideoUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a new video in the system
     * @param {Object} opts Optional parameters
     * @param {module:model/VideoResource} opts.videoResource The video object
     * @param {module:api/MediaVideosApi~addVideoUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoResource}
     */
    this.addVideoUsingPOST = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['videoResource'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['knetik_oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = VideoResource;

      return this.apiClient.callApi(
        '/media/videos', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addWhitelistUsingPOST operation.
     * @callback module:api/MediaVideosApi~addWhitelistUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a user to a video&#39;s whitelist
     * Whitelisted users can view video regardless of privacy setting.
     * @param {Number} id The video id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.userId The user id
     * @param {module:api/MediaVideosApi~addWhitelistUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addWhitelistUsingPOST = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['userId'];

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling addWhitelistUsingPOST");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['knetik_oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/media/videos/{id}/whitelist', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCommentUsingDELETE1 operation.
     * @callback module:api/MediaVideosApi~deleteCommentUsingDELETE1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a video comment
     * @param {Number} videoId The video id
     * @param {Number} id The comment id
     * @param {module:api/MediaVideosApi~deleteCommentUsingDELETE1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCommentUsingDELETE1 = function(videoId, id, callback) {
      var postBody = null;

      // verify the required parameter 'videoId' is set
      if (videoId == undefined || videoId == null) {
        throw new Error("Missing the required parameter 'videoId' when calling deleteCommentUsingDELETE1");
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCommentUsingDELETE1");
      }


      var pathParams = {
        'video_id': videoId,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['knetik_oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/comments/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDispositionUsingDELETE1 operation.
     * @callback module:api/MediaVideosApi~deleteDispositionUsingDELETE1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a video comment
     * @param {Number} dispositionId The disposition id
     * @param {module:api/MediaVideosApi~deleteDispositionUsingDELETE1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteDispositionUsingDELETE1 = function(dispositionId, callback) {
      var postBody = null;

      // verify the required parameter 'dispositionId' is set
      if (dispositionId == undefined || dispositionId == null) {
        throw new Error("Missing the required parameter 'dispositionId' when calling deleteDispositionUsingDELETE1");
      }


      var pathParams = {
        'disposition_id': dispositionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['knetik_oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/dispositions/{disposition_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFlagUsingDELETE operation.
     * @callback module:api/MediaVideosApi~deleteFlagUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a flag
     * @param {Number} videoId The video id
     * @param {module:api/MediaVideosApi~deleteFlagUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteFlagUsingDELETE = function(videoId, callback) {
      var postBody = null;

      // verify the required parameter 'videoId' is set
      if (videoId == undefined || videoId == null) {
        throw new Error("Missing the required parameter 'videoId' when calling deleteFlagUsingDELETE");
      }


      var pathParams = {
        'video_id': videoId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['knetik_oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/moderation', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRelationshipUsingDELETE1 operation.
     * @callback module:api/MediaVideosApi~deleteRelationshipUsingDELETE1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a video&#39;s relationship
     * @param {Number} videoId The video id
     * @param {Number} id The relationship id
     * @param {module:api/MediaVideosApi~deleteRelationshipUsingDELETE1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteRelationshipUsingDELETE1 = function(videoId, id, callback) {
      var postBody = null;

      // verify the required parameter 'videoId' is set
      if (videoId == undefined || videoId == null) {
        throw new Error("Missing the required parameter 'videoId' when calling deleteRelationshipUsingDELETE1");
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRelationshipUsingDELETE1");
      }


      var pathParams = {
        'video_id': videoId,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['knetik_oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/related/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVideoUsingDELETE operation.
     * @callback module:api/MediaVideosApi~deleteVideoUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a video from the system if no resources are attached to it
     * @param {Number} id The video id
     * @param {module:api/MediaVideosApi~deleteVideoUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteVideoUsingDELETE = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling deleteVideoUsingDELETE");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['knetik_oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/media/videos/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCommentsUsingGET1 operation.
     * @callback module:api/MediaVideosApi~getCommentsUsingGET1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResourceCommentResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a page of comments for a video
     * @param {Number} videoId The video id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {module:api/MediaVideosApi~getCommentsUsingGET1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResourceCommentResource}
     */
    this.getCommentsUsingGET1 = function(videoId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'videoId' is set
      if (videoId == undefined || videoId == null) {
        throw new Error("Missing the required parameter 'videoId' when calling getCommentsUsingGET1");
      }


      var pathParams = {
        'video_id': videoId
      };
      var queryParams = {
        'size': opts['size'],
        'page': opts['page']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PageResourceCommentResource;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDispositionsUsingGET1 operation.
     * @callback module:api/MediaVideosApi~getDispositionsUsingGET1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResourceDispositionResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a page of dispositions for a video
     * @param {Number} videoId The video id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {module:api/MediaVideosApi~getDispositionsUsingGET1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResourceDispositionResource}
     */
    this.getDispositionsUsingGET1 = function(videoId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'videoId' is set
      if (videoId == undefined || videoId == null) {
        throw new Error("Missing the required parameter 'videoId' when calling getDispositionsUsingGET1");
      }


      var pathParams = {
        'video_id': videoId
      };
      var queryParams = {
        'size': opts['size'],
        'page': opts['page']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PageResourceDispositionResource;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/dispositions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRelatedUsingGET operation.
     * @callback module:api/MediaVideosApi~getRelatedUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResourceVideoRelationshipResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a page of video relationships
     * @param {Number} videoId The video id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {module:api/MediaVideosApi~getRelatedUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResourceVideoRelationshipResource}
     */
    this.getRelatedUsingGET = function(videoId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'videoId' is set
      if (videoId == undefined || videoId == null) {
        throw new Error("Missing the required parameter 'videoId' when calling getRelatedUsingGET");
      }


      var pathParams = {
        'video_id': videoId
      };
      var queryParams = {
        'size': opts['size'],
        'page': opts['page']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PageResourceVideoRelationshipResource;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/related', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserVideosUsingGET operation.
     * @callback module:api/MediaVideosApi~getUserVideosUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResourceVideoResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user videos
     * @param {Number} userId The user id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.excludeFlagged Skip videos that have been flagged by the current user (default to true)
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {module:api/MediaVideosApi~getUserVideosUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResourceVideoResource}
     */
    this.getUserVideosUsingGET = function(userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserVideosUsingGET");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
        'exclude_flagged': opts['excludeFlagged'],
        'size': opts['size'],
        'page': opts['page']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['knetik_oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PageResourceVideoResource;

      return this.apiClient.callApi(
        '/users/{user_id}/videos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVideoUsingGET operation.
     * @callback module:api/MediaVideosApi~getVideoUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Loads a specific video details
     * @param {Number} id The video id
     * @param {module:api/MediaVideosApi~getVideoUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoResource}
     */
    this.getVideoUsingGET = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling getVideoUsingGET");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['knetik_oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = VideoResource;

      return this.apiClient.callApi(
        '/media/videos/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeContributorUsingDELETE operation.
     * @callback module:api/MediaVideosApi~removeContributorUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a contributor from a video
     * @param {Number} videoId The video id
     * @param {Number} id The contributor id
     * @param {module:api/MediaVideosApi~removeContributorUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.removeContributorUsingDELETE = function(videoId, id, callback) {
      var postBody = null;

      // verify the required parameter 'videoId' is set
      if (videoId == undefined || videoId == null) {
        throw new Error("Missing the required parameter 'videoId' when calling removeContributorUsingDELETE");
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling removeContributorUsingDELETE");
      }


      var pathParams = {
        'video_id': videoId,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['knetik_oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/contributors/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeWhitelistUsingDELETE operation.
     * @callback module:api/MediaVideosApi~removeWhitelistUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a user from a video&#39;s whitelist
     * Remove the user with the id given in the path from the whitelist of users that can view this video regardless of privacy setting.
     * @param {Number} videoId The video id
     * @param {Number} id The user id
     * @param {module:api/MediaVideosApi~removeWhitelistUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.removeWhitelistUsingDELETE = function(videoId, id, callback) {
      var postBody = null;

      // verify the required parameter 'videoId' is set
      if (videoId == undefined || videoId == null) {
        throw new Error("Missing the required parameter 'videoId' when calling removeWhitelistUsingDELETE");
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling removeWhitelistUsingDELETE");
      }


      var pathParams = {
        'video_id': videoId,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['knetik_oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/whitelist/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchVideosUsingGET operation.
     * @callback module:api/MediaVideosApi~searchVideosUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResourceVideoResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search videos using the documented filters
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.excludeFlagged Skip videos that have been flagged by the current user (default to true)
     * @param {String} opts.filterVideosByUploader Filter for videos by uploader id
     * @param {String} opts.filterCategory Filter for videos from a specific category by id
     * @param {String} opts.filterTagset Filter for videos with specified tags (separated by comma)
     * @param {String} opts.filterVideosByName Filter for videos which name *STARTS* with the given string
     * @param {String} opts.filterVideosByContributor Filter for videos with contribution from the artist specified by ID
     * @param {String} opts.filterVideosByAuthor Filter for videos with an artist as author specified by ID
     * @param {Boolean} opts.filterHasAuthor Filter for videos that have an author set if true, or that have no author if false
     * @param {Boolean} opts.filterHasUploader Filter for videos that have an uploader set if true, or that have no uploader if false
     * @param {String} opts.filterRelatedTo Filter for videos that have designated a particular video as the TO of a relationship. Pattern should match VIDEO_ID or VIDEO_ID:DETAILS to match with a specific details string as well
     * @param {Boolean} opts.filterFriends Filter for videos uploaded by friends. &#39;true&#39; for friends of the caller (requires user token) or a user id for a specific user&#39;s friends (requires VIDEOS_ADMIN permission)
     * @param {String} opts.filterDisposition Filter for videos a given user has a given disposition towards. USER_ID:DISPOSITION where USER_ID is the id of the user who has this disposition or &#39;me&#39; for the caller (requires user token for &#39;me&#39;) and DISPOSITION is the name of the disposition. E.G. filter_disposition&#x3D;123:like or filter_disposition&#x3D;me:favorite
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to author:ASC)
     * @param {module:api/MediaVideosApi~searchVideosUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResourceVideoResource}
     */
    this.searchVideosUsingGET = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'exclude_flagged': opts['excludeFlagged'],
        'filter_videos_by_uploader': opts['filterVideosByUploader'],
        'filter_category': opts['filterCategory'],
        'filter_tagset': opts['filterTagset'],
        'filter_videos_by_name': opts['filterVideosByName'],
        'filter_videos_by_contributor': opts['filterVideosByContributor'],
        'filter_videos_by_author': opts['filterVideosByAuthor'],
        'filter_has_author': opts['filterHasAuthor'],
        'filter_has_uploader': opts['filterHasUploader'],
        'filter_related_to': opts['filterRelatedTo'],
        'filter_friends': opts['filterFriends'],
        'filter_disposition': opts['filterDisposition'],
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PageResourceVideoResource;

      return this.apiClient.callApi(
        '/media/videos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCommentUsingPUT1 operation.
     * @callback module:api/MediaVideosApi~updateCommentUsingPUT1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update video comment content 
     * @param {Number} videoId The video id
     * @param {Number} id The comment id
     * @param {Object} opts Optional parameters
     * @param {String} opts.content The comment content
     * @param {module:api/MediaVideosApi~updateCommentUsingPUT1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateCommentUsingPUT1 = function(videoId, id, opts, callback) {
      opts = opts || {};
      var postBody = opts['content'];

      // verify the required parameter 'videoId' is set
      if (videoId == undefined || videoId == null) {
        throw new Error("Missing the required parameter 'videoId' when calling updateCommentUsingPUT1");
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling updateCommentUsingPUT1");
      }


      var pathParams = {
        'video_id': videoId,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['knetik_oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/comments/{id}/content', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRelationshipUsingPUT1 operation.
     * @callback module:api/MediaVideosApi~updateRelationshipUsingPUT1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a video&#39;s relationship details
     * @param {Number} videoId The video id
     * @param {Number} relationshipId The relationship id
     * @param {Object} opts Optional parameters
     * @param {String} opts.details The video relationship details
     * @param {module:api/MediaVideosApi~updateRelationshipUsingPUT1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateRelationshipUsingPUT1 = function(videoId, relationshipId, opts, callback) {
      opts = opts || {};
      var postBody = opts['details'];

      // verify the required parameter 'videoId' is set
      if (videoId == undefined || videoId == null) {
        throw new Error("Missing the required parameter 'videoId' when calling updateRelationshipUsingPUT1");
      }

      // verify the required parameter 'relationshipId' is set
      if (relationshipId == undefined || relationshipId == null) {
        throw new Error("Missing the required parameter 'relationshipId' when calling updateRelationshipUsingPUT1");
      }


      var pathParams = {
        'video_id': videoId,
        'relationship_id': relationshipId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['knetik_oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/related/{id}/relationship_details', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVideoUsingPUT operation.
     * @callback module:api/MediaVideosApi~updateVideoUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies a video&#39;s details
     * @param {Number} id The video id
     * @param {Object} opts Optional parameters
     * @param {module:model/VideoResource} opts.videoResource The video object
     * @param {module:api/MediaVideosApi~updateVideoUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateVideoUsingPUT = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['videoResource'];

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling updateVideoUsingPUT");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['knetik_oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/media/videos/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the viewVideoUsingPOST operation.
     * @callback module:api/MediaVideosApi~viewVideoUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Increment a video&#39;s view count
     * @param {Number} id The video id
     * @param {module:api/MediaVideosApi~viewVideoUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.viewVideoUsingPOST = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling viewVideoUsingPOST");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/media/videos/{id}/views', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
