/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CommentResource from '../model/CommentResource';
import ContributionResource from '../model/ContributionResource';
import DispositionResource from '../model/DispositionResource';
import FlagResource from '../model/FlagResource';
import IntWrapper from '../model/IntWrapper';
import PageResourceCommentResource from '../model/PageResourceCommentResource';
import PageResourceDispositionResource from '../model/PageResourceDispositionResource';
import PageResourceVideoRelationshipResource from '../model/PageResourceVideoRelationshipResource';
import PageResourceVideoResource from '../model/PageResourceVideoResource';
import Result from '../model/Result';
import StringWrapper from '../model/StringWrapper';
import VideoRelationshipResource from '../model/VideoRelationshipResource';
import VideoResource from '../model/VideoResource';

/**
* MediaVideos service.
* @module api/MediaVideosApi
* @version 3.0.7
*/
export default class MediaVideosApi {

    /**
    * Constructs a new MediaVideosApi. 
    * @alias module:api/MediaVideosApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Adds a user to a video&#39;s whitelist
     * Whitelisted users can view video regardless of privacy setting.
     * @param {Number} id The video id
     * @param {Object} opts Optional parameters
     * @param {module:model/IntWrapper} opts.userId The user id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addUserToVideoWhitelistWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['userId'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addUserToVideoWhitelist");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/media/videos/{id}/whitelist', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Adds a user to a video&#39;s whitelist
     * Whitelisted users can view video regardless of privacy setting.
     * @param {Number} id The video id
     * @param {Object} opts Optional parameters
     * @param {module:model/IntWrapper} opts.userId The user id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addUserToVideoWhitelist(id, opts) {
      return this.addUserToVideoWhitelistWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Adds a new video in the system
     * @param {Object} opts Optional parameters
     * @param {module:model/VideoResource} opts.videoResource The video object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VideoResource} and HTTP response
     */
    addVideoWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['videoResource'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VideoResource;

      return this.apiClient.callApi(
        '/media/videos', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Adds a new video in the system
     * @param {Object} opts Optional parameters
     * @param {module:model/VideoResource} opts.videoResource The video object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VideoResource}
     */
    addVideo(opts) {
      return this.addVideoWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add a new video comment
     * @param {Number} videoId The video id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentResource} opts.commentResource The comment object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CommentResource} and HTTP response
     */
    addVideoCommentWithHttpInfo(videoId, opts) {
      opts = opts || {};
      let postBody = opts['commentResource'];

      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling addVideoComment");
      }


      let pathParams = {
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CommentResource;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add a new video comment
     * @param {Number} videoId The video id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentResource} opts.commentResource The comment object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CommentResource}
     */
    addVideoComment(videoId, opts) {
      return this.addVideoCommentWithHttpInfo(videoId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Adds a contributor to a video
     * @param {Number} videoId The video id
     * @param {Object} opts Optional parameters
     * @param {module:model/ContributionResource} opts.contributionResource The contribution object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addVideoContributorWithHttpInfo(videoId, opts) {
      opts = opts || {};
      let postBody = opts['contributionResource'];

      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling addVideoContributor");
      }


      let pathParams = {
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/contributors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Adds a contributor to a video
     * @param {Number} videoId The video id
     * @param {Object} opts Optional parameters
     * @param {module:model/ContributionResource} opts.contributionResource The contribution object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addVideoContributor(videoId, opts) {
      return this.addVideoContributorWithHttpInfo(videoId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add a new flag
     * @param {Number} videoId The video id
     * @param {Object} opts Optional parameters
     * @param {module:model/StringWrapper} opts.reason The flag reason
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FlagResource} and HTTP response
     */
    addVideoFlagWithHttpInfo(videoId, opts) {
      opts = opts || {};
      let postBody = opts['reason'];

      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling addVideoFlag");
      }


      let pathParams = {
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FlagResource;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/moderation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add a new flag
     * @param {Number} videoId The video id
     * @param {Object} opts Optional parameters
     * @param {module:model/StringWrapper} opts.reason The flag reason
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FlagResource}
     */
    addVideoFlag(videoId, opts) {
      return this.addVideoFlagWithHttpInfo(videoId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Adds one or more existing videos as related to this one
     * @param {Number} videoId The video id
     * @param {Object} opts Optional parameters
     * @param {module:model/VideoRelationshipResource} opts.videoRelationshipResource The video relationship object 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VideoRelationshipResource} and HTTP response
     */
    addVideoRelationshipsWithHttpInfo(videoId, opts) {
      opts = opts || {};
      let postBody = opts['videoRelationshipResource'];

      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling addVideoRelationships");
      }


      let pathParams = {
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VideoRelationshipResource;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/related', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Adds one or more existing videos as related to this one
     * @param {Number} videoId The video id
     * @param {Object} opts Optional parameters
     * @param {module:model/VideoRelationshipResource} opts.videoRelationshipResource The video relationship object 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VideoRelationshipResource}
     */
    addVideoRelationships(videoId, opts) {
      return this.addVideoRelationshipsWithHttpInfo(videoId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a video disposition
     * @param {Number} videoId The video id
     * @param {Object} opts Optional parameters
     * @param {module:model/DispositionResource} opts.dispositionResource The disposition object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DispositionResource} and HTTP response
     */
    createVideoDispositionWithHttpInfo(videoId, opts) {
      opts = opts || {};
      let postBody = opts['dispositionResource'];

      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling createVideoDisposition");
      }


      let pathParams = {
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DispositionResource;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/dispositions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a video disposition
     * @param {Number} videoId The video id
     * @param {Object} opts Optional parameters
     * @param {module:model/DispositionResource} opts.dispositionResource The disposition object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DispositionResource}
     */
    createVideoDisposition(videoId, opts) {
      return this.createVideoDispositionWithHttpInfo(videoId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes a video from the system if no resources are attached to it
     * @param {Number} id The video id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteVideoWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteVideo");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/media/videos/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes a video from the system if no resources are attached to it
     * @param {Number} id The video id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteVideo(id) {
      return this.deleteVideoWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a video comment
     * @param {Number} videoId The video id
     * @param {Number} id The comment id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteVideoCommentWithHttpInfo(videoId, id) {
      let postBody = null;

      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling deleteVideoComment");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteVideoComment");
      }


      let pathParams = {
        'video_id': videoId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/comments/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a video comment
     * @param {Number} videoId The video id
     * @param {Number} id The comment id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteVideoComment(videoId, id) {
      return this.deleteVideoCommentWithHttpInfo(videoId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a video disposition
     * @param {Number} dispositionId The disposition id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteVideoDispositionWithHttpInfo(dispositionId) {
      let postBody = null;

      // verify the required parameter 'dispositionId' is set
      if (dispositionId === undefined || dispositionId === null) {
        throw new Error("Missing the required parameter 'dispositionId' when calling deleteVideoDisposition");
      }


      let pathParams = {
        'disposition_id': dispositionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/dispositions/{disposition_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a video disposition
     * @param {Number} dispositionId The disposition id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteVideoDisposition(dispositionId) {
      return this.deleteVideoDispositionWithHttpInfo(dispositionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a flag
     * @param {Number} videoId The video id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteVideoFlagWithHttpInfo(videoId) {
      let postBody = null;

      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling deleteVideoFlag");
      }


      let pathParams = {
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/moderation', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a flag
     * @param {Number} videoId The video id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteVideoFlag(videoId) {
      return this.deleteVideoFlagWithHttpInfo(videoId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a video&#39;s relationship
     * @param {Number} videoId The video id
     * @param {Number} id The relationship id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteVideoRelationshipWithHttpInfo(videoId, id) {
      let postBody = null;

      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling deleteVideoRelationship");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteVideoRelationship");
      }


      let pathParams = {
        'video_id': videoId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/related/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a video&#39;s relationship
     * @param {Number} videoId The video id
     * @param {Number} id The relationship id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteVideoRelationship(videoId, id) {
      return this.deleteVideoRelationshipWithHttpInfo(videoId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get user videos
     * @param {Number} userId The user id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.excludeFlagged Skip videos that have been flagged by the current user (default to true)
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceVideoResource} and HTTP response
     */
    getUserVideosWithHttpInfo(userId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserVideos");
      }


      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        'exclude_flagged': opts['excludeFlagged'],
        'size': opts['size'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageResourceVideoResource;

      return this.apiClient.callApi(
        '/users/{user_id}/videos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get user videos
     * @param {Number} userId The user id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.excludeFlagged Skip videos that have been flagged by the current user (default to true)
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceVideoResource}
     */
    getUserVideos(userId, opts) {
      return this.getUserVideosWithHttpInfo(userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Loads a specific video details
     * @param {Number} id The video id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VideoResource} and HTTP response
     */
    getVideoWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVideo");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VideoResource;

      return this.apiClient.callApi(
        '/media/videos/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Loads a specific video details
     * @param {Number} id The video id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VideoResource}
     */
    getVideo(id) {
      return this.getVideoWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a page of comments for a video
     * @param {Number} videoId The video id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceCommentResource} and HTTP response
     */
    getVideoCommentsWithHttpInfo(videoId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling getVideoComments");
      }


      let pathParams = {
        'video_id': videoId
      };
      let queryParams = {
        'size': opts['size'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageResourceCommentResource;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a page of comments for a video
     * @param {Number} videoId The video id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceCommentResource}
     */
    getVideoComments(videoId, opts) {
      return this.getVideoCommentsWithHttpInfo(videoId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a page of dispositions for a video
     * @param {Number} videoId The video id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceDispositionResource} and HTTP response
     */
    getVideoDispositionsWithHttpInfo(videoId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling getVideoDispositions");
      }


      let pathParams = {
        'video_id': videoId
      };
      let queryParams = {
        'size': opts['size'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageResourceDispositionResource;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/dispositions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a page of dispositions for a video
     * @param {Number} videoId The video id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceDispositionResource}
     */
    getVideoDispositions(videoId, opts) {
      return this.getVideoDispositionsWithHttpInfo(videoId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a page of video relationships
     * @param {Number} videoId The video id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceVideoRelationshipResource} and HTTP response
     */
    getVideoRelationshipsWithHttpInfo(videoId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling getVideoRelationships");
      }


      let pathParams = {
        'video_id': videoId
      };
      let queryParams = {
        'size': opts['size'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageResourceVideoRelationshipResource;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/related', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a page of video relationships
     * @param {Number} videoId The video id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceVideoRelationshipResource}
     */
    getVideoRelationships(videoId, opts) {
      return this.getVideoRelationshipsWithHttpInfo(videoId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search videos using the documented filters
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.excludeFlagged Skip videos that have been flagged by the current user (default to true)
     * @param {Number} opts.filterVideosByUploader Filter for videos by uploader id
     * @param {String} opts.filterCategory Filter for videos from a specific category by id
     * @param {String} opts.filterTagset Filter for videos with specified tags (separated by comma)
     * @param {String} opts.filterVideosByName Filter for videos which name *STARTS* with the given string
     * @param {Number} opts.filterVideosByContributor Filter for videos with contribution from the artist specified by ID
     * @param {Number} opts.filterVideosByAuthor Filter for videos with an artist as author specified by ID
     * @param {Boolean} opts.filterHasAuthor Filter for videos that have an author set if true, or that have no author if false
     * @param {Boolean} opts.filterHasUploader Filter for videos that have an uploader set if true, or that have no uploader if false
     * @param {String} opts.filterRelatedTo Filter for videos that have designated a particular video as the TO of a relationship. Pattern should match VIDEO_ID or VIDEO_ID:DETAILS to match with a specific details string as well
     * @param {Boolean} opts.filterFriends Filter for videos uploaded by friends. &#39;true&#39; for friends of the caller (requires user token) or a user id for a specific user&#39;s friends (requires VIDEOS_ADMIN permission)
     * @param {String} opts.filterDisposition Filter for videos a given user has a given disposition towards. USER_ID:DISPOSITION where USER_ID is the id of the user who has this disposition or &#39;me&#39; for the caller (requires user token for &#39;me&#39;) and DISPOSITION is the name of the disposition. E.G. filter_disposition&#x3D;123:like or filter_disposition&#x3D;me:favorite
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to author:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceVideoResource} and HTTP response
     */
    getVideosWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'exclude_flagged': opts['excludeFlagged'],
        'filter_videos_by_uploader': opts['filterVideosByUploader'],
        'filter_category': opts['filterCategory'],
        'filter_tagset': opts['filterTagset'],
        'filter_videos_by_name': opts['filterVideosByName'],
        'filter_videos_by_contributor': opts['filterVideosByContributor'],
        'filter_videos_by_author': opts['filterVideosByAuthor'],
        'filter_has_author': opts['filterHasAuthor'],
        'filter_has_uploader': opts['filterHasUploader'],
        'filter_related_to': opts['filterRelatedTo'],
        'filter_friends': opts['filterFriends'],
        'filter_disposition': opts['filterDisposition'],
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageResourceVideoResource;

      return this.apiClient.callApi(
        '/media/videos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Search videos using the documented filters
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.excludeFlagged Skip videos that have been flagged by the current user (default to true)
     * @param {Number} opts.filterVideosByUploader Filter for videos by uploader id
     * @param {String} opts.filterCategory Filter for videos from a specific category by id
     * @param {String} opts.filterTagset Filter for videos with specified tags (separated by comma)
     * @param {String} opts.filterVideosByName Filter for videos which name *STARTS* with the given string
     * @param {Number} opts.filterVideosByContributor Filter for videos with contribution from the artist specified by ID
     * @param {Number} opts.filterVideosByAuthor Filter for videos with an artist as author specified by ID
     * @param {Boolean} opts.filterHasAuthor Filter for videos that have an author set if true, or that have no author if false
     * @param {Boolean} opts.filterHasUploader Filter for videos that have an uploader set if true, or that have no uploader if false
     * @param {String} opts.filterRelatedTo Filter for videos that have designated a particular video as the TO of a relationship. Pattern should match VIDEO_ID or VIDEO_ID:DETAILS to match with a specific details string as well
     * @param {Boolean} opts.filterFriends Filter for videos uploaded by friends. &#39;true&#39; for friends of the caller (requires user token) or a user id for a specific user&#39;s friends (requires VIDEOS_ADMIN permission)
     * @param {String} opts.filterDisposition Filter for videos a given user has a given disposition towards. USER_ID:DISPOSITION where USER_ID is the id of the user who has this disposition or &#39;me&#39; for the caller (requires user token for &#39;me&#39;) and DISPOSITION is the name of the disposition. E.G. filter_disposition&#x3D;123:like or filter_disposition&#x3D;me:favorite
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to author:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceVideoResource}
     */
    getVideos(opts) {
      return this.getVideosWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Removes a user from a video&#39;s whitelist
     * Remove the user with the id given in the path from the whitelist of users that can view this video regardless of privacy setting.
     * @param {Number} videoId The video id
     * @param {Number} id The user id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeUserFromVideoWhitelistWithHttpInfo(videoId, id) {
      let postBody = null;

      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling removeUserFromVideoWhitelist");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeUserFromVideoWhitelist");
      }


      let pathParams = {
        'video_id': videoId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/whitelist/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Removes a user from a video&#39;s whitelist
     * Remove the user with the id given in the path from the whitelist of users that can view this video regardless of privacy setting.
     * @param {Number} videoId The video id
     * @param {Number} id The user id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeUserFromVideoWhitelist(videoId, id) {
      return this.removeUserFromVideoWhitelistWithHttpInfo(videoId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Removes a contributor from a video
     * @param {Number} videoId The video id
     * @param {Number} id The contributor id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeVideoContributorWithHttpInfo(videoId, id) {
      let postBody = null;

      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling removeVideoContributor");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeVideoContributor");
      }


      let pathParams = {
        'video_id': videoId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/contributors/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Removes a contributor from a video
     * @param {Number} videoId The video id
     * @param {Number} id The contributor id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeVideoContributor(videoId, id) {
      return this.removeVideoContributorWithHttpInfo(videoId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modifies a video&#39;s details
     * @param {Number} id The video id
     * @param {Object} opts Optional parameters
     * @param {module:model/VideoResource} opts.videoResource The video object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateVideoWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['videoResource'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateVideo");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/media/videos/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Modifies a video&#39;s details
     * @param {Number} id The video id
     * @param {Object} opts Optional parameters
     * @param {module:model/VideoResource} opts.videoResource The video object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateVideo(id, opts) {
      return this.updateVideoWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a video comment
     * @param {Number} videoId The video id
     * @param {Number} id The comment id
     * @param {Object} opts Optional parameters
     * @param {module:model/StringWrapper} opts.content The comment content
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateVideoCommentWithHttpInfo(videoId, id, opts) {
      opts = opts || {};
      let postBody = opts['content'];

      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling updateVideoComment");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateVideoComment");
      }


      let pathParams = {
        'video_id': videoId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/comments/{id}/content', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a video comment
     * @param {Number} videoId The video id
     * @param {Number} id The comment id
     * @param {Object} opts Optional parameters
     * @param {module:model/StringWrapper} opts.content The comment content
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateVideoComment(videoId, id, opts) {
      return this.updateVideoCommentWithHttpInfo(videoId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a video&#39;s relationship details
     * @param {Number} videoId The video id
     * @param {Number} relationshipId The relationship id
     * @param {Object} opts Optional parameters
     * @param {module:model/StringWrapper} opts.details The video relationship details
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateVideoRelationshipWithHttpInfo(videoId, relationshipId, opts) {
      opts = opts || {};
      let postBody = opts['details'];

      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling updateVideoRelationship");
      }

      // verify the required parameter 'relationshipId' is set
      if (relationshipId === undefined || relationshipId === null) {
        throw new Error("Missing the required parameter 'relationshipId' when calling updateVideoRelationship");
      }


      let pathParams = {
        'video_id': videoId,
        'relationship_id': relationshipId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/related/{id}/relationship_details', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a video&#39;s relationship details
     * @param {Number} videoId The video id
     * @param {Number} relationshipId The relationship id
     * @param {Object} opts Optional parameters
     * @param {module:model/StringWrapper} opts.details The video relationship details
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateVideoRelationship(videoId, relationshipId, opts) {
      return this.updateVideoRelationshipWithHttpInfo(videoId, relationshipId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Increment a video&#39;s view count
     * @param {Number} id The video id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    viewVideoWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling viewVideo");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/media/videos/{id}/views', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Increment a video&#39;s view count
     * @param {Number} id The video id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    viewVideo(id) {
      return this.viewVideoWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
