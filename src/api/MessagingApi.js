/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RawEmailResource from '../model/RawEmailResource';
import RawSMSResource from '../model/RawSMSResource';
import Result from '../model/Result';
import TemplateEmailResource from '../model/TemplateEmailResource';
import TemplateSMSResource from '../model/TemplateSMSResource';

/**
* Messaging service.
* @module api/MessagingApi
* @version 3.0.7
*/
export default class MessagingApi {

    /**
    * Constructs a new MessagingApi. 
    * @alias module:api/MessagingApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Send a raw email to one or more users
     * @param {Object} opts Optional parameters
     * @param {module:model/RawEmailResource} opts.rawEmailResource The new raw email to be sent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    sendRawEmailWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['rawEmailResource'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/messaging/raw-email', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Send a raw email to one or more users
     * @param {Object} opts Optional parameters
     * @param {module:model/RawEmailResource} opts.rawEmailResource The new raw email to be sent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    sendRawEmail(opts) {
      return this.sendRawEmailWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Send a raw SMS
     * Sends a raw SMS text message to one or more users. User&#39;s without registered mobile numbers will be skipped.
     * @param {Object} opts Optional parameters
     * @param {module:model/RawSMSResource} opts.rawSMSResource The new raw SMS to be sent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    sendRawSMSWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['rawSMSResource'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/messaging/raw-sms', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Send a raw SMS
     * Sends a raw SMS text message to one or more users. User&#39;s without registered mobile numbers will be skipped.
     * @param {Object} opts Optional parameters
     * @param {module:model/RawSMSResource} opts.rawSMSResource The new raw SMS to be sent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    sendRawSMS(opts) {
      return this.sendRawSMSWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Send a templated email to one or more users
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateEmailResource} opts.messageResource The new template email to be sent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    sendTemplatedEmailWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['messageResource'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/messaging/templated-email', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Send a templated email to one or more users
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateEmailResource} opts.messageResource The new template email to be sent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    sendTemplatedEmail(opts) {
      return this.sendTemplatedEmailWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Send a new templated SMS
     * Sends a templated SMS text message to one or more users. User&#39;s without registered mobile numbers will be skipped.
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateSMSResource} opts.templateSMSResource The new template SMS to be sent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    sendTemplatedSMSWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['templateSMSResource'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/messaging/templated-sms', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Send a new templated SMS
     * Sends a templated SMS text message to one or more users. User&#39;s without registered mobile numbers will be skipped.
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateSMSResource} opts.templateSMSResource The new template SMS to be sent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    sendTemplatedSMS(opts) {
      return this.sendTemplatedSMSWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
