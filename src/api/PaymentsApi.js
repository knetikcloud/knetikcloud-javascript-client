/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PaymentAuthorizationResource from '../model/PaymentAuthorizationResource';
import PaymentMethodResource from '../model/PaymentMethodResource';
import Result from '../model/Result';

/**
* Payments service.
* @module api/PaymentsApi
* @version 3.0.7
*/
export default class PaymentsApi {

    /**
    * Constructs a new PaymentsApi. 
    * @alias module:api/PaymentsApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a new payment method for a user
     * @param {Number} userId ID of the user for whom the payment method is being created
     * @param {Object} opts Optional parameters
     * @param {module:model/PaymentMethodResource} opts.paymentMethod Payment method being created
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentMethodResource} and HTTP response
     */
    createPaymentMethodWithHttpInfo(userId, opts) {
      opts = opts || {};
      let postBody = opts['paymentMethod'];

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling createPaymentMethod");
      }


      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentMethodResource;

      return this.apiClient.callApi(
        '/users/{user_id}/payment-methods', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new payment method for a user
     * @param {Number} userId ID of the user for whom the payment method is being created
     * @param {Object} opts Optional parameters
     * @param {module:model/PaymentMethodResource} opts.paymentMethod Payment method being created
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentMethodResource}
     */
    createPaymentMethod(userId, opts) {
      return this.createPaymentMethodWithHttpInfo(userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an existing payment method for a user
     * @param {Number} userId ID of the user for whom the payment method is being updated
     * @param {Number} id ID of the payment method being deleted
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deletePaymentMethodWithHttpInfo(userId, id) {
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deletePaymentMethod");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletePaymentMethod");
      }


      let pathParams = {
        'user_id': userId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/payment-methods/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an existing payment method for a user
     * @param {Number} userId ID of the user for whom the payment method is being updated
     * @param {Number} id ID of the payment method being deleted
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deletePaymentMethod(userId, id) {
      return this.deletePaymentMethodWithHttpInfo(userId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single payment method for a user
     * @param {Number} userId ID of the user for whom the payment method is being retrieved
     * @param {Number} id ID of the payment method being retrieved
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentMethodResource} and HTTP response
     */
    getPaymentMethodWithHttpInfo(userId, id) {
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getPaymentMethod");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPaymentMethod");
      }


      let pathParams = {
        'user_id': userId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentMethodResource;

      return this.apiClient.callApi(
        '/users/{user_id}/payment-methods/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single payment method for a user
     * @param {Number} userId ID of the user for whom the payment method is being retrieved
     * @param {Number} id ID of the payment method being retrieved
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentMethodResource}
     */
    getPaymentMethod(userId, id) {
      return this.getPaymentMethodWithHttpInfo(userId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all payment methods for a user
     * @param {Number} userId ID of the user for whom the payment methods are being retrieved
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterName Filter for payment methods whose name starts with a given string
     * @param {module:model/String} opts.filterPaymentType Filter for payment methods with a specific payment type
     * @param {Number} opts.filterPaymentMethodTypeId Filter for payment methods with a specific payment method type by id
     * @param {String} opts.filterPaymentMethodTypeName Filter for payment methods whose payment method type name starts with a given string
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PaymentMethodResource>} and HTTP response
     */
    getPaymentMethodsWithHttpInfo(userId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getPaymentMethods");
      }


      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        'filter_name': opts['filterName'],
        'filter_payment_type': opts['filterPaymentType'],
        'filter_payment_method_type_id': opts['filterPaymentMethodTypeId'],
        'filter_payment_method_type_name': opts['filterPaymentMethodTypeName'],
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [PaymentMethodResource];

      return this.apiClient.callApi(
        '/users/{user_id}/payment-methods', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all payment methods for a user
     * @param {Number} userId ID of the user for whom the payment methods are being retrieved
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterName Filter for payment methods whose name starts with a given string
     * @param {module:model/String} opts.filterPaymentType Filter for payment methods with a specific payment type
     * @param {Number} opts.filterPaymentMethodTypeId Filter for payment methods with a specific payment method type by id
     * @param {String} opts.filterPaymentMethodTypeName Filter for payment methods whose payment method type name starts with a given string
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PaymentMethodResource>}
     */
    getPaymentMethods(userId, opts) {
      return this.getPaymentMethodsWithHttpInfo(userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Authorize payment of an invoice for later capture
     * @param {Object} opts Optional parameters
     * @param {module:model/PaymentAuthorizationResource} opts.request Payment authorization request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentAuthorizationResource} and HTTP response
     */
    paymentAuthorizationWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['request'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentAuthorizationResource;

      return this.apiClient.callApi(
        '/payment/authorizations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Authorize payment of an invoice for later capture
     * @param {Object} opts Optional parameters
     * @param {module:model/PaymentAuthorizationResource} opts.request Payment authorization request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentAuthorizationResource}
     */
    paymentAuthorization(opts) {
      return this.paymentAuthorizationWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Capture an existing invoice payment authorization
     * @param {Number} id ID of the payment authorization to capture
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    paymentCaptureWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling paymentCapture");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/payment/authorizations/{id}/capture', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Capture an existing invoice payment authorization
     * @param {Number} id ID of the payment authorization to capture
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    paymentCapture(id) {
      return this.paymentCaptureWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an existing payment method for a user
     * @param {Number} userId ID of the user for whom the payment method is being updated
     * @param {Number} id ID of the payment method being updated
     * @param {Object} opts Optional parameters
     * @param {module:model/PaymentMethodResource} opts.paymentMethod The updated payment method data
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentMethodResource} and HTTP response
     */
    updatePaymentMethodWithHttpInfo(userId, id, opts) {
      opts = opts || {};
      let postBody = opts['paymentMethod'];

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updatePaymentMethod");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatePaymentMethod");
      }


      let pathParams = {
        'user_id': userId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentMethodResource;

      return this.apiClient.callApi(
        '/users/{user_id}/payment-methods/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an existing payment method for a user
     * @param {Number} userId ID of the user for whom the payment method is being updated
     * @param {Number} id ID of the payment method being updated
     * @param {Object} opts Optional parameters
     * @param {module:model/PaymentMethodResource} opts.paymentMethod The updated payment method data
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentMethodResource}
     */
    updatePaymentMethod(userId, id, opts) {
      return this.updatePaymentMethodWithHttpInfo(userId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
