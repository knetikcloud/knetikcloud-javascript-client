/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateBillingAgreementRequest from '../model/CreateBillingAgreementRequest';
import CreatePayPalPaymentRequest from '../model/CreatePayPalPaymentRequest';
import FinalizeBillingAgreementRequest from '../model/FinalizeBillingAgreementRequest';
import FinalizePayPalPaymentRequest from '../model/FinalizePayPalPaymentRequest';
import Result from '../model/Result';

/**
* PaymentsPayPalClassic service.
* @module api/PaymentsPayPalClassicApi
* @version 3.0.7
*/
export default class PaymentsPayPalClassicApi {

    /**
    * Constructs a new PaymentsPayPalClassicApi. 
    * @alias module:api/PaymentsPayPalClassicApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a PayPal Classic billing agreement for the user
     * Returns the token that should be used to forward the user to PayPal so they can accept the agreement.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateBillingAgreementRequest} opts.request The request to create a PayPal billing agreement
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    createPayPalBillingAgreementUrlWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['request'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/payment/provider/paypal/classic/agreements/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a PayPal Classic billing agreement for the user
     * Returns the token that should be used to forward the user to PayPal so they can accept the agreement.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateBillingAgreementRequest} opts.request The request to create a PayPal billing agreement
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    createPayPalBillingAgreementUrl(opts) {
      return this.createPayPalBillingAgreementUrlWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a payment token for PayPal express checkout
     * Returns the token that should be used to forward the user to PayPal so they can complete the checkout.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreatePayPalPaymentRequest} opts.request The request to create a PayPal payment token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    createPayPalExpressCheckoutWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['request'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/payment/provider/paypal/classic/checkout/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a payment token for PayPal express checkout
     * Returns the token that should be used to forward the user to PayPal so they can complete the checkout.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreatePayPalPaymentRequest} opts.request The request to create a PayPal payment token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    createPayPalExpressCheckout(opts) {
      return this.createPayPalExpressCheckoutWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Finalizes a billing agreement after the user has accepted through PayPal
     * Returns the ID of the new payment method created for the user for the billing agreement.
     * @param {Object} opts Optional parameters
     * @param {module:model/FinalizeBillingAgreementRequest} opts.request The request to finalize a PayPal billing agreement
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'Number'} and HTTP response
     */
    finalizePayPalBillingAgreementWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['request'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Number';

      return this.apiClient.callApi(
        '/payment/provider/paypal/classic/agreements/finish', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Finalizes a billing agreement after the user has accepted through PayPal
     * Returns the ID of the new payment method created for the user for the billing agreement.
     * @param {Object} opts Optional parameters
     * @param {module:model/FinalizeBillingAgreementRequest} opts.request The request to finalize a PayPal billing agreement
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'Number'}
     */
    finalizePayPalBillingAgreement(opts) {
      return this.finalizePayPalBillingAgreementWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Finalizes a payment after the user has completed checkout with PayPal
     * The invoice will be marked paid/failed by asynchronous IPN callback.
     * @param {Object} opts Optional parameters
     * @param {module:model/FinalizePayPalPaymentRequest} opts.request The request to finalize the payment
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    finalizePayPalCheckoutWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['request'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/payment/provider/paypal/classic/checkout/finish', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Finalizes a payment after the user has completed checkout with PayPal
     * The invoice will be marked paid/failed by asynchronous IPN callback.
     * @param {Object} opts Optional parameters
     * @param {module:model/FinalizePayPalPaymentRequest} opts.request The request to finalize the payment
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    finalizePayPalCheckout(opts) {
      return this.finalizePayPalCheckoutWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
