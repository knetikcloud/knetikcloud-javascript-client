/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PageResourceSimpleWallet from '../model/PageResourceSimpleWallet';
import PageResourceWalletTotalResponse from '../model/PageResourceWalletTotalResponse';
import PageResourceWalletTransactionResource from '../model/PageResourceWalletTransactionResource';
import Result from '../model/Result';
import SimpleWallet from '../model/SimpleWallet';
import WalletAlterRequest from '../model/WalletAlterRequest';
import WalletTransactionResource from '../model/WalletTransactionResource';

/**
* PaymentsWallets service.
* @module api/PaymentsWalletsApi
* @version 3.0.7
*/
export default class PaymentsWalletsApi {

    /**
    * Constructs a new PaymentsWalletsApi. 
    * @alias module:api/PaymentsWalletsApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Returns the user&#39;s wallet for the given currency code
     * @param {Number} userId The ID of the user for whom wallet is being retrieved
     * @param {String} currencyCode Currency code of the user&#39;s wallet
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SimpleWallet} and HTTP response
     */
    getUserWalletWithHttpInfo(userId, currencyCode) {
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserWallet");
      }

      // verify the required parameter 'currencyCode' is set
      if (currencyCode === undefined || currencyCode === null) {
        throw new Error("Missing the required parameter 'currencyCode' when calling getUserWallet");
      }


      let pathParams = {
        'user_id': userId,
        'currency_code': currencyCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SimpleWallet;

      return this.apiClient.callApi(
        '/users/{user_id}/wallets/{currency_code}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns the user&#39;s wallet for the given currency code
     * @param {Number} userId The ID of the user for whom wallet is being retrieved
     * @param {String} currencyCode Currency code of the user&#39;s wallet
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SimpleWallet}
     */
    getUserWallet(userId, currencyCode) {
      return this.getUserWalletWithHttpInfo(userId, currencyCode)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a user&#39;s wallet transactions
     * @param {Number} userId The ID of the user for whom wallet transactions are being retrieved
     * @param {String} currencyCode Currency code of the user&#39;s wallet
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterType Filter for transactions with specified type
     * @param {Number} opts.filterMaxDate Filter for transactions from no earlier than the specified date as a unix timestamp in seconds
     * @param {Number} opts.filterMinDate Filter for transactions from no later than the specified date as a unix timestamp in seconds
     * @param {String} opts.filterSign Filter for transactions with amount with the given sign.  Allowable values: (&#39;positive&#39;, &#39;negative&#39;)
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceWalletTransactionResource} and HTTP response
     */
    getUserWalletTransactionsWithHttpInfo(userId, currencyCode, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserWalletTransactions");
      }

      // verify the required parameter 'currencyCode' is set
      if (currencyCode === undefined || currencyCode === null) {
        throw new Error("Missing the required parameter 'currencyCode' when calling getUserWalletTransactions");
      }


      let pathParams = {
        'user_id': userId,
        'currency_code': currencyCode
      };
      let queryParams = {
        'filter_type': opts['filterType'],
        'filter_max_date': opts['filterMaxDate'],
        'filter_min_date': opts['filterMinDate'],
        'filter_sign': opts['filterSign'],
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageResourceWalletTransactionResource;

      return this.apiClient.callApi(
        '/users/{user_id}/wallets/{currency_code}/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve a user&#39;s wallet transactions
     * @param {Number} userId The ID of the user for whom wallet transactions are being retrieved
     * @param {String} currencyCode Currency code of the user&#39;s wallet
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterType Filter for transactions with specified type
     * @param {Number} opts.filterMaxDate Filter for transactions from no earlier than the specified date as a unix timestamp in seconds
     * @param {Number} opts.filterMinDate Filter for transactions from no later than the specified date as a unix timestamp in seconds
     * @param {String} opts.filterSign Filter for transactions with amount with the given sign.  Allowable values: (&#39;positive&#39;, &#39;negative&#39;)
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceWalletTransactionResource}
     */
    getUserWalletTransactions(userId, currencyCode, opts) {
      return this.getUserWalletTransactionsWithHttpInfo(userId, currencyCode, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all of a user&#39;s wallets
     * @param {Number} userId The ID of the user for whom wallets are being retrieved
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/SimpleWallet>} and HTTP response
     */
    getUserWalletsWithHttpInfo(userId) {
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserWallets");
      }


      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [SimpleWallet];

      return this.apiClient.callApi(
        '/users/{user_id}/wallets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List all of a user&#39;s wallets
     * @param {Number} userId The ID of the user for whom wallets are being retrieved
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/SimpleWallet>}
     */
    getUserWallets(userId) {
      return this.getUserWalletsWithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves a summation of wallet balances by currency code
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceWalletTotalResponse} and HTTP response
     */
    getWalletBalancesWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageResourceWalletTotalResponse;

      return this.apiClient.callApi(
        '/wallets/totals', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieves a summation of wallet balances by currency code
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceWalletTotalResponse}
     */
    getWalletBalances() {
      return this.getWalletBalancesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve wallet transactions across the system
     * @param {Object} opts Optional parameters
     * @param {Number} opts.filterInvoice Filter for transactions from a specific invoice
     * @param {String} opts.filterType Filter for transactions with specified type
     * @param {String} opts.filterDate A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds. Can be repeated for a range, eg: GT,123,LT,456  Allowed operators: (GT, LT, EQ, GOE, LOE).
     * @param {module:model/String} opts.filterSign Filter for transactions with amount with the given sign
     * @param {Number} opts.filterUserId Filter for transactions for specific userId
     * @param {String} opts.filterUsername Filter for transactions for specific username that start with the given string
     * @param {String} opts.filterDetails Filter for transactions for specific details that start with the given string
     * @param {String} opts.filterCurrencyCode Filter for transactions for specific currency code
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceWalletTransactionResource} and HTTP response
     */
    getWalletTransactionsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'filter_invoice': opts['filterInvoice'],
        'filter_type': opts['filterType'],
        'filter_date': opts['filterDate'],
        'filter_sign': opts['filterSign'],
        'filter_user_id': opts['filterUserId'],
        'filter_username': opts['filterUsername'],
        'filter_details': opts['filterDetails'],
        'filter_currency_code': opts['filterCurrencyCode'],
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageResourceWalletTransactionResource;

      return this.apiClient.callApi(
        '/wallets/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve wallet transactions across the system
     * @param {Object} opts Optional parameters
     * @param {Number} opts.filterInvoice Filter for transactions from a specific invoice
     * @param {String} opts.filterType Filter for transactions with specified type
     * @param {String} opts.filterDate A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds. Can be repeated for a range, eg: GT,123,LT,456  Allowed operators: (GT, LT, EQ, GOE, LOE).
     * @param {module:model/String} opts.filterSign Filter for transactions with amount with the given sign
     * @param {Number} opts.filterUserId Filter for transactions for specific userId
     * @param {String} opts.filterUsername Filter for transactions for specific username that start with the given string
     * @param {String} opts.filterDetails Filter for transactions for specific details that start with the given string
     * @param {String} opts.filterCurrencyCode Filter for transactions for specific currency code
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceWalletTransactionResource}
     */
    getWalletTransactions(opts) {
      return this.getWalletTransactionsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a list of wallets across the system
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceSimpleWallet} and HTTP response
     */
    getWalletsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageResourceSimpleWallet;

      return this.apiClient.callApi(
        '/wallets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve a list of wallets across the system
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceSimpleWallet}
     */
    getWallets(opts) {
      return this.getWalletsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the balance for a user&#39;s wallet
     * @param {Number} userId The ID of the user for whom wallet is being modified
     * @param {String} currencyCode Currency code of the user&#39;s wallet
     * @param {Object} opts Optional parameters
     * @param {module:model/WalletAlterRequest} opts.request The requested balance modification to be made to the user&#39;s wallet
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WalletTransactionResource} and HTTP response
     */
    updateWalletBalanceWithHttpInfo(userId, currencyCode, opts) {
      opts = opts || {};
      let postBody = opts['request'];

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateWalletBalance");
      }

      // verify the required parameter 'currencyCode' is set
      if (currencyCode === undefined || currencyCode === null) {
        throw new Error("Missing the required parameter 'currencyCode' when calling updateWalletBalance");
      }


      let pathParams = {
        'user_id': userId,
        'currency_code': currencyCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WalletTransactionResource;

      return this.apiClient.callApi(
        '/users/{user_id}/wallets/{currency_code}/balance', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates the balance for a user&#39;s wallet
     * @param {Number} userId The ID of the user for whom wallet is being modified
     * @param {String} currencyCode Currency code of the user&#39;s wallet
     * @param {Object} opts Optional parameters
     * @param {module:model/WalletAlterRequest} opts.request The requested balance modification to be made to the user&#39;s wallet
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WalletTransactionResource}
     */
    updateWalletBalance(userId, currencyCode, opts) {
      return this.updateWalletBalanceWithHttpInfo(userId, currencyCode, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
