/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PageResourceMapstringobject from '../model/PageResourceMapstringobject';
import Result from '../model/Result';
import SearchReferenceMapping from '../model/SearchReferenceMapping';

/**
* Search service.
* @module api/SearchApi
* @version 3.0.7
*/
export default class SearchApi {

    /**
    * Constructs a new SearchApi. 
    * @alias module:api/SearchApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add a new object to an index
     * Mainly intended for internal use.
     * @param {String} type The index type
     * @param {String} id The ID of the object
     * @param {Object} opts Optional parameters
     * @param {Object} opts._object The object to add
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addSearchIndexWithHttpInfo(type, id, opts) {
      opts = opts || {};
      let postBody = opts['_object'];

      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling addSearchIndex");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addSearchIndex");
      }


      let pathParams = {
        'type': type,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/search/index/{type}/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add a new object to an index
     * Mainly intended for internal use.
     * @param {String} type The index type
     * @param {String} id The ID of the object
     * @param {Object} opts Optional parameters
     * @param {Object} opts._object The object to add
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addSearchIndex(type, id, opts) {
      return this.addSearchIndexWithHttpInfo(type, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Register reference mappings
     * Add a new type mapping to connect data from one index to another, or discover an exsting one. Mainly intended for internal use.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/SearchReferenceMapping>} opts.mappings The mappings to add
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addSearchMappingsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['mappings'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/search/mappings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Register reference mappings
     * Add a new type mapping to connect data from one index to another, or discover an exsting one. Mainly intended for internal use.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/SearchReferenceMapping>} opts.mappings The mappings to add
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addSearchMappings(opts) {
      return this.addSearchMappingsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an object
     * Mainly intended for internal use. Requires SEARCH_ADMIN.
     * @param {String} type The index type
     * @param {String} id The ID of the object to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteSearchIndexWithHttpInfo(type, id) {
      let postBody = null;

      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling deleteSearchIndex");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSearchIndex");
      }


      let pathParams = {
        'type': type,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/search/index/{type}/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an object
     * Mainly intended for internal use. Requires SEARCH_ADMIN.
     * @param {String} type The index type
     * @param {String} id The ID of the object to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteSearchIndex(type, id) {
      return this.deleteSearchIndexWithHttpInfo(type, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete all objects in an index
     * Mainly intended for internal use
     * @param {String} type The index type
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteSearchIndexesWithHttpInfo(type) {
      let postBody = null;

      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling deleteSearchIndexes");
      }


      let pathParams = {
        'type': type
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/search/index/{type}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete all objects in an index
     * Mainly intended for internal use
     * @param {String} type The index type
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteSearchIndexes(type) {
      return this.deleteSearchIndexesWithHttpInfo(type)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search an index
     * The body is an ElasticSearch query in JSON format. Please see their &lt;a href&#x3D;&#39;https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html&#39;&gt;documentation&lt;/a&gt; for details on the format and search options. The searchable object&#39;s format depends on on the type. See individual search endpoints on other resources for details on their format.
     * @param {String} type The index type
     * @param {Object} opts Optional parameters
     * @param {Object} opts.query The query to be used for the search
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceMapstringobject} and HTTP response
     */
    searchIndexWithHttpInfo(type, opts) {
      opts = opts || {};
      let postBody = opts['query'];

      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling searchIndex");
      }


      let pathParams = {
        'type': type
      };
      let queryParams = {
        'size': opts['size'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageResourceMapstringobject;

      return this.apiClient.callApi(
        '/search/index/{type}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Search an index
     * The body is an ElasticSearch query in JSON format. Please see their &lt;a href&#x3D;&#39;https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html&#39;&gt;documentation&lt;/a&gt; for details on the format and search options. The searchable object&#39;s format depends on on the type. See individual search endpoints on other resources for details on their format.
     * @param {String} type The index type
     * @param {Object} opts Optional parameters
     * @param {Object} opts.query The query to be used for the search
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceMapstringobject}
     */
    searchIndex(type, opts) {
      return this.searchIndexWithHttpInfo(type, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
