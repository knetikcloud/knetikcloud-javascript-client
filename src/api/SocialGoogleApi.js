/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GoogleToken from '../model/GoogleToken';
import Result from '../model/Result';

/**
* SocialGoogle service.
* @module api/SocialGoogleApi
* @version 3.0.7
*/
export default class SocialGoogleApi {

    /**
    * Constructs a new SocialGoogleApi. 
    * @alias module:api/SocialGoogleApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Link google account
     * Links the current user account to a google account, using the acccess token from google. Can also be used to update the access token after it has expired.
     * @param {Object} opts Optional parameters
     * @param {module:model/GoogleToken} opts.googleToken The token from google
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    linkAccounts1WithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['googleToken'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/social/google/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Link google account
     * Links the current user account to a google account, using the acccess token from google. Can also be used to update the access token after it has expired.
     * @param {Object} opts Optional parameters
     * @param {module:model/GoogleToken} opts.googleToken The token from google
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    linkAccounts1(opts) {
      return this.linkAccounts1WithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
