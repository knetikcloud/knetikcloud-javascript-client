/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BehaviorDefinitionResource from '../model/BehaviorDefinitionResource';
import InvoiceResource from '../model/InvoiceResource';
import PageResourceStoreItem from '../model/PageResourceStoreItem';
import PageResourceStoreItemTemplateResource from '../model/PageResourceStoreItemTemplateResource';
import QuickBuyRequest from '../model/QuickBuyRequest';
import Result from '../model/Result';
import StoreItem from '../model/StoreItem';
import StoreItemTemplateResource from '../model/StoreItemTemplateResource';

/**
* Store service.
* @module api/StoreApi
* @version 3.0.7
*/
export default class StoreApi {

    /**
    * Constructs a new StoreApi. 
    * @alias module:api/StoreApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create an item template
     * Item Templates define a type of item and the properties they have.
     * @param {Object} opts Optional parameters
     * @param {module:model/StoreItemTemplateResource} opts.itemTemplateResource The new item template
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StoreItemTemplateResource} and HTTP response
     */
    createItemTemplateWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['itemTemplateResource'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StoreItemTemplateResource;

      return this.apiClient.callApi(
        '/store/items/templates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create an item template
     * Item Templates define a type of item and the properties they have.
     * @param {Object} opts Optional parameters
     * @param {module:model/StoreItemTemplateResource} opts.itemTemplateResource The new item template
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StoreItemTemplateResource}
     */
    createItemTemplate(opts) {
      return this.createItemTemplateWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a store item
     * SKUs have to be unique in the entire store. If a duplicate SKU is found, a 400 error is generated and the response will have a \&quot;parameters\&quot; field that is a list of duplicates. A duplicate is an object like {item_id, offending_sku_list}. Ex:&lt;br /&gt; {..., parameters: [[{item: 1, skus: [\&quot;SKU-1\&quot;]}]]}&lt;br /&gt; If an item is brand new and has duplicate SKUs within itself, the item ID will be 0.  Item subclasses are not allowed here, you will have to use their respective endpoints.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.cascade Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values. (default to false)
     * @param {module:model/StoreItem} opts.storeItem The store item object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StoreItem} and HTTP response
     */
    createStoreItemWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['storeItem'];


      let pathParams = {
      };
      let queryParams = {
        'cascade': opts['cascade']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StoreItem;

      return this.apiClient.callApi(
        '/store/items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a store item
     * SKUs have to be unique in the entire store. If a duplicate SKU is found, a 400 error is generated and the response will have a \&quot;parameters\&quot; field that is a list of duplicates. A duplicate is an object like {item_id, offending_sku_list}. Ex:&lt;br /&gt; {..., parameters: [[{item: 1, skus: [\&quot;SKU-1\&quot;]}]]}&lt;br /&gt; If an item is brand new and has duplicate SKUs within itself, the item ID will be 0.  Item subclasses are not allowed here, you will have to use their respective endpoints.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.cascade Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values. (default to false)
     * @param {module:model/StoreItem} opts.storeItem The store item object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StoreItem}
     */
    createStoreItem(opts) {
      return this.createStoreItemWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an item template
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {String} opts.cascade force deleting the template if it&#39;s attached to other objects, cascade &#x3D; detach
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteItemTemplateWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteItemTemplate");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'cascade': opts['cascade']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/store/items/templates/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an item template
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {String} opts.cascade force deleting the template if it&#39;s attached to other objects, cascade &#x3D; detach
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteItemTemplate(id, opts) {
      return this.deleteItemTemplateWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a store item
     * @param {Number} id The id of the item
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteStoreItemWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteStoreItem");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/store/items/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a store item
     * @param {Number} id The id of the item
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteStoreItem(id) {
      return this.deleteStoreItemWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List available item behaviors
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/BehaviorDefinitionResource>} and HTTP response
     */
    getBehaviorsWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [BehaviorDefinitionResource];

      return this.apiClient.callApi(
        '/store/items/behaviors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List available item behaviors
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/BehaviorDefinitionResource>}
     */
    getBehaviors() {
      return this.getBehaviorsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single item template
     * Item Templates define a type of item and the properties they have.
     * @param {String} id The id of the template
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StoreItemTemplateResource} and HTTP response
     */
    getItemTemplateWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getItemTemplate");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StoreItemTemplateResource;

      return this.apiClient.callApi(
        '/store/items/templates/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single item template
     * Item Templates define a type of item and the properties they have.
     * @param {String} id The id of the template
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StoreItemTemplateResource}
     */
    getItemTemplate(id) {
      return this.getItemTemplateWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List and search item templates
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceStoreItemTemplateResource} and HTTP response
     */
    getItemTemplatesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageResourceStoreItemTemplateResource;

      return this.apiClient.callApi(
        '/store/items/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List and search item templates
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceStoreItemTemplateResource}
     */
    getItemTemplates(opts) {
      return this.getItemTemplatesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a listing of store items
     * The exact structure of each items may differ to include fields specific to the type. The same is true for behaviors.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The amount of items returned
     * @param {Number} opts.page The page of the request
     * @param {Boolean} opts.useCatalog Whether to remove items that are not intended for display or not in date
     * @param {Boolean} opts.ignoreLocation Whether to ignore country restrictions based on the caller&#39;s location
     * @param {Boolean} opts.inStockOnly Whether only in-stock items should be returned.  Default value is false (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceStoreItem} and HTTP response
     */
    getStoreWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'use_catalog': opts['useCatalog'],
        'ignore_location': opts['ignoreLocation'],
        'in_stock_only': opts['inStockOnly']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageResourceStoreItem;

      return this.apiClient.callApi(
        '/store', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a listing of store items
     * The exact structure of each items may differ to include fields specific to the type. The same is true for behaviors.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The amount of items returned
     * @param {Number} opts.page The page of the request
     * @param {Boolean} opts.useCatalog Whether to remove items that are not intended for display or not in date
     * @param {Boolean} opts.ignoreLocation Whether to ignore country restrictions based on the caller&#39;s location
     * @param {Boolean} opts.inStockOnly Whether only in-stock items should be returned.  Default value is false (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceStoreItem}
     */
    getStore(opts) {
      return this.getStoreWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single store item
     * @param {Number} id The id of the item
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StoreItem} and HTTP response
     */
    getStoreItemWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getStoreItem");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StoreItem;

      return this.apiClient.callApi(
        '/store/items/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single store item
     * @param {Number} id The id of the item
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StoreItem}
     */
    getStoreItem(id) {
      return this.getStoreItemWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List and search store items
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterNameSearch Filter for items whose name starts with a given string.
     * @param {String} opts.filterUniqueKey Filter for items whose unique_key is a given string.
     * @param {Boolean} opts.filterPublished Filter for skus that have been published.
     * @param {Boolean} opts.filterDisplayable Filter for items that are displayable.
     * @param {String} opts.filterStart A comma separated string without spaces.  First value is the operator to search on, second value is the store start date, a unix timestamp in seconds.  Allowed operators: (LT, GT, LTE, GTE, EQ).
     * @param {String} opts.filterEnd A comma separated string without spaces.  First value is the operator to search on, second value is the store end date, a unix timestamp in seconds.  Allowed operators: (LT, GT, LTE, GTE, EQ).
     * @param {String} opts.filterStartDate A comma separated string without spaces.  First value is the operator to search on, second value is the sku start date, a unix timestamp in seconds.  Allowed operators: (LT, GT, LTE, GTE, EQ).
     * @param {String} opts.filterStopDate A comma separated string without spaces.  First value is the operator to search on, second value is the sku end date, a unix timestamp in seconds.  Allowed operators: (LT, GT, LTE, GTE, EQ).
     * @param {String} opts.filterSku Filter for skus whose name starts with a given string.
     * @param {String} opts.filterPrice A colon separated string without spaces.  First value is the operator to search on, second value is the price of a sku.  Allowed operators: (LT, GT, LTE, GTE, EQ).
     * @param {String} opts.filterTag A comma separated list without spaces of the names of tags. Will only return items with at least one of the tags.
     * @param {String} opts.filterItemsByType Filter for item type based on its type hint.
     * @param {String} opts.filterBundledSkus Filter for skus inside bundles whose name starts with a given string.  Used only when type hint is &#39;bundle_item&#39;
     * @param {Number} opts.filterVendor Filter for items from a given vendor, by id.
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceStoreItem} and HTTP response
     */
    getStoreItemsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'filter_name_search': opts['filterNameSearch'],
        'filter_unique_key': opts['filterUniqueKey'],
        'filter_published': opts['filterPublished'],
        'filter_displayable': opts['filterDisplayable'],
        'filter_start': opts['filterStart'],
        'filter_end': opts['filterEnd'],
        'filter_start_date': opts['filterStartDate'],
        'filter_stop_date': opts['filterStopDate'],
        'filter_sku': opts['filterSku'],
        'filter_price': opts['filterPrice'],
        'filter_tag': opts['filterTag'],
        'filter_items_by_type': opts['filterItemsByType'],
        'filter_bundled_skus': opts['filterBundledSkus'],
        'filter_vendor': opts['filterVendor'],
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageResourceStoreItem;

      return this.apiClient.callApi(
        '/store/items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List and search store items
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterNameSearch Filter for items whose name starts with a given string.
     * @param {String} opts.filterUniqueKey Filter for items whose unique_key is a given string.
     * @param {Boolean} opts.filterPublished Filter for skus that have been published.
     * @param {Boolean} opts.filterDisplayable Filter for items that are displayable.
     * @param {String} opts.filterStart A comma separated string without spaces.  First value is the operator to search on, second value is the store start date, a unix timestamp in seconds.  Allowed operators: (LT, GT, LTE, GTE, EQ).
     * @param {String} opts.filterEnd A comma separated string without spaces.  First value is the operator to search on, second value is the store end date, a unix timestamp in seconds.  Allowed operators: (LT, GT, LTE, GTE, EQ).
     * @param {String} opts.filterStartDate A comma separated string without spaces.  First value is the operator to search on, second value is the sku start date, a unix timestamp in seconds.  Allowed operators: (LT, GT, LTE, GTE, EQ).
     * @param {String} opts.filterStopDate A comma separated string without spaces.  First value is the operator to search on, second value is the sku end date, a unix timestamp in seconds.  Allowed operators: (LT, GT, LTE, GTE, EQ).
     * @param {String} opts.filterSku Filter for skus whose name starts with a given string.
     * @param {String} opts.filterPrice A colon separated string without spaces.  First value is the operator to search on, second value is the price of a sku.  Allowed operators: (LT, GT, LTE, GTE, EQ).
     * @param {String} opts.filterTag A comma separated list without spaces of the names of tags. Will only return items with at least one of the tags.
     * @param {String} opts.filterItemsByType Filter for item type based on its type hint.
     * @param {String} opts.filterBundledSkus Filter for skus inside bundles whose name starts with a given string.  Used only when type hint is &#39;bundle_item&#39;
     * @param {Number} opts.filterVendor Filter for items from a given vendor, by id.
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceStoreItem}
     */
    getStoreItems(opts) {
      return this.getStoreItemsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * One-step purchase and pay for a single SKU item from a user&#39;s wallet
     * Used to create and automatically pay an invoice for a single unit of a single SKU from a user&#39;s wallet. SKU must be priced in virtual currency and must not be an item that requires shipping. PAYMENTS_ADMIN permission is required if user ID is specified and is not the ID of the currently logged in user. If invoice price does not match expected price, purchase is aborted
     * @param {Object} opts Optional parameters
     * @param {module:model/QuickBuyRequest} opts.quickBuyRequest Quick buy details
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InvoiceResource} and HTTP response
     */
    quickBuyWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['quickBuyRequest'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InvoiceResource;

      return this.apiClient.callApi(
        '/store/quick-buy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * One-step purchase and pay for a single SKU item from a user&#39;s wallet
     * Used to create and automatically pay an invoice for a single unit of a single SKU from a user&#39;s wallet. SKU must be priced in virtual currency and must not be an item that requires shipping. PAYMENTS_ADMIN permission is required if user ID is specified and is not the ID of the currently logged in user. If invoice price does not match expected price, purchase is aborted
     * @param {Object} opts Optional parameters
     * @param {module:model/QuickBuyRequest} opts.quickBuyRequest Quick buy details
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InvoiceResource}
     */
    quickBuy(opts) {
      return this.quickBuyWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an item template
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {module:model/StoreItemTemplateResource} opts.itemTemplateResource The item template resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StoreItemTemplateResource} and HTTP response
     */
    updateItemTemplateWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['itemTemplateResource'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateItemTemplate");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StoreItemTemplateResource;

      return this.apiClient.callApi(
        '/store/items/templates/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an item template
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {module:model/StoreItemTemplateResource} opts.itemTemplateResource The item template resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StoreItemTemplateResource}
     */
    updateItemTemplate(id, opts) {
      return this.updateItemTemplateWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a store item
     * @param {Number} id The id of the item
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.cascade Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values. (default to false)
     * @param {module:model/StoreItem} opts.storeItem The store item object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StoreItem} and HTTP response
     */
    updateStoreItemWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['storeItem'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateStoreItem");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'cascade': opts['cascade']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StoreItem;

      return this.apiClient.callApi(
        '/store/items/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a store item
     * @param {Number} id The id of the item
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.cascade Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values. (default to false)
     * @param {module:model/StoreItem} opts.storeItem The store item object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StoreItem}
     */
    updateStoreItem(id, opts) {
      return this.updateStoreItemWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
