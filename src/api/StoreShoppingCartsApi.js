/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Cart from '../model/Cart';
import CartItemRequest from '../model/CartItemRequest';
import CartShippableResponse from '../model/CartShippableResponse';
import CartShippingAddressRequest from '../model/CartShippingAddressRequest';
import CouponDefinition from '../model/CouponDefinition';
import IntWrapper from '../model/IntWrapper';
import PageResourceCartSummary from '../model/PageResourceCartSummary';
import Result from '../model/Result';
import SampleCountriesResponse from '../model/SampleCountriesResponse';
import SkuRequest from '../model/SkuRequest';
import StringWrapper from '../model/StringWrapper';

/**
* StoreShoppingCarts service.
* @module api/StoreShoppingCartsApi
* @version 3.0.7
*/
export default class StoreShoppingCartsApi {

    /**
    * Constructs a new StoreShoppingCartsApi. 
    * @alias module:api/StoreShoppingCartsApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Adds a custom discount to the cart
     * @param {String} id The id of the cart
     * @param {Object} opts Optional parameters
     * @param {module:model/CouponDefinition} opts.customDiscount The details of the discount to add
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addCustomDiscountWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['customDiscount'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addCustomDiscount");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/carts/{id}/custom-discounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Adds a custom discount to the cart
     * @param {String} id The id of the cart
     * @param {Object} opts Optional parameters
     * @param {module:model/CouponDefinition} opts.customDiscount The details of the discount to add
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addCustomDiscount(id, opts) {
      return this.addCustomDiscountWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Adds a discount coupon to the cart
     * @param {String} id The id of the cart
     * @param {Object} opts Optional parameters
     * @param {module:model/SkuRequest} opts.skuRequest The request of the sku
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addDiscountToCartWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['skuRequest'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addDiscountToCart");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/carts/{id}/discounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Adds a discount coupon to the cart
     * @param {String} id The id of the cart
     * @param {Object} opts Optional parameters
     * @param {module:model/SkuRequest} opts.skuRequest The request of the sku
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addDiscountToCart(id, opts) {
      return this.addDiscountToCartWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add an item to the cart
     * Currently, carts cannot contain virtual and real currency items at the same time. Furthermore, the API only support a single virtual item at the moment
     * @param {String} id The id of the cart
     * @param {Object} opts Optional parameters
     * @param {module:model/CartItemRequest} opts.cartItemRequest The cart item request object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addItemToCartWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['cartItemRequest'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addItemToCart");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/carts/{id}/items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add an item to the cart
     * Currently, carts cannot contain virtual and real currency items at the same time. Furthermore, the API only support a single virtual item at the moment
     * @param {String} id The id of the cart
     * @param {Object} opts Optional parameters
     * @param {module:model/CartItemRequest} opts.cartItemRequest The cart item request object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addItemToCart(id, opts) {
      return this.addItemToCartWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a cart
     * You don&#39;t have to have a user to create a cart but the API requires authentication to checkout
     * @param {Object} opts Optional parameters
     * @param {Number} opts.owner Set the owner of a cart. If not specified, defaults to the calling user&#39;s id. If specified and is not the calling user&#39;s id, SHOPPING_CARTS_ADMIN permission is required
     * @param {String} opts.currencyCode Set the currency for the cart, by currency code. May be disallowed by site settings.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    createCartWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'owner': opts['owner'],
        'currency_code': opts['currencyCode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/carts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a cart
     * You don&#39;t have to have a user to create a cart but the API requires authentication to checkout
     * @param {Object} opts Optional parameters
     * @param {Number} opts.owner Set the owner of a cart. If not specified, defaults to the calling user&#39;s id. If specified and is not the calling user&#39;s id, SHOPPING_CARTS_ADMIN permission is required
     * @param {String} opts.currencyCode Set the currency for the cart, by currency code. May be disallowed by site settings.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    createCart(opts) {
      return this.createCartWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the cart with the given GUID
     * @param {String} id The id of the cart
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Cart} and HTTP response
     */
    getCartWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCart");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Cart;

      return this.apiClient.callApi(
        '/carts/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns the cart with the given GUID
     * @param {String} id The id of the cart
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Cart}
     */
    getCart(id) {
      return this.getCartWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a list of carts
     * @param {Object} opts Optional parameters
     * @param {Number} opts.filterOwnerId Filter by the id of the owner
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceCartSummary} and HTTP response
     */
    getCartsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'filter_owner_id': opts['filterOwnerId'],
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageResourceCartSummary;

      return this.apiClient.callApi(
        '/carts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a list of carts
     * @param {Object} opts Optional parameters
     * @param {Number} opts.filterOwnerId Filter by the id of the owner
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceCartSummary}
     */
    getCarts(opts) {
      return this.getCartsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns whether a cart requires shipping
     * @param {String} id The id of the cart
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CartShippableResponse} and HTTP response
     */
    getShippableWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getShippable");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CartShippableResponse;

      return this.apiClient.callApi(
        '/carts/{id}/shippable', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns whether a cart requires shipping
     * @param {String} id The id of the cart
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CartShippableResponse}
     */
    getShippable(id) {
      return this.getShippableWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the list of available shipping countries per vendor
     * Since a cart can have multiple vendors with different shipping options, the countries are broken down by vendors. Please see notes about the response object as the fields are variable.
     * @param {String} id The id of the cart
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SampleCountriesResponse} and HTTP response
     */
    getShippingCountriesWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getShippingCountries");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SampleCountriesResponse;

      return this.apiClient.callApi(
        '/carts/{id}/countries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the list of available shipping countries per vendor
     * Since a cart can have multiple vendors with different shipping options, the countries are broken down by vendors. Please see notes about the response object as the fields are variable.
     * @param {String} id The id of the cart
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SampleCountriesResponse}
     */
    getShippingCountries(id) {
      return this.getShippingCountriesWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Removes a discount coupon from the cart
     * @param {String} id The id of the cart
     * @param {String} code The SKU code of the coupon to remove
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeDiscountFromCartWithHttpInfo(id, code) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeDiscountFromCart");
      }

      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling removeDiscountFromCart");
      }


      let pathParams = {
        'id': id,
        'code': code
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/carts/{id}/discounts/{code}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Removes a discount coupon from the cart
     * @param {String} id The id of the cart
     * @param {String} code The SKU code of the coupon to remove
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeDiscountFromCart(id, code) {
      return this.removeDiscountFromCartWithHttpInfo(id, code)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Sets the currency to use for the cart
     * May be disallowed by site settings.
     * @param {String} id The id of the cart
     * @param {Object} opts Optional parameters
     * @param {module:model/StringWrapper} opts.currencyCode The code of the currency
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setCartCurrencyWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['currencyCode'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setCartCurrency");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/carts/{id}/currency', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Sets the currency to use for the cart
     * May be disallowed by site settings.
     * @param {String} id The id of the cart
     * @param {Object} opts Optional parameters
     * @param {module:model/StringWrapper} opts.currencyCode The code of the currency
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setCartCurrency(id, opts) {
      return this.setCartCurrencyWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Sets the owner of a cart if none is set already
     * @param {String} id The id of the cart
     * @param {Object} opts Optional parameters
     * @param {module:model/IntWrapper} opts.userId The id of the user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setCartOwnerWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['userId'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setCartOwner");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/carts/{id}/owner', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Sets the owner of a cart if none is set already
     * @param {String} id The id of the cart
     * @param {Object} opts Optional parameters
     * @param {module:model/IntWrapper} opts.userId The id of the user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setCartOwner(id, opts) {
      return this.setCartOwnerWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Changes the quantity of an item already in the cart
     * A quantity of zero will remove the item from the cart altogether.
     * @param {String} id The id of the cart
     * @param {Object} opts Optional parameters
     * @param {module:model/CartItemRequest} opts.cartItemRequest The cart item request object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateItemInCartWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['cartItemRequest'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateItemInCart");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/carts/{id}/items', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Changes the quantity of an item already in the cart
     * A quantity of zero will remove the item from the cart altogether.
     * @param {String} id The id of the cart
     * @param {Object} opts Optional parameters
     * @param {module:model/CartItemRequest} opts.cartItemRequest The cart item request object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateItemInCart(id, opts) {
      return this.updateItemInCartWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modifies or sets the order shipping address
     * @param {String} id The id of the cart
     * @param {Object} opts Optional parameters
     * @param {module:model/CartShippingAddressRequest} opts.cartShippingAddressRequest The cart shipping address request object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateShippingAddressWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['cartShippingAddressRequest'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateShippingAddress");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/carts/{id}/shipping-address', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Modifies or sets the order shipping address
     * @param {String} id The id of the cart
     * @param {Object} opts Optional parameters
     * @param {module:model/CartShippingAddressRequest} opts.cartShippingAddressRequest The cart shipping address request object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateShippingAddress(id, opts) {
      return this.updateShippingAddressWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
