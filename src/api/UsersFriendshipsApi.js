/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PageResourceSimpleUserResource from '../model/PageResourceSimpleUserResource';
import Result from '../model/Result';
import StringWrapper from '../model/StringWrapper';

/**
* UsersFriendships service.
* @module api/UsersFriendshipsApi
* @version 3.0.7
*/
export default class UsersFriendshipsApi {

    /**
    * Constructs a new UsersFriendshipsApi. 
    * @alias module:api/UsersFriendshipsApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add a friend
     * As a user, either creates or confirm a pending request. As an admin, call this endpoint twice while inverting the IDs to create a confirmed friendship.
     * @param {String} userId The id of the user or &#39;me&#39; if logged in
     * @param {Number} id The id of the user to befriend
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addFriendWithHttpInfo(userId, id) {
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling addFriend");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addFriend");
      }


      let pathParams = {
        'user_id': userId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/friends/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add a friend
     * As a user, either creates or confirm a pending request. As an admin, call this endpoint twice while inverting the IDs to create a confirmed friendship.
     * @param {String} userId The id of the user or &#39;me&#39; if logged in
     * @param {Number} id The id of the user to befriend
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addFriend(userId, id) {
      return this.addFriendWithHttpInfo(userId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get friends list
     * @param {String} userId The id of the user or &#39;me&#39;
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceSimpleUserResource} and HTTP response
     */
    getFriendsWithHttpInfo(userId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getFriends");
      }


      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        'size': opts['size'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageResourceSimpleUserResource;

      return this.apiClient.callApi(
        '/users/{user_id}/friends', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get friends list
     * @param {String} userId The id of the user or &#39;me&#39;
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceSimpleUserResource}
     */
    getFriends(userId, opts) {
      return this.getFriendsWithHttpInfo(userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the invite token
     * This is a unique invite token that allows direct connection to the request user.  Exposing that token presents privacy issues if the token is leaked. Use friend request flow instead if confirmation is required
     * @param {String} userId The id of the user or &#39;me&#39; if logged in
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    getInviteTokenWithHttpInfo(userId) {
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getInviteToken");
      }


      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/users/{user_id}/invite-token', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns the invite token
     * This is a unique invite token that allows direct connection to the request user.  Exposing that token presents privacy issues if the token is leaked. Use friend request flow instead if confirmation is required
     * @param {String} userId The id of the user or &#39;me&#39; if logged in
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    getInviteToken(userId) {
      return this.getInviteTokenWithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get pending invites
     * Invites that the specified user received
     * @param {String} userId The id of the user or &#39;me&#39;
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceSimpleUserResource} and HTTP response
     */
    getInvitesWithHttpInfo(userId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getInvites");
      }


      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        'size': opts['size'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageResourceSimpleUserResource;

      return this.apiClient.callApi(
        '/users/{user_id}/invites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get pending invites
     * Invites that the specified user received
     * @param {String} userId The id of the user or &#39;me&#39;
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceSimpleUserResource}
     */
    getInvites(userId, opts) {
      return this.getInvitesWithHttpInfo(userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Redeem friendship token
     * Immediately connects the requested user with the user mapped by the provided invite token
     * @param {String} userId The id of the user or &#39;me&#39; if logged in
     * @param {Object} opts Optional parameters
     * @param {module:model/StringWrapper} opts.token The invite token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    redeemFriendshipTokenWithHttpInfo(userId, opts) {
      opts = opts || {};
      let postBody = opts['token'];

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling redeemFriendshipToken");
      }


      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/friends/tokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Redeem friendship token
     * Immediately connects the requested user with the user mapped by the provided invite token
     * @param {String} userId The id of the user or &#39;me&#39; if logged in
     * @param {Object} opts Optional parameters
     * @param {module:model/StringWrapper} opts.token The invite token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    redeemFriendshipToken(userId, opts) {
      return this.redeemFriendshipTokenWithHttpInfo(userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove or decline a friend
     * @param {String} userId The id of the user or &#39;me&#39; if logged in
     * @param {Number} id The id of the user to befriend
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeOrDeclineFriendWithHttpInfo(userId, id) {
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling removeOrDeclineFriend");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeOrDeclineFriend");
      }


      let pathParams = {
        'user_id': userId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/friends/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove or decline a friend
     * @param {String} userId The id of the user or &#39;me&#39; if logged in
     * @param {Number} id The id of the user to befriend
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeOrDeclineFriend(userId, id) {
      return this.removeOrDeclineFriendWithHttpInfo(userId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
