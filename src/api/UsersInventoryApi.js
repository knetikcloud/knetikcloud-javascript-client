/**
 * Knetik Platform API Documentation Latest
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/EntitlementItem', 'model/InvoiceResource', 'model/PageEntitlementItem', 'model/PageUserInventoryResource', 'model/PageUserItemLogResource', 'model/UserInventoryAddRequest', 'model/UserInventoryResource'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/EntitlementItem'), require('../model/InvoiceResource'), require('../model/PageEntitlementItem'), require('../model/PageUserInventoryResource'), require('../model/PageUserItemLogResource'), require('../model/UserInventoryAddRequest'), require('../model/UserInventoryResource'));
  } else {
    // Browser globals (root is window)
    if (!root.KnetikPlatformApiDocumentationLatest) {
      root.KnetikPlatformApiDocumentationLatest = {};
    }
    root.KnetikPlatformApiDocumentationLatest.UsersInventoryApi = factory(root.KnetikPlatformApiDocumentationLatest.ApiClient, root.KnetikPlatformApiDocumentationLatest.EntitlementItem, root.KnetikPlatformApiDocumentationLatest.InvoiceResource, root.KnetikPlatformApiDocumentationLatest.PageEntitlementItem, root.KnetikPlatformApiDocumentationLatest.PageUserInventoryResource, root.KnetikPlatformApiDocumentationLatest.PageUserItemLogResource, root.KnetikPlatformApiDocumentationLatest.UserInventoryAddRequest, root.KnetikPlatformApiDocumentationLatest.UserInventoryResource);
  }
}(this, function(ApiClient, EntitlementItem, InvoiceResource, PageEntitlementItem, PageUserInventoryResource, PageUserItemLogResource, UserInventoryAddRequest, UserInventoryResource) {
  'use strict';

  /**
   * UsersInventory service.
   * @module api/UsersInventoryApi
   * @version Latest
   */

  /**
   * Constructs a new UsersInventoryApi. 
   * @alias module:api/UsersInventoryApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addItemUsingPOST1 operation.
     * @callback module:api/UsersInventoryApi~addItemUsingPOST1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds an item to the user inventory
     * The inventory is fulfilled asynchronously UNLESS the invoice is explicitely skipped. Depending on the use case, it might require the client to verify that the entitlement was added after the fact or configure a BRE rule to get a notification in real time
     * @param {Number} id The id of the user
     * @param {Object} opts Optional parameters
     * @param {module:model/UserInventoryAddRequest} opts.userInventoryAddRequest The user inventory add request object
     * @param {module:api/UsersInventoryApi~addItemUsingPOST1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceResource}
     */
    this.addItemUsingPOST1 = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['userInventoryAddRequest'];

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling addItemUsingPOST1");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = InvoiceResource;

      return this.apiClient.callApi(
        '/users/{id}/inventory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createItemUsingPOST operation.
     * @callback module:api/UsersInventoryApi~createItemUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntitlementItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an entitlement item
     * @param {Object} opts Optional parameters
     * @param {module:model/EntitlementItem} opts.entitlementItem The entitlement item object
     * @param {module:api/UsersInventoryApi~createItemUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntitlementItem}
     */
    this.createItemUsingPOST = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['entitlementItem'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = EntitlementItem;

      return this.apiClient.callApi(
        '/entitlements', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteItemUsingDELETE operation.
     * @callback module:api/UsersInventoryApi~deleteItemUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an entitlement item
     * @param {Number} entitlementId The id of the entitlement
     * @param {module:api/UsersInventoryApi~deleteItemUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteItemUsingDELETE = function(entitlementId, callback) {
      var postBody = null;

      // verify the required parameter 'entitlementId' is set
      if (entitlementId == undefined || entitlementId == null) {
        throw new Error("Missing the required parameter 'entitlementId' when calling deleteItemUsingDELETE");
      }


      var pathParams = {
        'entitlement_id': entitlementId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/entitlements/{entitlement_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the entitlementCheckUsingGET operation.
     * @callback module:api/UsersInventoryApi~entitlementCheckUsingGETCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check for access to an item without consuming
     * Useful for pre-check and accounts for all various buisness rules
     * @param {String} userId The id of the user to check for or &#39;me&#39; for logged in user
     * @param {Number} itemId The id of the item
     * @param {Object} opts Optional parameters
     * @param {String} opts.sku The specific sku of an entitlement list addition to check entitlement for. This is of very limited and specific use and should generally be left out
     * @param {module:api/UsersInventoryApi~entitlementCheckUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.entitlementCheckUsingGET = function(userId, itemId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw new Error("Missing the required parameter 'userId' when calling entitlementCheckUsingGET");
      }

      // verify the required parameter 'itemId' is set
      if (itemId == undefined || itemId == null) {
        throw new Error("Missing the required parameter 'itemId' when calling entitlementCheckUsingGET");
      }


      var pathParams = {
        'user_id': userId,
        'item_id': itemId
      };
      var queryParams = {
        'sku': opts['sku']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/entitlements/{item_id}/check', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the entitlementUseUsingPOST operation.
     * @callback module:api/UsersInventoryApi~entitlementUseUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use an item
     * @param {String} userId The id of the user to check for or &#39;me&#39; for logged in user
     * @param {Number} itemId The id of the item
     * @param {Object} opts Optional parameters
     * @param {String} opts.sku The specific sku of an entitlement_list addition to check entitlement for. This is of very limited and specific use and should generally be left out
     * @param {String} opts.info Any additional info to add to the log about this use
     * @param {module:api/UsersInventoryApi~entitlementUseUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.entitlementUseUsingPOST = function(userId, itemId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw new Error("Missing the required parameter 'userId' when calling entitlementUseUsingPOST");
      }

      // verify the required parameter 'itemId' is set
      if (itemId == undefined || itemId == null) {
        throw new Error("Missing the required parameter 'itemId' when calling entitlementUseUsingPOST");
      }


      var pathParams = {
        'user_id': userId,
        'item_id': itemId
      };
      var queryParams = {
        'sku': opts['sku'],
        'info': opts['info']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/entitlements/{item_id}/use', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCurrenciesUsingGET1 operation.
     * @callback module:api/UsersInventoryApi~getCurrenciesUsingGET1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PageEntitlementItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List and search entitlement items
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to 1)
     * @param {module:api/UsersInventoryApi~getCurrenciesUsingGET1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageEntitlementItem}
     */
    this.getCurrenciesUsingGET1 = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = PageEntitlementItem;

      return this.apiClient.callApi(
        '/entitlements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryListUsingGET operation.
     * @callback module:api/UsersInventoryApi~getInventoryListUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageUserInventoryResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the user inventory entries for all users
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.inactive If true, accepts inactive user inventories (default to false)
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.filterItemName Filter by items whose name starts with a string
     * @param {Number} opts.filterMinDate Filter for inventory added after the specified date, unix timestamp in seconds
     * @param {Number} opts.filterMaxDate Filter for inventory added before the specified date, unix timestamp in seconds
     * @param {module:api/UsersInventoryApi~getInventoryListUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageUserInventoryResource}
     */
    this.getInventoryListUsingGET = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'inactive': opts['inactive'],
        'size': opts['size'],
        'page': opts['page'],
        'filter_item_name': opts['filterItemName'],
        'filter_min_date': opts['filterMinDate'],
        'filter_max_date': opts['filterMaxDate']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = PageUserInventoryResource;

      return this.apiClient.callApi(
        '/inventories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryUsingGET operation.
     * @callback module:api/UsersInventoryApi~getInventoryUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserInventoryResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an inventory entry
     * @param {Number} userId The id of the inventory owner or &#39;me&#39; for the logged in user
     * @param {Number} id The id of the user inventory
     * @param {module:api/UsersInventoryApi~getInventoryUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserInventoryResource}
     */
    this.getInventoryUsingGET = function(userId, id, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw new Error("Missing the required parameter 'userId' when calling getInventoryUsingGET");
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling getInventoryUsingGET");
      }


      var pathParams = {
        'user_id': userId,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = UserInventoryResource;

      return this.apiClient.callApi(
        '/users/{user_id}/inventory/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getItemUsingGET operation.
     * @callback module:api/UsersInventoryApi~getItemUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntitlementItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single entitlement item
     * @param {Number} entitlementId The id of the entitlement
     * @param {module:api/UsersInventoryApi~getItemUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntitlementItem}
     */
    this.getItemUsingGET = function(entitlementId, callback) {
      var postBody = null;

      // verify the required parameter 'entitlementId' is set
      if (entitlementId == undefined || entitlementId == null) {
        throw new Error("Missing the required parameter 'entitlementId' when calling getItemUsingGET");
      }


      var pathParams = {
        'entitlement_id': entitlementId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = EntitlementItem;

      return this.apiClient.callApi(
        '/entitlements/{entitlement_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserInventoryListUsingGET operation.
     * @callback module:api/UsersInventoryApi~getUserInventoryListUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageUserInventoryResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the user inventory entries for a given user
     * @param {Number} id The id of the user
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.inactive If true, accepts inactive user inventories (default to false)
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.filterItemName Filter by items whose name starts with a string
     * @param {Number} opts.filterMinDate Filter for inventory added after the specified date, unix timestamp in seconds
     * @param {Number} opts.filterMaxDate Filter for inventory added before the specified date, unix timestamp in seconds
     * @param {module:api/UsersInventoryApi~getUserInventoryListUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageUserInventoryResource}
     */
    this.getUserInventoryListUsingGET = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling getUserInventoryListUsingGET");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'inactive': opts['inactive'],
        'size': opts['size'],
        'page': opts['page'],
        'filter_item_name': opts['filterItemName'],
        'filter_min_date': opts['filterMinDate'],
        'filter_max_date': opts['filterMaxDate']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = PageUserInventoryResource;

      return this.apiClient.callApi(
        '/users/{id}/inventory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserInventoryLogUsingGET operation.
     * @callback module:api/UsersInventoryApi~getUserInventoryLogUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageUserItemLogResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the log entries for this inventory entry.
     * @param {String} userId The id of the inventory owner or &#39;me&#39; for the logged in user
     * @param {Number} id The id of the user inventory
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {module:api/UsersInventoryApi~getUserInventoryLogUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageUserItemLogResource}
     */
    this.getUserInventoryLogUsingGET = function(userId, id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserInventoryLogUsingGET");
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling getUserInventoryLogUsingGET");
      }


      var pathParams = {
        'user_id': userId,
        'id': id
      };
      var queryParams = {
        'size': opts['size'],
        'page': opts['page']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = PageUserItemLogResource;

      return this.apiClient.callApi(
        '/users/{user_id}/inventory/{id}/log', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateItemUsingPUT1 operation.
     * @callback module:api/UsersInventoryApi~updateItemUsingPUT1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an entitlement item
     * @param {Number} entitlementId The id of the entitlement
     * @param {Object} opts Optional parameters
     * @param {module:model/EntitlementItem} opts.entitlementItem The entitlement item object
     * @param {module:api/UsersInventoryApi~updateItemUsingPUT1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateItemUsingPUT1 = function(entitlementId, opts, callback) {
      opts = opts || {};
      var postBody = opts['entitlementItem'];

      // verify the required parameter 'entitlementId' is set
      if (entitlementId == undefined || entitlementId == null) {
        throw new Error("Missing the required parameter 'entitlementId' when calling updateItemUsingPUT1");
      }


      var pathParams = {
        'entitlement_id': entitlementId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/entitlements/{entitlement_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUserInventoryBehaviorDataUsingPUT operation.
     * @callback module:api/UsersInventoryApi~updateUserInventoryBehaviorDataUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the behavior data for an inventory entry
     * @param {Number} userId The id of the user
     * @param {Number} id The id of the user inventory
     * @param {Object} opts Optional parameters
     * @param {Object} opts.data The data map
     * @param {module:api/UsersInventoryApi~updateUserInventoryBehaviorDataUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateUserInventoryBehaviorDataUsingPUT = function(userId, id, opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw new Error("Missing the required parameter 'userId' when calling updateUserInventoryBehaviorDataUsingPUT");
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling updateUserInventoryBehaviorDataUsingPUT");
      }


      var pathParams = {
        'user_id': userId,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/inventory/{id}/behavior-data', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUserInventoryExpiresUsingPUT operation.
     * @callback module:api/UsersInventoryApi~updateUserInventoryExpiresUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the expiration date
     * Will change the current grace period for a subscription but not the bill date (possibly even ending before having the chance to re-bill)
     * @param {Number} userId user_id
     * @param {Number} id The id of the user inventory
     * @param {Object} opts Optional parameters
     * @param {Number} opts.timestamp The new expiration date as a unix timestamp in seconds. May be null (no body).
     * @param {module:api/UsersInventoryApi~updateUserInventoryExpiresUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateUserInventoryExpiresUsingPUT = function(userId, id, opts, callback) {
      opts = opts || {};
      var postBody = opts['timestamp'];

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw new Error("Missing the required parameter 'userId' when calling updateUserInventoryExpiresUsingPUT");
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling updateUserInventoryExpiresUsingPUT");
      }


      var pathParams = {
        'user_id': userId,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/inventory/{id}/expires', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUserInventoryStatusUsingPUT operation.
     * @callback module:api/UsersInventoryApi~updateUserInventoryStatusUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the status for an inventory entry
     * @param {Number} userId The id of the user
     * @param {Number} id The id of the user inventory
     * @param {Object} opts Optional parameters
     * @param {String} opts.inventoryStatus The inventory status object
     * @param {module:api/UsersInventoryApi~updateUserInventoryStatusUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateUserInventoryStatusUsingPUT = function(userId, id, opts, callback) {
      opts = opts || {};
      var postBody = opts['inventoryStatus'];

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw new Error("Missing the required parameter 'userId' when calling updateUserInventoryStatusUsingPUT");
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling updateUserInventoryStatusUsingPUT");
      }


      var pathParams = {
        'user_id': userId,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/inventory/{id}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
