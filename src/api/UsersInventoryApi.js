/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EntitlementGrantRequest from '../model/EntitlementGrantRequest';
import EntitlementItem from '../model/EntitlementItem';
import InvoiceResource from '../model/InvoiceResource';
import ItemTemplateResource from '../model/ItemTemplateResource';
import PageResourceEntitlementItem from '../model/PageResourceEntitlementItem';
import PageResourceItemTemplateResource from '../model/PageResourceItemTemplateResource';
import PageResourceUserInventoryResource from '../model/PageResourceUserInventoryResource';
import PageResourceUserItemLogResource from '../model/PageResourceUserItemLogResource';
import Result from '../model/Result';
import UserInventoryAddRequest from '../model/UserInventoryAddRequest';
import UserInventoryResource from '../model/UserInventoryResource';

/**
* UsersInventory service.
* @module api/UsersInventoryApi
* @version 3.0.7
*/
export default class UsersInventoryApi {

    /**
    * Constructs a new UsersInventoryApi. 
    * @alias module:api/UsersInventoryApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Adds an item to the user inventory
     * The inventory is fulfilled asynchronously UNLESS the invoice is explicitely skipped. Depending on the use case, it might require the client to verify that the entitlement was added after the fact or configure a BRE rule to get a notification in real time
     * @param {Number} id The id of the user
     * @param {Object} opts Optional parameters
     * @param {module:model/UserInventoryAddRequest} opts.userInventoryAddRequest The user inventory add request object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InvoiceResource} and HTTP response
     */
    addItemToUserInventoryWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['userInventoryAddRequest'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addItemToUserInventory");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InvoiceResource;

      return this.apiClient.callApi(
        '/users/{id}/inventory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Adds an item to the user inventory
     * The inventory is fulfilled asynchronously UNLESS the invoice is explicitely skipped. Depending on the use case, it might require the client to verify that the entitlement was added after the fact or configure a BRE rule to get a notification in real time
     * @param {Number} id The id of the user
     * @param {Object} opts Optional parameters
     * @param {module:model/UserInventoryAddRequest} opts.userInventoryAddRequest The user inventory add request object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InvoiceResource}
     */
    addItemToUserInventory(id, opts) {
      return this.addItemToUserInventoryWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Check for access to an item without consuming
     * Useful for pre-check and accounts for all various buisness rules
     * @param {String} userId The id of the user to check for or &#39;me&#39; for logged in user
     * @param {Number} itemId The id of the item
     * @param {Object} opts Optional parameters
     * @param {String} opts.sku The specific sku of an entitlement list addition to check entitlement for. This is of very limited and specific use and should generally be left out
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    checkUserEntitlementItemWithHttpInfo(userId, itemId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling checkUserEntitlementItem");
      }

      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling checkUserEntitlementItem");
      }


      let pathParams = {
        'user_id': userId,
        'item_id': itemId
      };
      let queryParams = {
        'sku': opts['sku']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/entitlements/{item_id}/check', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Check for access to an item without consuming
     * Useful for pre-check and accounts for all various buisness rules
     * @param {String} userId The id of the user to check for or &#39;me&#39; for logged in user
     * @param {Number} itemId The id of the item
     * @param {Object} opts Optional parameters
     * @param {String} opts.sku The specific sku of an entitlement list addition to check entitlement for. This is of very limited and specific use and should generally be left out
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    checkUserEntitlementItem(userId, itemId, opts) {
      return this.checkUserEntitlementItemWithHttpInfo(userId, itemId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create an entitlement item
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.cascade Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values. (default to false)
     * @param {module:model/EntitlementItem} opts.entitlementItem The entitlement item object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntitlementItem} and HTTP response
     */
    createEntitlementItemWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['entitlementItem'];


      let pathParams = {
      };
      let queryParams = {
        'cascade': opts['cascade']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EntitlementItem;

      return this.apiClient.callApi(
        '/entitlements', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create an entitlement item
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.cascade Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values. (default to false)
     * @param {module:model/EntitlementItem} opts.entitlementItem The entitlement item object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntitlementItem}
     */
    createEntitlementItem(opts) {
      return this.createEntitlementItemWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create an entitlement template
     * Entitlement templates define a type of entitlement and the properties they have
     * @param {Object} opts Optional parameters
     * @param {module:model/ItemTemplateResource} opts.template The entitlement template to be created
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ItemTemplateResource} and HTTP response
     */
    createEntitlementTemplateWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['template'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ItemTemplateResource;

      return this.apiClient.callApi(
        '/entitlements/templates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create an entitlement template
     * Entitlement templates define a type of entitlement and the properties they have
     * @param {Object} opts Optional parameters
     * @param {module:model/ItemTemplateResource} opts.template The entitlement template to be created
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ItemTemplateResource}
     */
    createEntitlementTemplate(opts) {
      return this.createEntitlementTemplateWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an entitlement item
     * @param {Number} entitlementId The id of the entitlement
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteEntitlementItemWithHttpInfo(entitlementId) {
      let postBody = null;

      // verify the required parameter 'entitlementId' is set
      if (entitlementId === undefined || entitlementId === null) {
        throw new Error("Missing the required parameter 'entitlementId' when calling deleteEntitlementItem");
      }


      let pathParams = {
        'entitlement_id': entitlementId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/entitlements/{entitlement_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an entitlement item
     * @param {Number} entitlementId The id of the entitlement
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteEntitlementItem(entitlementId) {
      return this.deleteEntitlementItemWithHttpInfo(entitlementId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an entitlement template
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {String} opts.cascade The value needed to delete used templates
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteEntitlementTemplateWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteEntitlementTemplate");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'cascade': opts['cascade']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/entitlements/templates/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an entitlement template
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {String} opts.cascade The value needed to delete used templates
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteEntitlementTemplate(id, opts) {
      return this.deleteEntitlementTemplateWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single entitlement item
     * @param {Number} entitlementId The id of the entitlement
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntitlementItem} and HTTP response
     */
    getEntitlementItemWithHttpInfo(entitlementId) {
      let postBody = null;

      // verify the required parameter 'entitlementId' is set
      if (entitlementId === undefined || entitlementId === null) {
        throw new Error("Missing the required parameter 'entitlementId' when calling getEntitlementItem");
      }


      let pathParams = {
        'entitlement_id': entitlementId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EntitlementItem;

      return this.apiClient.callApi(
        '/entitlements/{entitlement_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single entitlement item
     * @param {Number} entitlementId The id of the entitlement
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntitlementItem}
     */
    getEntitlementItem(entitlementId) {
      return this.getEntitlementItemWithHttpInfo(entitlementId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List and search entitlement items
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceEntitlementItem} and HTTP response
     */
    getEntitlementItemsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageResourceEntitlementItem;

      return this.apiClient.callApi(
        '/entitlements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List and search entitlement items
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceEntitlementItem}
     */
    getEntitlementItems(opts) {
      return this.getEntitlementItemsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single entitlement template
     * @param {String} id The id of the template
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ItemTemplateResource} and HTTP response
     */
    getEntitlementTemplateWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEntitlementTemplate");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ItemTemplateResource;

      return this.apiClient.callApi(
        '/entitlements/templates/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single entitlement template
     * @param {String} id The id of the template
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ItemTemplateResource}
     */
    getEntitlementTemplate(id) {
      return this.getEntitlementTemplateWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List and search entitlement templates
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceItemTemplateResource} and HTTP response
     */
    getEntitlementTemplatesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageResourceItemTemplateResource;

      return this.apiClient.callApi(
        '/entitlements/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List and search entitlement templates
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceItemTemplateResource}
     */
    getEntitlementTemplates(opts) {
      return this.getEntitlementTemplatesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List the user inventory entries for a given user
     * @param {Number} id The id of the user
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.inactive If true, accepts inactive user inventories (default to false)
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.filterItemName Filter by items whose name starts with a string
     * @param {Number} opts.filterItemId Filter by item id
     * @param {String} opts.filterUsername Filter by entries owned by the user with the specified username
     * @param {String} opts.filterGroup Filter by entries owned by the users in a given group, by unique name
     * @param {String} opts.filterDate A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds. Can be repeated for a range, eg: GT,123,LT,456  Allowed operators: (GT, LT, EQ, GOE, LOE).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceUserInventoryResource} and HTTP response
     */
    getUserInventoriesWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUserInventories");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'inactive': opts['inactive'],
        'size': opts['size'],
        'page': opts['page'],
        'filter_item_name': opts['filterItemName'],
        'filter_item_id': opts['filterItemId'],
        'filter_username': opts['filterUsername'],
        'filter_group': opts['filterGroup'],
        'filter_date': opts['filterDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageResourceUserInventoryResource;

      return this.apiClient.callApi(
        '/users/{id}/inventory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List the user inventory entries for a given user
     * @param {Number} id The id of the user
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.inactive If true, accepts inactive user inventories (default to false)
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.filterItemName Filter by items whose name starts with a string
     * @param {Number} opts.filterItemId Filter by item id
     * @param {String} opts.filterUsername Filter by entries owned by the user with the specified username
     * @param {String} opts.filterGroup Filter by entries owned by the users in a given group, by unique name
     * @param {String} opts.filterDate A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds. Can be repeated for a range, eg: GT,123,LT,456  Allowed operators: (GT, LT, EQ, GOE, LOE).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceUserInventoryResource}
     */
    getUserInventories(id, opts) {
      return this.getUserInventoriesWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get an inventory entry
     * @param {Number} userId The id of the inventory owner or &#39;me&#39; for the logged in user
     * @param {Number} id The id of the user inventory
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserInventoryResource} and HTTP response
     */
    getUserInventoryWithHttpInfo(userId, id) {
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserInventory");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUserInventory");
      }


      let pathParams = {
        'user_id': userId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserInventoryResource;

      return this.apiClient.callApi(
        '/users/{user_id}/inventory/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get an inventory entry
     * @param {Number} userId The id of the inventory owner or &#39;me&#39; for the logged in user
     * @param {Number} id The id of the user inventory
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserInventoryResource}
     */
    getUserInventory(userId, id) {
      return this.getUserInventoryWithHttpInfo(userId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List the log entries for this inventory entry
     * @param {String} userId The id of the inventory owner or &#39;me&#39; for the logged in user
     * @param {Number} id The id of the user inventory
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceUserItemLogResource} and HTTP response
     */
    getUserInventoryLogWithHttpInfo(userId, id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserInventoryLog");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUserInventoryLog");
      }


      let pathParams = {
        'user_id': userId,
        'id': id
      };
      let queryParams = {
        'size': opts['size'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageResourceUserItemLogResource;

      return this.apiClient.callApi(
        '/users/{user_id}/inventory/{id}/log', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List the log entries for this inventory entry
     * @param {String} userId The id of the inventory owner or &#39;me&#39; for the logged in user
     * @param {Number} id The id of the user inventory
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceUserItemLogResource}
     */
    getUserInventoryLog(userId, id, opts) {
      return this.getUserInventoryLogWithHttpInfo(userId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List the user inventory entries for all users
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.inactive If true, accepts inactive user inventories (default to false)
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.filterItemName Filter by items whose name starts with a string
     * @param {Number} opts.filterItemId Filter by item id
     * @param {String} opts.filterUsername Filter by entries owned by the user with the specified username
     * @param {String} opts.filterGroup Filter by entries owned by the users in a given group, by unique name
     * @param {String} opts.filterDate A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds. Can be repeated for a range, eg: GT,123,LT,456  Allowed operators: (GT, LT, EQ, GOE, LOE).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceUserInventoryResource} and HTTP response
     */
    getUsersInventoryWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'inactive': opts['inactive'],
        'size': opts['size'],
        'page': opts['page'],
        'filter_item_name': opts['filterItemName'],
        'filter_item_id': opts['filterItemId'],
        'filter_username': opts['filterUsername'],
        'filter_group': opts['filterGroup'],
        'filter_date': opts['filterDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageResourceUserInventoryResource;

      return this.apiClient.callApi(
        '/inventories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List the user inventory entries for all users
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.inactive If true, accepts inactive user inventories (default to false)
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.filterItemName Filter by items whose name starts with a string
     * @param {Number} opts.filterItemId Filter by item id
     * @param {String} opts.filterUsername Filter by entries owned by the user with the specified username
     * @param {String} opts.filterGroup Filter by entries owned by the users in a given group, by unique name
     * @param {String} opts.filterDate A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds. Can be repeated for a range, eg: GT,123,LT,456  Allowed operators: (GT, LT, EQ, GOE, LOE).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceUserInventoryResource}
     */
    getUsersInventory(opts) {
      return this.getUsersInventoryWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Grant an entitlement
     * @param {Number} userId The id of the user to grant the entitlement to
     * @param {module:model/EntitlementGrantRequest} grantRequest grantRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    grantUserEntitlementWithHttpInfo(userId, grantRequest) {
      let postBody = grantRequest;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling grantUserEntitlement");
      }

      // verify the required parameter 'grantRequest' is set
      if (grantRequest === undefined || grantRequest === null) {
        throw new Error("Missing the required parameter 'grantRequest' when calling grantUserEntitlement");
      }


      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/entitlements', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Grant an entitlement
     * @param {Number} userId The id of the user to grant the entitlement to
     * @param {module:model/EntitlementGrantRequest} grantRequest grantRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    grantUserEntitlement(userId, grantRequest) {
      return this.grantUserEntitlementWithHttpInfo(userId, grantRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an entitlement item
     * @param {Number} entitlementId The id of the entitlement
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.cascade Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values. (default to false)
     * @param {module:model/EntitlementItem} opts.entitlementItem The entitlement item object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateEntitlementItemWithHttpInfo(entitlementId, opts) {
      opts = opts || {};
      let postBody = opts['entitlementItem'];

      // verify the required parameter 'entitlementId' is set
      if (entitlementId === undefined || entitlementId === null) {
        throw new Error("Missing the required parameter 'entitlementId' when calling updateEntitlementItem");
      }


      let pathParams = {
        'entitlement_id': entitlementId
      };
      let queryParams = {
        'cascade': opts['cascade']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/entitlements/{entitlement_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an entitlement item
     * @param {Number} entitlementId The id of the entitlement
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.cascade Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values. (default to false)
     * @param {module:model/EntitlementItem} opts.entitlementItem The entitlement item object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateEntitlementItem(entitlementId, opts) {
      return this.updateEntitlementItemWithHttpInfo(entitlementId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an entitlement template
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {module:model/ItemTemplateResource} opts.template The updated template
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ItemTemplateResource} and HTTP response
     */
    updateEntitlementTemplateWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['template'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateEntitlementTemplate");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ItemTemplateResource;

      return this.apiClient.callApi(
        '/entitlements/templates/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an entitlement template
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {module:model/ItemTemplateResource} opts.template The updated template
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ItemTemplateResource}
     */
    updateEntitlementTemplate(id, opts) {
      return this.updateEntitlementTemplateWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set the behavior data for an inventory entry
     * @param {Number} userId The id of the user
     * @param {Number} id The id of the user inventory
     * @param {Object} opts Optional parameters
     * @param {Object} opts.data The data map
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateUserInventoryBehaviorDataWithHttpInfo(userId, id, opts) {
      opts = opts || {};
      let postBody = opts['data'];

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateUserInventoryBehaviorData");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateUserInventoryBehaviorData");
      }


      let pathParams = {
        'user_id': userId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/inventory/{id}/behavior-data', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Set the behavior data for an inventory entry
     * @param {Number} userId The id of the user
     * @param {Number} id The id of the user inventory
     * @param {Object} opts Optional parameters
     * @param {Object} opts.data The data map
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateUserInventoryBehaviorData(userId, id, opts) {
      return this.updateUserInventoryBehaviorDataWithHttpInfo(userId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set the expiration date
     * Will change the current grace period for a subscription but not the bill date (possibly even ending before having the chance to re-bill)
     * @param {Number} userId user_id
     * @param {Number} id The id of the user inventory
     * @param {Object} opts Optional parameters
     * @param {Number} opts.timestamp The new expiration date as a unix timestamp in seconds. May be null (no body).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateUserInventoryExpiresWithHttpInfo(userId, id, opts) {
      opts = opts || {};
      let postBody = opts['timestamp'];

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateUserInventoryExpires");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateUserInventoryExpires");
      }


      let pathParams = {
        'user_id': userId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/inventory/{id}/expires', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Set the expiration date
     * Will change the current grace period for a subscription but not the bill date (possibly even ending before having the chance to re-bill)
     * @param {Number} userId user_id
     * @param {Number} id The id of the user inventory
     * @param {Object} opts Optional parameters
     * @param {Number} opts.timestamp The new expiration date as a unix timestamp in seconds. May be null (no body).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateUserInventoryExpires(userId, id, opts) {
      return this.updateUserInventoryExpiresWithHttpInfo(userId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set the status for an inventory entry
     * @param {Number} userId The id of the user
     * @param {Number} id The id of the user inventory
     * @param {Object} opts Optional parameters
     * @param {String} opts.inventoryStatus The inventory status object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateUserInventoryStatusWithHttpInfo(userId, id, opts) {
      opts = opts || {};
      let postBody = opts['inventoryStatus'];

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateUserInventoryStatus");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateUserInventoryStatus");
      }


      let pathParams = {
        'user_id': userId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/inventory/{id}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Set the status for an inventory entry
     * @param {Number} userId The id of the user
     * @param {Number} id The id of the user inventory
     * @param {Object} opts Optional parameters
     * @param {String} opts.inventoryStatus The inventory status object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateUserInventoryStatus(userId, id, opts) {
      return this.updateUserInventoryStatusWithHttpInfo(userId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Use an item
     * @param {String} userId The id of the user to check for or &#39;me&#39; for logged in user
     * @param {Number} itemId The id of the item
     * @param {Object} opts Optional parameters
     * @param {String} opts.sku The specific sku of an entitlement_list addition to check entitlement for. This is of very limited and specific use and should generally be left out
     * @param {String} opts.info Any additional info to add to the log about this use
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    useUserEntitlementItemWithHttpInfo(userId, itemId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling useUserEntitlementItem");
      }

      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling useUserEntitlementItem");
      }


      let pathParams = {
        'user_id': userId,
        'item_id': itemId
      };
      let queryParams = {
        'sku': opts['sku'],
        'info': opts['info']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/entitlements/{item_id}/use', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Use an item
     * @param {String} userId The id of the user to check for or &#39;me&#39; for logged in user
     * @param {Number} itemId The id of the item
     * @param {Object} opts Optional parameters
     * @param {String} opts.sku The specific sku of an entitlement_list addition to check entitlement for. This is of very limited and specific use and should generally be left out
     * @param {String} opts.info Any additional info to add to the log about this use
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    useUserEntitlementItem(userId, itemId, opts) {
      return this.useUserEntitlementItemWithHttpInfo(userId, itemId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
