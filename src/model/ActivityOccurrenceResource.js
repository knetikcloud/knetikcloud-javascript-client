/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';
import ActivityEntitlementResource from './ActivityEntitlementResource';
import ActivityUserResource from './ActivityUserResource';
import SelectedSettingResource from './SelectedSettingResource';





/**
* The ActivityOccurrenceResource model module.
* @module model/ActivityOccurrenceResource
* @version 3.0.7
*/
export default class ActivityOccurrenceResource {
    /**
    * Constructs a new <code>ActivityOccurrenceResource</code>.
    * A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings
    * @alias module:model/ActivityOccurrenceResource
    * @class
    * @param activityId {Number} The id of the activity
    */

    constructor(activityId) {
        

        
        

        this['activity_id'] = activityId;

        
    }

    /**
    * Constructs a <code>ActivityOccurrenceResource</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/ActivityOccurrenceResource} obj Optional instance to populate.
    * @return {module:model/ActivityOccurrenceResource} The populated <code>ActivityOccurrenceResource</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ActivityOccurrenceResource();

            
            
            

            if (data.hasOwnProperty('activity_id')) {
                obj['activity_id'] = ApiClient.convertToType(data['activity_id'], 'Number');
            }
            if (data.hasOwnProperty('challenge_activity_id')) {
                obj['challenge_activity_id'] = ApiClient.convertToType(data['challenge_activity_id'], 'Number');
            }
            if (data.hasOwnProperty('created_date')) {
                obj['created_date'] = ApiClient.convertToType(data['created_date'], 'Number');
            }
            if (data.hasOwnProperty('entitlement')) {
                obj['entitlement'] = ActivityEntitlementResource.constructFromObject(data['entitlement']);
            }
            if (data.hasOwnProperty('event_id')) {
                obj['event_id'] = ApiClient.convertToType(data['event_id'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('reward_status')) {
                obj['reward_status'] = ApiClient.convertToType(data['reward_status'], 'String');
            }
            if (data.hasOwnProperty('settings')) {
                obj['settings'] = ApiClient.convertToType(data['settings'], [SelectedSettingResource]);
            }
            if (data.hasOwnProperty('simulated')) {
                obj['simulated'] = ApiClient.convertToType(data['simulated'], 'Boolean');
            }
            if (data.hasOwnProperty('start_date')) {
                obj['start_date'] = ApiClient.convertToType(data['start_date'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('updated_date')) {
                obj['updated_date'] = ApiClient.convertToType(data['updated_date'], 'Number');
            }
            if (data.hasOwnProperty('users')) {
                obj['users'] = ApiClient.convertToType(data['users'], [ActivityUserResource]);
            }
        }
        return obj;
    }

    /**
    * The id of the activity
    * @member {Number} activity_id
    */
    activity_id = undefined;
    /**
    * The id of the challenge activity (as part of the event, required if eventId set)
    * @member {Number} challenge_activity_id
    */
    challenge_activity_id = undefined;
    /**
    * The date this occurrence was created, unix timestamp in seconds
    * @member {Number} created_date
    */
    created_date = undefined;
    /**
    * The entitlement item required to enter the occurrence. Required if not part of an event. Must come from the set of entitlement items listed in the activity
    * @member {module:model/ActivityEntitlementResource} entitlement
    */
    entitlement = undefined;
    /**
    * The id of the event
    * @member {Number} event_id
    */
    event_id = undefined;
    /**
    * The id of the activity occurrence
    * @member {Number} id
    */
    id = undefined;
    /**
    * Indicate if the rewards have been given out already
    * @member {module:model/ActivityOccurrenceResource.RewardStatusEnum} reward_status
    */
    reward_status = undefined;
    /**
    * The values selected from the available settings defined for the activity. Ex: difficulty: hard. Can be left out if the activity is played during an event and the settings are already set at the event level. Ex: every monday, difficulty: hard, number of questions: 10, category: sport. Otherwise, the set must exactly match those of the activity.
    * @member {Array.<module:model/SelectedSettingResource>} settings
    */
    settings = undefined;
    /**
    * Whether this occurrence will be ran as a simulation. Simulations will not be rewarded. Useful for bot play or trials
    * @member {Boolean} simulated
    */
    simulated = undefined;
    /**
    * The date this occurrence was started, unix timestamp in seconds. null if not yet started
    * @member {Number} start_date
    */
    start_date = undefined;
    /**
    * The current status of the occurrence (default: OPEN)
    * @member {module:model/ActivityOccurrenceResource.StatusEnum} status
    */
    status = undefined;
    /**
    * The date this occurrence was last updated, unix timestamp in seconds
    * @member {Number} updated_date
    */
    updated_date = undefined;
    /**
    * The list of users participating in this occurrence. Can only be set directly with ACTIVITIES_ADMIN permission
    * @member {Array.<module:model/ActivityUserResource>} users
    */
    users = undefined;






    /**
    * Allowed values for the <code>reward_status</code> property.
    * @enum {String}
    * @readonly
    */
    static RewardStatusEnum = {
    
        /**
         * value: "pending"
         * @const
         */
        "pending": "pending",
    
        /**
         * value: "failed"
         * @const
         */
        "failed": "failed",
    
        /**
         * value: "complete"
         * @const
         */
        "complete": "complete",
    
        /**
         * value: "partial"
         * @const
         */
        "partial": "partial"    
    };

    /**
    * Allowed values for the <code>status</code> property.
    * @enum {String}
    * @readonly
    */
    static StatusEnum = {
    
        /**
         * value: "SETUP"
         * @const
         */
        "SETUP": "SETUP",
    
        /**
         * value: "OPEN"
         * @const
         */
        "OPEN": "OPEN",
    
        /**
         * value: "PLAYING"
         * @const
         */
        "PLAYING": "PLAYING",
    
        /**
         * value: "FINISHED"
         * @const
         */
        "FINISHED": "FINISHED",
    
        /**
         * value: "ABANDONED"
         * @const
         */
        "ABANDONED": "ABANDONED"    
    };



}


