/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';





/**
* The AddressResource model module.
* @module model/AddressResource
* @version 3.0.7
*/
export default class AddressResource {
    /**
    * Constructs a new <code>AddressResource</code>.
    * @alias module:model/AddressResource
    * @class
    * @param address1 {String} The first line of the address
    * @param city {String} The city
    * @param countryCode {String} The iso3 code for the country
    */

    constructor(address1, city, countryCode) {
        

        
        

        this['address1'] = address1;this['city'] = city;this['country_code'] = countryCode;

        
    }

    /**
    * Constructs a <code>AddressResource</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/AddressResource} obj Optional instance to populate.
    * @return {module:model/AddressResource} The populated <code>AddressResource</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AddressResource();

            
            
            

            if (data.hasOwnProperty('address1')) {
                obj['address1'] = ApiClient.convertToType(data['address1'], 'String');
            }
            if (data.hasOwnProperty('address2')) {
                obj['address2'] = ApiClient.convertToType(data['address2'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('country_code')) {
                obj['country_code'] = ApiClient.convertToType(data['country_code'], 'String');
            }
            if (data.hasOwnProperty('postal_code')) {
                obj['postal_code'] = ApiClient.convertToType(data['postal_code'], 'String');
            }
            if (data.hasOwnProperty('state_code')) {
                obj['state_code'] = ApiClient.convertToType(data['state_code'], 'String');
            }
        }
        return obj;
    }

    /**
    * The first line of the address
    * @member {String} address1
    */
    address1 = undefined;
    /**
    * A second line of the address
    * @member {String} address2
    */
    address2 = undefined;
    /**
    * The city
    * @member {String} city
    */
    city = undefined;
    /**
    * The iso3 code for the country
    * @member {String} country_code
    */
    country_code = undefined;
    /**
    * The postal code
    * @member {String} postal_code
    */
    postal_code = undefined;
    /**
    * The code for the state. Required if the country has states/provinces/equivalent
    * @member {String} state_code
    */
    state_code = undefined;








}


