/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';
import SettingOption from './SettingOption';





/**
* The AvailableSettingResource model module.
* @module model/AvailableSettingResource
* @version 3.0.7
*/
export default class AvailableSettingResource {
    /**
    * Constructs a new <code>AvailableSettingResource</code>.
    * The definition of an activity parameters: ex: difficulty level
    * @alias module:model/AvailableSettingResource
    * @class
    * @param defaultValue {String} The default value of the setting (must be in options array). Ex: easy
    * @param key {String} The unique ID for the setting: Ex: difficulty
    * @param name {String} The textual name of the setting: Ex: Difficulty Level
    * @param options {Array.<module:model/SettingOption>} The set of options available for this setting, Ex: easy, medium, hard
    */

    constructor(defaultValue, key, name, options) {
        

        
        

        this['default_value'] = defaultValue;this['key'] = key;this['name'] = name;this['options'] = options;

        
    }

    /**
    * Constructs a <code>AvailableSettingResource</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/AvailableSettingResource} obj Optional instance to populate.
    * @return {module:model/AvailableSettingResource} The populated <code>AvailableSettingResource</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AvailableSettingResource();

            
            
            

            if (data.hasOwnProperty('advanced_option')) {
                obj['advanced_option'] = ApiClient.convertToType(data['advanced_option'], 'Boolean');
            }
            if (data.hasOwnProperty('default_value')) {
                obj['default_value'] = ApiClient.convertToType(data['default_value'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ApiClient.convertToType(data['options'], [SettingOption]);
            }
        }
        return obj;
    }

    /**
    * Whether the setting is advanced. Default: false
    * @member {Boolean} advanced_option
    */
    advanced_option = undefined;
    /**
    * The default value of the setting (must be in options array). Ex: easy
    * @member {String} default_value
    */
    default_value = undefined;
    /**
    * The description of the setting: Ex: Choose the difficulty level to show more or less complicated questions (for a trivia activity)
    * @member {String} description
    */
    description = undefined;
    /**
    * The unique ID for the setting: Ex: difficulty
    * @member {String} key
    */
    key = undefined;
    /**
    * The textual name of the setting: Ex: Difficulty Level
    * @member {String} name
    */
    name = undefined;
    /**
    * The set of options available for this setting, Ex: easy, medium, hard
    * @member {Array.<module:model/SettingOption>} options
    */
    options = undefined;








}


