/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';





/**
* The BreEvent model module.
* @module model/BreEvent
* @version 3.0.7
*/
export default class BreEvent {
    /**
    * Constructs a new <code>BreEvent</code>.
    * @alias module:model/BreEvent
    * @class
    * @param eventName {String} The event name of the trigger to be fired
    * @param params {Object} The parameters to the event. A Map (assosiative array) with a key for each trigger parameter name and a corrosponding value.
    */

    constructor(eventName, params) {
        

        
        

        this['event_name'] = eventName;this['params'] = params;

        
    }

    /**
    * Constructs a <code>BreEvent</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/BreEvent} obj Optional instance to populate.
    * @return {module:model/BreEvent} The populated <code>BreEvent</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BreEvent();

            
            
            

            if (data.hasOwnProperty('event_name')) {
                obj['event_name'] = ApiClient.convertToType(data['event_name'], 'String');
            }
            if (data.hasOwnProperty('params')) {
                obj['params'] = ApiClient.convertToType(data['params'], Object);
            }
        }
        return obj;
    }

    /**
    * The event name of the trigger to be fired
    * @member {String} event_name
    */
    event_name = undefined;
    /**
    * The parameters to the event. A Map (assosiative array) with a key for each trigger parameter name and a corrosponding value.
    * @member {Object} params
    */
    params = undefined;








}


