/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';
import BreTriggerParameterDefinition from './BreTriggerParameterDefinition';





/**
* The BreTriggerResource model module.
* @module model/BreTriggerResource
* @version 3.0.7
*/
export default class BreTriggerResource {
    /**
    * Constructs a new <code>BreTriggerResource</code>.
    * @alias module:model/BreTriggerResource
    * @class
    * @param eventName {String} The unique name for the event. This serves as the unique identifier. Cannot be changed after creation
    * @param triggerDescription {String} A description of the trigger
    * @param triggerName {String} A human readable name for this trigger
    */

    constructor(eventName, triggerDescription, triggerName) {
        

        
        

        this['event_name'] = eventName;this['trigger_description'] = triggerDescription;this['trigger_name'] = triggerName;

        
    }

    /**
    * Constructs a <code>BreTriggerResource</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/BreTriggerResource} obj Optional instance to populate.
    * @return {module:model/BreTriggerResource} The populated <code>BreTriggerResource</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BreTriggerResource();

            
            
            

            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('event_name')) {
                obj['event_name'] = ApiClient.convertToType(data['event_name'], 'String');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], [BreTriggerParameterDefinition]);
            }
            if (data.hasOwnProperty('system_trigger')) {
                obj['system_trigger'] = ApiClient.convertToType(data['system_trigger'], 'Boolean');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('trigger_description')) {
                obj['trigger_description'] = ApiClient.convertToType(data['trigger_description'], 'String');
            }
            if (data.hasOwnProperty('trigger_name')) {
                obj['trigger_name'] = ApiClient.convertToType(data['trigger_name'], 'String');
            }
        }
        return obj;
    }

    /**
    * The category this trigger belongs to. See endpoints for related asset information. All new triggers are in category 'custom'
    * @member {module:model/BreTriggerResource.CategoryEnum} category
    */
    category = undefined;
    /**
    * The unique name for the event. This serves as the unique identifier. Cannot be changed after creation
    * @member {String} event_name
    */
    event_name = undefined;
    /**
    * A list of parameters that will be sent with the event when the trigger is fired. These must be included in the event and match the described types
    * @member {Array.<module:model/BreTriggerParameterDefinition>} parameters
    */
    parameters = undefined;
    /**
    * Where this trigger came from. System triggers cannot be removed or updated
    * @member {Boolean} system_trigger
    */
    system_trigger = undefined;
    /**
    * A list of tags for filtering
    * @member {Array.<String>} tags
    */
    tags = undefined;
    /**
    * A description of the trigger
    * @member {String} trigger_description
    */
    trigger_description = undefined;
    /**
    * A human readable name for this trigger
    * @member {String} trigger_name
    */
    trigger_name = undefined;






    /**
    * Allowed values for the <code>category</code> property.
    * @enum {String}
    * @readonly
    */
    static CategoryEnum = {
    
        /**
         * value: "achievement"
         * @const
         */
        "achievement": "achievement",
    
        /**
         * value: "behavior"
         * @const
         */
        "behavior": "behavior",
    
        /**
         * value: "comment"
         * @const
         */
        "comment": "comment",
    
        /**
         * value: "disposition"
         * @const
         */
        "disposition": "disposition",
    
        /**
         * value: "device"
         * @const
         */
        "device": "device",
    
        /**
         * value: "entitlement"
         * @const
         */
        "entitlement": "entitlement",
    
        /**
         * value: "friends"
         * @const
         */
        "friends": "friends",
    
        /**
         * value: "fulfillment"
         * @const
         */
        "fulfillment": "fulfillment",
    
        /**
         * value: "gamification"
         * @const
         */
        "gamification": "gamification",
    
        /**
         * value: "inventory"
         * @const
         */
        "inventory": "inventory",
    
        /**
         * value: "invoice"
         * @const
         */
        "invoice": "invoice",
    
        /**
         * value: "media"
         * @const
         */
        "media": "media",
    
        /**
         * value: "scheduler"
         * @const
         */
        "scheduler": "scheduler",
    
        /**
         * value: "store"
         * @const
         */
        "store": "store",
    
        /**
         * value: "subscription"
         * @const
         */
        "subscription": "subscription",
    
        /**
         * value: "user"
         * @const
         */
        "user": "user",
    
        /**
         * value: "wallet"
         * @const
         */
        "wallet": "wallet",
    
        /**
         * value: "custom"
         * @const
         */
        "custom": "custom",
    
        /**
         * value: "challenge"
         * @const
         */
        "challenge": "challenge",
    
        /**
         * value: "activity"
         * @const
         */
        "activity": "activity",
    
        /**
         * value: "campaign"
         * @const
         */
        "campaign": "campaign",
    
        /**
         * value: "event"
         * @const
         */
        "event": "event"    
    };



}


