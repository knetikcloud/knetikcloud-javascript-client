/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';
import PropertyFieldResource from './PropertyFieldResource';





/**
* The PropertyFieldResource model module.
* @module model/PropertyFieldResource
* @version 3.0.7
*/
export default class PropertyFieldResource {
    /**
    * Constructs a new <code>PropertyFieldResource</code>.
    * @alias module:model/PropertyFieldResource
    * @class
    */

    constructor() {
        

        
        

        

        
    }

    /**
    * Constructs a <code>PropertyFieldResource</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/PropertyFieldResource} obj Optional instance to populate.
    * @return {module:model/PropertyFieldResource} The populated <code>PropertyFieldResource</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PropertyFieldResource();

            
            
            

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('inner_type')) {
                obj['inner_type'] = ApiClient.convertToType(data['inner_type'], 'String');
            }
            if (data.hasOwnProperty('inner_type_fields')) {
                obj['inner_type_fields'] = ApiClient.convertToType(data['inner_type_fields'], [PropertyFieldResource]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('required')) {
                obj['required'] = ApiClient.convertToType(data['required'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('valid_values')) {
                obj['valid_values'] = ApiClient.convertToType(data['valid_values'], ['String']);
            }
        }
        return obj;
    }

    /**
    * A description of the field
    * @member {String} description
    */
    description = undefined;
    /**
    * The type of values within a 'list' type field
    * @member {module:model/PropertyFieldResource.InnerTypeEnum} inner_type
    */
    inner_type = undefined;
    /**
    * A description of fields within objects within a 'list' type field, when inner_type is 'object'
    * @member {Array.<module:model/PropertyFieldResource>} inner_type_fields
    */
    inner_type_fields = undefined;
    /**
    * The name of the field
    * @member {String} name
    */
    name = undefined;
    /**
    * Whether the field is required
    * @member {Boolean} required
    */
    required = undefined;
    /**
    * The type of the field
    * @member {module:model/PropertyFieldResource.TypeEnum} type
    */
    type = undefined;
    /**
    * A list of valid values for 'enum' type fields
    * @member {Array.<String>} valid_values
    */
    valid_values = undefined;






    /**
    * Allowed values for the <code>inner_type</code> property.
    * @enum {String}
    * @readonly
    */
    static InnerTypeEnum = {
    
        /**
         * value: "integer"
         * @const
         */
        "integer": "integer",
    
        /**
         * value: "number"
         * @const
         */
        "number": "number",
    
        /**
         * value: "bool"
         * @const
         */
        "bool": "bool",
    
        /**
         * value: "string"
         * @const
         */
        "string": "string",
    
        /**
         * value: "enumeration"
         * @const
         */
        "enumeration": "enumeration",
    
        /**
         * value: "list"
         * @const
         */
        "list": "list",
    
        /**
         * value: "object"
         * @const
         */
        "object": "object"    
    };

    /**
    * Allowed values for the <code>type</code> property.
    * @enum {String}
    * @readonly
    */
    static TypeEnum = {
    
        /**
         * value: "integer"
         * @const
         */
        "integer": "integer",
    
        /**
         * value: "number"
         * @const
         */
        "number": "number",
    
        /**
         * value: "bool"
         * @const
         */
        "bool": "bool",
    
        /**
         * value: "string"
         * @const
         */
        "string": "string",
    
        /**
         * value: "enumeration"
         * @const
         */
        "enumeration": "enumeration",
    
        /**
         * value: "list"
         * @const
         */
        "list": "list",
    
        /**
         * value: "object"
         * @const
         */
        "object": "object"    
    };



}


