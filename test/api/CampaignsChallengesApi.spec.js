/**
 * Knetik Platform API Documentation Latest
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KnetikPlatformApiDocumentationLatest);
  }
}(this, function(expect, KnetikPlatformApiDocumentationLatest) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KnetikPlatformApiDocumentationLatest.CampaignsChallengesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CampaignsChallengesApi', function() {
    describe('createChallengeActivityUsingPOST', function() {
      it('should call createChallengeActivityUsingPOST successfully', function(done) {
        //uncomment below and update the code to test createChallengeActivityUsingPOST
        //instance.createChallengeActivityUsingPOST(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createChallengeTemplateUsingPOST', function() {
      it('should call createChallengeTemplateUsingPOST successfully', function(done) {
        //uncomment below and update the code to test createChallengeTemplateUsingPOST
        //instance.createChallengeTemplateUsingPOST(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createChallengeUsingPOST', function() {
      it('should call createChallengeUsingPOST successfully', function(done) {
        //uncomment below and update the code to test createChallengeUsingPOST
        //instance.createChallengeUsingPOST(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteChallengeActivityUsingDELETE', function() {
      it('should call deleteChallengeActivityUsingDELETE successfully', function(done) {
        //uncomment below and update the code to test deleteChallengeActivityUsingDELETE
        //instance.deleteChallengeActivityUsingDELETE(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteChallengeEventUsingDELETE', function() {
      it('should call deleteChallengeEventUsingDELETE successfully', function(done) {
        //uncomment below and update the code to test deleteChallengeEventUsingDELETE
        //instance.deleteChallengeEventUsingDELETE(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteChallengeTemplateUsingDELETE', function() {
      it('should call deleteChallengeTemplateUsingDELETE successfully', function(done) {
        //uncomment below and update the code to test deleteChallengeTemplateUsingDELETE
        //instance.deleteChallengeTemplateUsingDELETE(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteChallengeUsingDELETE', function() {
      it('should call deleteChallengeUsingDELETE successfully', function(done) {
        //uncomment below and update the code to test deleteChallengeUsingDELETE
        //instance.deleteChallengeUsingDELETE(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getActivitiesUsingGET1', function() {
      it('should call getActivitiesUsingGET1 successfully', function(done) {
        //uncomment below and update the code to test getActivitiesUsingGET1
        //instance.getActivitiesUsingGET1(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getChallengeActivityUsingGET', function() {
      it('should call getChallengeActivityUsingGET successfully', function(done) {
        //uncomment below and update the code to test getChallengeActivityUsingGET
        //instance.getChallengeActivityUsingGET(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getChallengeEventUsingGET', function() {
      it('should call getChallengeEventUsingGET successfully', function(done) {
        //uncomment below and update the code to test getChallengeEventUsingGET
        //instance.getChallengeEventUsingGET(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getChallengeEventssUsingGET', function() {
      it('should call getChallengeEventssUsingGET successfully', function(done) {
        //uncomment below and update the code to test getChallengeEventssUsingGET
        //instance.getChallengeEventssUsingGET(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getChallengeTemplateUsingGET', function() {
      it('should call getChallengeTemplateUsingGET successfully', function(done) {
        //uncomment below and update the code to test getChallengeTemplateUsingGET
        //instance.getChallengeTemplateUsingGET(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getChallengeTemplatesUsingGET', function() {
      it('should call getChallengeTemplatesUsingGET successfully', function(done) {
        //uncomment below and update the code to test getChallengeTemplatesUsingGET
        //instance.getChallengeTemplatesUsingGET(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getChallengeUsingGET', function() {
      it('should call getChallengeUsingGET successfully', function(done) {
        //uncomment below and update the code to test getChallengeUsingGET
        //instance.getChallengeUsingGET(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getChallengesUsingGET1', function() {
      it('should call getChallengesUsingGET1 successfully', function(done) {
        //uncomment below and update the code to test getChallengesUsingGET1
        //instance.getChallengesUsingGET1(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateChallengeActivityUsingPUT', function() {
      it('should call updateChallengeActivityUsingPUT successfully', function(done) {
        //uncomment below and update the code to test updateChallengeActivityUsingPUT
        //instance.updateChallengeActivityUsingPUT(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateChallengeTemplateUsingPUT', function() {
      it('should call updateChallengeTemplateUsingPUT successfully', function(done) {
        //uncomment below and update the code to test updateChallengeTemplateUsingPUT
        //instance.updateChallengeTemplateUsingPUT(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateChallengeUsingPUT', function() {
      it('should call updateChallengeUsingPUT successfully', function(done) {
        //uncomment below and update the code to test updateChallengeUsingPUT
        //instance.updateChallengeUsingPUT(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
