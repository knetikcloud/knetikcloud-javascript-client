/**
 * Knetik Platform API Documentation Latest
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KnetikPlatformApiDocumentationLatest);
  }
}(this, function(expect, KnetikPlatformApiDocumentationLatest) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KnetikPlatformApiDocumentationLatest.GamificationAchievementsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GamificationAchievementsApi', function() {
    describe('createAchievementUsingPOST', function() {
      it('should call createAchievementUsingPOST successfully', function(done) {
        //uncomment below and update the code to test createAchievementUsingPOST
        //instance.createAchievementUsingPOST(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createTemplateUsingPOST', function() {
      it('should call createTemplateUsingPOST successfully', function(done) {
        //uncomment below and update the code to test createTemplateUsingPOST
        //instance.createTemplateUsingPOST(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAchievementTemplateUsingDELETE', function() {
      it('should call deleteAchievementTemplateUsingDELETE successfully', function(done) {
        //uncomment below and update the code to test deleteAchievementTemplateUsingDELETE
        //instance.deleteAchievementTemplateUsingDELETE(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAchievementUsingDELETE', function() {
      it('should call deleteAchievementUsingDELETE successfully', function(done) {
        //uncomment below and update the code to test deleteAchievementUsingDELETE
        //instance.deleteAchievementUsingDELETE(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findAllByGroupNameUsingGET', function() {
      it('should call findAllByGroupNameUsingGET successfully', function(done) {
        //uncomment below and update the code to test findAllByGroupNameUsingGET
        //instance.findAllByGroupNameUsingGET(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAchievementTemplateUsingGET', function() {
      it('should call getAchievementTemplateUsingGET successfully', function(done) {
        //uncomment below and update the code to test getAchievementTemplateUsingGET
        //instance.getAchievementTemplateUsingGET(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAchievementTemplatesUsingGET', function() {
      it('should call getAchievementTemplatesUsingGET successfully', function(done) {
        //uncomment below and update the code to test getAchievementTemplatesUsingGET
        //instance.getAchievementTemplatesUsingGET(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAchievementUsingGET', function() {
      it('should call getAchievementUsingGET successfully', function(done) {
        //uncomment below and update the code to test getAchievementUsingGET
        //instance.getAchievementUsingGET(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAchievementsUsingGET', function() {
      it('should call getAchievementsUsingGET successfully', function(done) {
        //uncomment below and update the code to test getAchievementsUsingGET
        //instance.getAchievementsUsingGET(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllUserProgressForAchievementUsingGET', function() {
      it('should call getAllUserProgressForAchievementUsingGET successfully', function(done) {
        //uncomment below and update the code to test getAllUserProgressForAchievementUsingGET
        //instance.getAllUserProgressForAchievementUsingGET(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllUserProgressUsingGET', function() {
      it('should call getAllUserProgressUsingGET successfully', function(done) {
        //uncomment below and update the code to test getAllUserProgressUsingGET
        //instance.getAllUserProgressUsingGET(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAvailableTriggersUsingGET', function() {
      it('should call getAvailableTriggersUsingGET successfully', function(done) {
        //uncomment below and update the code to test getAvailableTriggersUsingGET
        //instance.getAvailableTriggersUsingGET(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUserProgressForAchievementUsingGET', function() {
      it('should call getUserProgressForAchievementUsingGET successfully', function(done) {
        //uncomment below and update the code to test getUserProgressForAchievementUsingGET
        //instance.getUserProgressForAchievementUsingGET(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUserProgressUsingGET', function() {
      it('should call getUserProgressUsingGET successfully', function(done) {
        //uncomment below and update the code to test getUserProgressUsingGET
        //instance.getUserProgressUsingGET(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAchievementUsingPUT', function() {
      it('should call updateAchievementUsingPUT successfully', function(done) {
        //uncomment below and update the code to test updateAchievementUsingPUT
        //instance.updateAchievementUsingPUT(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateProgressUsingPUT', function() {
      it('should call updateProgressUsingPUT successfully', function(done) {
        //uncomment below and update the code to test updateProgressUsingPUT
        //instance.updateProgressUsingPUT(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTemplateUsingPUT', function() {
      it('should call updateTemplateUsingPUT successfully', function(done) {
        //uncomment below and update the code to test updateTemplateUsingPUT
        //instance.updateTemplateUsingPUT(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
