/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KnetikPlatformApiDocumentationLatest);
  }
}(this, function(expect, KnetikPlatformApiDocumentationLatest) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KnetikPlatformApiDocumentationLatest.GamificationTriviaApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GamificationTriviaApi', function() {
    describe('addAnswersUsingPOST', function() {
      it('should call addAnswersUsingPOST successfully', function(done) {
        //uncomment below and update the code to test addAnswersUsingPOST
        //instance.addAnswersUsingPOST(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addTagUsingPOST', function() {
      it('should call addTagUsingPOST successfully', function(done) {
        //uncomment below and update the code to test addTagUsingPOST
        //instance.addTagUsingPOST(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchAddTagUsingPOST', function() {
      it('should call batchAddTagUsingPOST successfully', function(done) {
        //uncomment below and update the code to test batchAddTagUsingPOST
        //instance.batchAddTagUsingPOST(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchRemoveTagUsingDELETE', function() {
      it('should call batchRemoveTagUsingDELETE successfully', function(done) {
        //uncomment below and update the code to test batchRemoveTagUsingDELETE
        //instance.batchRemoveTagUsingDELETE(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('bulkUpdateUsingPUT', function() {
      it('should call bulkUpdateUsingPUT successfully', function(done) {
        //uncomment below and update the code to test bulkUpdateUsingPUT
        //instance.bulkUpdateUsingPUT(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('countQuestionsUsingGET', function() {
      it('should call countQuestionsUsingGET successfully', function(done) {
        //uncomment below and update the code to test countQuestionsUsingGET
        //instance.countQuestionsUsingGET(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createQuestionTemplateUsingPOST', function() {
      it('should call createQuestionTemplateUsingPOST successfully', function(done) {
        //uncomment below and update the code to test createQuestionTemplateUsingPOST
        //instance.createQuestionTemplateUsingPOST(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createQuestionUsingPOST', function() {
      it('should call createQuestionUsingPOST successfully', function(done) {
        //uncomment below and update the code to test createQuestionUsingPOST
        //instance.createQuestionUsingPOST(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createUsingPOST', function() {
      it('should call createUsingPOST successfully', function(done) {
        //uncomment below and update the code to test createUsingPOST
        //instance.createUsingPOST(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteQuestionTemplateUsingDELETE', function() {
      it('should call deleteQuestionTemplateUsingDELETE successfully', function(done) {
        //uncomment below and update the code to test deleteQuestionTemplateUsingDELETE
        //instance.deleteQuestionTemplateUsingDELETE(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteQuestionUsingDELETE', function() {
      it('should call deleteQuestionUsingDELETE successfully', function(done) {
        //uncomment below and update the code to test deleteQuestionUsingDELETE
        //instance.deleteQuestionUsingDELETE(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteUsingDELETE', function() {
      it('should call deleteUsingDELETE successfully', function(done) {
        //uncomment below and update the code to test deleteUsingDELETE
        //instance.deleteUsingDELETE(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAnswerUsingGET', function() {
      it('should call getAnswerUsingGET successfully', function(done) {
        //uncomment below and update the code to test getAnswerUsingGET
        //instance.getAnswerUsingGET(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAnswersUsingGET', function() {
      it('should call getAnswersUsingGET successfully', function(done) {
        //uncomment below and update the code to test getAnswersUsingGET
        //instance.getAnswersUsingGET(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getListUsingGET1', function() {
      it('should call getListUsingGET1 successfully', function(done) {
        //uncomment below and update the code to test getListUsingGET1
        //instance.getListUsingGET1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getQuestionTemplateUsingGET', function() {
      it('should call getQuestionTemplateUsingGET successfully', function(done) {
        //uncomment below and update the code to test getQuestionTemplateUsingGET
        //instance.getQuestionTemplateUsingGET(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getQuestionTemplatesUsingGET', function() {
      it('should call getQuestionTemplatesUsingGET successfully', function(done) {
        //uncomment below and update the code to test getQuestionTemplatesUsingGET
        //instance.getQuestionTemplatesUsingGET(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getQuestionUsingGET', function() {
      it('should call getQuestionUsingGET successfully', function(done) {
        //uncomment below and update the code to test getQuestionUsingGET
        //instance.getQuestionUsingGET(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getQuestionsDeltaUsingGET', function() {
      it('should call getQuestionsDeltaUsingGET successfully', function(done) {
        //uncomment below and update the code to test getQuestionsDeltaUsingGET
        //instance.getQuestionsDeltaUsingGET(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getQuestionsUsingGET', function() {
      it('should call getQuestionsUsingGET successfully', function(done) {
        //uncomment below and update the code to test getQuestionsUsingGET
        //instance.getQuestionsUsingGET(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTagsUsingGET1', function() {
      it('should call getTagsUsingGET1 successfully', function(done) {
        //uncomment below and update the code to test getTagsUsingGET1
        //instance.getTagsUsingGET1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTagsUsingGET2', function() {
      it('should call getTagsUsingGET2 successfully', function(done) {
        //uncomment below and update the code to test getTagsUsingGET2
        //instance.getTagsUsingGET2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUsingGET', function() {
      it('should call getUsingGET successfully', function(done) {
        //uncomment below and update the code to test getUsingGET
        //instance.getUsingGET(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeAnswersUsingDELETE', function() {
      it('should call removeAnswersUsingDELETE successfully', function(done) {
        //uncomment below and update the code to test removeAnswersUsingDELETE
        //instance.removeAnswersUsingDELETE(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeTagUsingDELETE', function() {
      it('should call removeTagUsingDELETE successfully', function(done) {
        //uncomment below and update the code to test removeTagUsingDELETE
        //instance.removeTagUsingDELETE(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startProcessUsingPOST', function() {
      it('should call startProcessUsingPOST successfully', function(done) {
        //uncomment below and update the code to test startProcessUsingPOST
        //instance.startProcessUsingPOST(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAnswerUsingPUT', function() {
      it('should call updateAnswerUsingPUT successfully', function(done) {
        //uncomment below and update the code to test updateAnswerUsingPUT
        //instance.updateAnswerUsingPUT(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateQuestionTemplateUsingPUT', function() {
      it('should call updateQuestionTemplateUsingPUT successfully', function(done) {
        //uncomment below and update the code to test updateQuestionTemplateUsingPUT
        //instance.updateQuestionTemplateUsingPUT(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateQuestionUsingPUT', function() {
      it('should call updateQuestionUsingPUT successfully', function(done) {
        //uncomment below and update the code to test updateQuestionUsingPUT
        //instance.updateQuestionUsingPUT(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateUsingPUT', function() {
      it('should call updateUsingPUT successfully', function(done) {
        //uncomment below and update the code to test updateUsingPUT
        //instance.updateUsingPUT(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
