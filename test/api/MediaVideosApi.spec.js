/**
 * Knetik Platform API Documentation Latest
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KnetikPlatformApiDocumentationLatest);
  }
}(this, function(expect, KnetikPlatformApiDocumentationLatest) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KnetikPlatformApiDocumentationLatest.MediaVideosApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MediaVideosApi', function() {
    describe('addCommentUsingPOST1', function() {
      it('should call addCommentUsingPOST1 successfully', function(done) {
        //uncomment below and update the code to test addCommentUsingPOST1
        //instance.addCommentUsingPOST1(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addContributorUsingPOST', function() {
      it('should call addContributorUsingPOST successfully', function(done) {
        //uncomment below and update the code to test addContributorUsingPOST
        //instance.addContributorUsingPOST(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addDispositionUsingPOST1', function() {
      it('should call addDispositionUsingPOST1 successfully', function(done) {
        //uncomment below and update the code to test addDispositionUsingPOST1
        //instance.addDispositionUsingPOST1(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addFlagUsingPOST', function() {
      it('should call addFlagUsingPOST successfully', function(done) {
        //uncomment below and update the code to test addFlagUsingPOST
        //instance.addFlagUsingPOST(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addRelatedUsingPOST', function() {
      it('should call addRelatedUsingPOST successfully', function(done) {
        //uncomment below and update the code to test addRelatedUsingPOST
        //instance.addRelatedUsingPOST(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addVideoUsingPOST', function() {
      it('should call addVideoUsingPOST successfully', function(done) {
        //uncomment below and update the code to test addVideoUsingPOST
        //instance.addVideoUsingPOST(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addWhitelistUsingPOST', function() {
      it('should call addWhitelistUsingPOST successfully', function(done) {
        //uncomment below and update the code to test addWhitelistUsingPOST
        //instance.addWhitelistUsingPOST(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCommentUsingDELETE1', function() {
      it('should call deleteCommentUsingDELETE1 successfully', function(done) {
        //uncomment below and update the code to test deleteCommentUsingDELETE1
        //instance.deleteCommentUsingDELETE1(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDispositionUsingDELETE1', function() {
      it('should call deleteDispositionUsingDELETE1 successfully', function(done) {
        //uncomment below and update the code to test deleteDispositionUsingDELETE1
        //instance.deleteDispositionUsingDELETE1(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFlagUsingDELETE', function() {
      it('should call deleteFlagUsingDELETE successfully', function(done) {
        //uncomment below and update the code to test deleteFlagUsingDELETE
        //instance.deleteFlagUsingDELETE(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRelationshipUsingDELETE1', function() {
      it('should call deleteRelationshipUsingDELETE1 successfully', function(done) {
        //uncomment below and update the code to test deleteRelationshipUsingDELETE1
        //instance.deleteRelationshipUsingDELETE1(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteVideoUsingDELETE', function() {
      it('should call deleteVideoUsingDELETE successfully', function(done) {
        //uncomment below and update the code to test deleteVideoUsingDELETE
        //instance.deleteVideoUsingDELETE(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCommentsUsingGET1', function() {
      it('should call getCommentsUsingGET1 successfully', function(done) {
        //uncomment below and update the code to test getCommentsUsingGET1
        //instance.getCommentsUsingGET1(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDispositionsUsingGET1', function() {
      it('should call getDispositionsUsingGET1 successfully', function(done) {
        //uncomment below and update the code to test getDispositionsUsingGET1
        //instance.getDispositionsUsingGET1(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRelatedUsingGET', function() {
      it('should call getRelatedUsingGET successfully', function(done) {
        //uncomment below and update the code to test getRelatedUsingGET
        //instance.getRelatedUsingGET(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUserVideosUsingGET', function() {
      it('should call getUserVideosUsingGET successfully', function(done) {
        //uncomment below and update the code to test getUserVideosUsingGET
        //instance.getUserVideosUsingGET(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getVideoUsingGET', function() {
      it('should call getVideoUsingGET successfully', function(done) {
        //uncomment below and update the code to test getVideoUsingGET
        //instance.getVideoUsingGET(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeContributorUsingDELETE', function() {
      it('should call removeContributorUsingDELETE successfully', function(done) {
        //uncomment below and update the code to test removeContributorUsingDELETE
        //instance.removeContributorUsingDELETE(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeWhitelistUsingDELETE', function() {
      it('should call removeWhitelistUsingDELETE successfully', function(done) {
        //uncomment below and update the code to test removeWhitelistUsingDELETE
        //instance.removeWhitelistUsingDELETE(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchVideosUsingGET', function() {
      it('should call searchVideosUsingGET successfully', function(done) {
        //uncomment below and update the code to test searchVideosUsingGET
        //instance.searchVideosUsingGET(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateCommentUsingPUT1', function() {
      it('should call updateCommentUsingPUT1 successfully', function(done) {
        //uncomment below and update the code to test updateCommentUsingPUT1
        //instance.updateCommentUsingPUT1(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRelationshipUsingPUT1', function() {
      it('should call updateRelationshipUsingPUT1 successfully', function(done) {
        //uncomment below and update the code to test updateRelationshipUsingPUT1
        //instance.updateRelationshipUsingPUT1(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateVideoUsingPUT', function() {
      it('should call updateVideoUsingPUT successfully', function(done) {
        //uncomment below and update the code to test updateVideoUsingPUT
        //instance.updateVideoUsingPUT(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('viewVideoUsingPOST', function() {
      it('should call viewVideoUsingPOST successfully', function(done) {
        //uncomment below and update the code to test viewVideoUsingPOST
        //instance.viewVideoUsingPOST(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
