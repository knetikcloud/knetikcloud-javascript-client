/**
 * Knetik Platform API Documentation Latest
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KnetikPlatformApiDocumentationLatest);
  }
}(this, function(expect, KnetikPlatformApiDocumentationLatest) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KnetikPlatformApiDocumentationLatest.UsersApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UsersApi', function() {
    describe('createUserTemplateUsingPOST', function() {
      it('should call createUserTemplateUsingPOST successfully', function(done) {
        //uncomment below and update the code to test createUserTemplateUsingPOST
        //instance.createUserTemplateUsingPOST(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteUserTemplateUsingDELETE', function() {
      it('should call deleteUserTemplateUsingDELETE successfully', function(done) {
        //uncomment below and update the code to test deleteUserTemplateUsingDELETE
        //instance.deleteUserTemplateUsingDELETE(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('doPasswordResetUsingPUT', function() {
      it('should call doPasswordResetUsingPUT successfully', function(done) {
        //uncomment below and update the code to test doPasswordResetUsingPUT
        //instance.doPasswordResetUsingPUT(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUserTemplateUsingGET', function() {
      it('should call getUserTemplateUsingGET successfully', function(done) {
        //uncomment below and update the code to test getUserTemplateUsingGET
        //instance.getUserTemplateUsingGET(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUserTemplatesUsingGET', function() {
      it('should call getUserTemplatesUsingGET successfully', function(done) {
        //uncomment below and update the code to test getUserTemplatesUsingGET
        //instance.getUserTemplatesUsingGET(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUserUsingGET', function() {
      it('should call getUserUsingGET successfully', function(done) {
        //uncomment below and update the code to test getUserUsingGET
        //instance.getUserUsingGET(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUsersUsingGET', function() {
      it('should call getUsersUsingGET successfully', function(done) {
        //uncomment below and update the code to test getUsersUsingGET
        //instance.getUsersUsingGET(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('initiatePasswordResetUsingPOST', function() {
      it('should call initiatePasswordResetUsingPOST successfully', function(done) {
        //uncomment below and update the code to test initiatePasswordResetUsingPOST
        //instance.initiatePasswordResetUsingPOST(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('registerUserUsingPOST', function() {
      it('should call registerUserUsingPOST successfully', function(done) {
        //uncomment below and update the code to test registerUserUsingPOST
        //instance.registerUserUsingPOST(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setPasswordUsingPUT', function() {
      it('should call setPasswordUsingPUT successfully', function(done) {
        //uncomment below and update the code to test setPasswordUsingPUT
        //instance.setPasswordUsingPUT(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateUserTemplateUsingPUT', function() {
      it('should call updateUserTemplateUsingPUT successfully', function(done) {
        //uncomment below and update the code to test updateUserTemplateUsingPUT
        //instance.updateUserTemplateUsingPUT(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateUserUsingPUT', function() {
      it('should call updateUserUsingPUT successfully', function(done) {
        //uncomment below and update the code to test updateUserUsingPUT
        //instance.updateUserUsingPUT(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
